<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>杨庭培的博客</title>
  
  <subtitle>曾记否，到中流击水，浪遏飞舟？</subtitle>
  <link href="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/atom.xml" rel="self"/>
  
  <link href="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/"/>
  <updated>2023-08-11T01:47:47.439Z</updated>
  <id>https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/</id>
  
  <author>
    <name>杨庭培</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker 学习小计</title>
    <link href="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/49db9d615e67/"/>
    <id>https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/49db9d615e67/</id>
    <published>2023-08-11T01:47:47.439Z</published>
    <updated>2023-08-11T01:47:47.439Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docker简介"><a href="#docker简介" class="headerlink" title="docker简介"></a>docker简介</h2><ul><li>Docker 是什么</li></ul><p>Docker 是一个生态，这个生态专注于管理 Containers（容器）。</p><ul><li>为什么用 Docker？</li></ul><p>Docker 使得安装软件与运行软件十分便利。</p><p>安装软件时，可能会碰到各种各样的问题，解决这些问题可能会花费很多人力物力。而 Docker 可以标准化“安装流程”，让用户直接进入运行软件步骤，进而节省成本。</p><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><ol><li>Image</li></ol><p>Image 也称为镜像，是一个包含运行指定程序的文件系统快照和启动命令的文件。通常在<a href="https://hub.docker.com/">Docker Hub</a>下载。</p><ol start="2"><li>Container</li></ol><p>Container 也就是容器，是 Image 的一个实例。是一个正在运行的进程，以及机器物理资源的子集。</p><p>不同的 Containers 之间，资源是隔离的。</p><ol start="3"><li>Docker Client</li></ol><p>用户通过终端与 Docker Client 交互，一个解析用户命令的程序，并发送给 Docker Server。</p><p>这个程序本身没有处理 Image 与 Container 的功能。</p><ol start="4"><li>Docker Server</li></ol><p>也称之为 Docker Daemon，是负责创建、运行容器的程序。 </p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://docs.docker.com/get-docker/">官方下载网站</a> </p><h2 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><p>以 training&#x2F;webapp 为例，training&#x2F;webapp 是由 docker 官方维护的一个镜像，它是一个专门用于试验的python web app。运行的效果就是在网页中呈现一个hello world。</p><p>命令：<code>docker pull training/webapp</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from training/webapp</span><br><span class="line">Image docker.io/training/webapp:latest uses outdated schema1 manifest format. Please upgrade to a schema2 image for better future compatibility. More information at https://docs.docker.com/registry/spec/deprecated-schema-v1/</span><br><span class="line">e190868d63f8: Pull complete</span><br><span class="line">909cd34c6fd7: Pull complete</span><br><span class="line">0b9bfabab7c1: Pull complete</span><br><span class="line">a3ed95caeb02: Pull complete</span><br><span class="line">10bbbc0fc0ff: Pull complete</span><br><span class="line">fca59b508e9f: Pull complete</span><br><span class="line">e7ae2541b15b: Pull complete</span><br><span class="line">9dd97ef58ce9: Pull complete</span><br><span class="line">a4c1b0cb7af7: Pull complete</span><br><span class="line">Digest: sha256:06e9c1983bd6d5db5fba376ccd63bfa529e8d02f23d5079b8f74a616308fb11d</span><br><span class="line">Status: Downloaded newer image for training/webapp:latest</span><br><span class="line">docker.io/training/webapp:latest</span><br></pre></td></tr></table></figure><p>拉取完成可使用 <code>docker images</code> 命令查看镜像是否在镜像列表中。这里有两个镜像：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">REPOSITORY        TAG       IMAGE ID       CREATED       SIZE</span><br><span class="line">hello-world       latest    9c7a54a9a43c   4 weeks ago   13.3kB</span><br><span class="line">training/webapp   latest    6fae60ef3446   8 years ago   349MB</span><br></pre></td></tr></table></figure><h2 id="启动镜像"><a href="#启动镜像" class="headerlink" title="启动镜像"></a>启动镜像</h2><p>命令：<code>docker run -d -P training/webapp python app.py</code></p><p>注意：这里是大写字母P</p><p>运行命令后，会打印了容器 ID，这里是<code>cc54d5db3f55842176c41f42896106c2d02d32214e81856687daa1c506f9070c</code>。容器 ID 很长，用的时候一般取前几位就行了。</p><p>各参数意义如下：</p><ul><li>docker: Docker 的二进制执行文件</li><li>run: 与前面的<code>docker</code>组合来运行一个容器</li><li>-d: 让容器在后台运行</li><li>-P: 将容器内部使用的网络端口随机映射到我们使用的主机上</li><li>training&#x2F;webapp: 指定要运行的镜像</li><li>python app.py: 启动容器时运行的命令</li></ul><h2 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h2><p>查看正在运行的容器的命令：<code>docker ps</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CONTAINER ID   IMAGE             COMMAND           CREATED         STATUS       PORTS                     NAMES</span><br><span class="line">cc54d5db3f55   training/webapp   &quot;python app.py&quot;   8 seconds ago   Up 8 seconds   0.0.0.0:32768-&gt;5000/tcp   trusting_euclid</span><br></pre></td></tr></table></figure><blockquote><p>注意：立即执行并退出的容器用上述命令是看不到的</p></blockquote><p>列的信息简介：</p><ul><li>CONTAINER ID: 容器 ID</li><li>IMAGE: 使用的镜像</li><li>COMMAND: 启动容器时运行的命令</li><li>CREATED: 容器的创建时间</li><li>STATUS: 容器状态，一共有7种：<ul><li>created（已创建）</li><li>restarting（重启中）</li><li>running 或 Up（运行中）</li><li>removing（迁移中）</li><li>paused（暂停）</li><li>exited（停止）</li><li>dead（死亡）</li></ul></li><li>PORTS: 容器的端口映射信息和使用的连接类型（tcp\udp）。</li><li>NAMES: 自动分配的容器名称</li></ul><p>上面命令中，Docker开放了5000端口（默认 Python Flask 端口）并映射到主机端口32768上。</p><p>如果要查看所有的容器，而不只是正在运行的，可以添加<code>--all</code>选项:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CONTAINER ID   IMAGE             COMMAND               CREATED              STATUS                          PORTS                     NAMES</span><br><span class="line">13260e7b78ad   busybox           &quot;ping bilibili.com&quot;   About a minute ago   Exited (0) About a minute ago                             peaceful_dijkstra</span><br><span class="line">cc54d5db3f55   training/webapp   &quot;python app.py&quot;       14 minutes ago       Up 14 minutes                   0.0.0.0:32768-&gt;5000/tcp   trusting_euclid</span><br><span class="line">bf2bf04f3575   hello-world       &quot;/hello&quot;              20 minutes ago       Exited (0) 20 minutes ago                                 suspicious_bouman</span><br></pre></td></tr></table></figure><h3 id="访问web应用"><a href="#访问web应用" class="headerlink" title="访问web应用"></a>访问web应用</h3><p>在主机的浏览器输入: <code>http://localhost:32768</code>, 看到 <code>Hello world!</code> 就说明运行成功了</p><h3 id="如何换个端口"><a href="#如何换个端口" class="headerlink" title="如何换个端口"></a>如何换个端口</h3><p>运行容器时可以用<code>-p</code>切换端口</p><p>命令：<code>docker run -d -p 5000:5000 training/webapp python app.py</code></p><p>这里将容器的5000端口映射到了主机的5000端口。再在主机的浏览器输入: <code>http://localhost:5000</code>。可以看到5000端口能够成功访问。</p><p>需要注意的是，由于之前的容器也在后台运行，所以localhost:32768也能够正常访问。运行命令：<code>docker ps</code>，可以看到两个training&#x2F;webapp：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CONTAINER ID   IMAGE             COMMAND               CREATED         STATUS                   PORTS                     NAMES</span><br><span class="line">3d405b6cadd2   training/webapp   &quot;python app.py&quot;       3 seconds ago   Up 2 seconds             0.0.0.0:5000-&gt;5000/tcp    awesome_babbage</span><br><span class="line">13260e7b78ad   busybox           &quot;ping bilibili.com&quot;   2 hours ago     Exited (0) 2 hours ago                             peaceful_dijkstra</span><br><span class="line">cc54d5db3f55   training/webapp   &quot;python app.py&quot;       2 hours ago     Up 2 hours               0.0.0.0:32768-&gt;5000/tcp   trusting_euclid</span><br><span class="line">bf2bf04f3575   hello-world       &quot;/hello&quot;              2 hours ago     Exited (0) 2 hours ago                             suspicious_bouman</span><br></pre></td></tr></table></figure><h2 id="如何停止容器"><a href="#如何停止容器" class="headerlink" title="如何停止容器"></a>如何停止容器</h2><p>有两种命令可以停止容器：<code>docker stop &lt;container_id&gt;</code> 和 <code>docker kill &lt;container_id&gt;</code>。</p><ul><li><p>docker stop 发送 SIGTERM 信号给容器，容器接收到信号后，执行相关逻辑并停止。</p></li><li><p>docker kill 发送 SIGKILL 信号给容器，使它立即终止。</p></li></ul><p>一般情况下我们使用 docker stop 来停止容器，对于容器已经未响应的情况，再使用 docker kill 命令。不过默认情况下，docker stop 命令会在信号发送后10秒钟后，对未停止的容器再发送 SIGKILL 信号。</p><p>运行命令<code>docker stop cc54d5db3f55</code>，可以看到容器id为 cc54d5db3f55 的容器状态变为 Exited 了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CONTAINER ID   IMAGE             COMMAND               CREATED         STATUS                        PORTS                    NAMES</span><br><span class="line">3d405b6cadd2   training/webapp   &quot;python app.py&quot;       2 minutes ago   Up 2 minutes                  0.0.0.0:5000-&gt;5000/tcp   awesome_babbage</span><br><span class="line">13260e7b78ad   busybox           &quot;ping bilibili.com&quot;   2 hours ago     Exited (0) 2 hours ago                                 peaceful_dijkstra</span><br><span class="line">cc54d5db3f55   training/webapp   &quot;python app.py&quot;       2 hours ago     Exited (137) 12 seconds ago                            trusting_euclid</span><br><span class="line">bf2bf04f3575   hello-world       &quot;/hello&quot;              2 hours ago     Exited (0) 2 hours ago                                 suspicious_bouman</span><br></pre></td></tr></table></figure><h2 id="如何重新启动容器"><a href="#如何重新启动容器" class="headerlink" title="如何重新启动容器"></a>如何重新启动容器</h2><p>在 Exited 状态并不代表容器没用了，运用命令 <code>docker start &lt;container_id&gt;</code> 可以重新启动容器。该命令后添加 -a 来获取容器的标准输出&#x2F;标准错误</p><h2 id="如何移除容器"><a href="#如何移除容器" class="headerlink" title="如何移除容器"></a>如何移除容器</h2><p>命令：<code>docker rm &lt;container_id&gt;</code></p><p>另外，<code>docker system prune</code>这个命令会一口气删除所有未运行的容器来节省空间，同时也会删除本地的镜像缓存。</p>]]></content>
    
    
    <summary type="html">学习 Docker 的总结</summary>
    
    
    
    <category term="Docker学习笔记" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/categories/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Docker" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>基于 docker 搭建 rails 开发环境</title>
    <link href="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/c7cd7fb57f82/"/>
    <id>https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/c7cd7fb57f82/</id>
    <published>2023-08-11T01:47:47.439Z</published>
    <updated>2023-08-11T01:47:47.443Z</updated>
    
    <content type="html"><![CDATA[<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>先开启一个临时的 Ruby 容器，在容器内创建项目，之后再构建开发需要的镜像。</p><h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h3><p>为了创建一个 Rails 项目，先启动一个临时的 Ruby 容器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it -v $(pwd):/app -w /app ruby:3.2 bash</span><br></pre></td></tr></table></figure><p>在容器内安装 Rails gem：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/app# gem install rails</span><br></pre></td></tr></table></figure><p>然后创建项目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/app# rails new myapp --database=postgresql --css=sass --skip-bundle</span><br></pre></td></tr></table></figure><p>这里使用了<code>--skip-bundle</code>参数，因为这只是个临时容器，稍后会在开发容器内执行 <code>bundle</code>。</p><p>现在这个临时容器已经完成使命，按 ctrl-d 或者输入 exit 退出容器。</p><h3 id="添加-Dockerfile"><a href="#添加-Dockerfile" class="headerlink" title="添加 Dockerfile"></a>添加 Dockerfile</h3><p>在项目目录下添加<code>Dockerfile</code>文件，输入以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">FROM ruby:3.2</span><br><span class="line"></span><br><span class="line"># ruby 镜像预设的这个环境变量干扰了后面的操作，将它重置为默认值</span><br><span class="line">ENV BUNDLE_APP_CONFIG=.bundle</span><br><span class="line"></span><br><span class="line"># 如果需要安装其他依赖，取消这段注释</span><br><span class="line"># RUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \</span><br><span class="line">#   nodejs \</span><br><span class="line">#   npm \</span><br><span class="line">#   postgresql-client</span><br><span class="line"></span><br><span class="line">WORKDIR /app</span><br></pre></td></tr></table></figure><p>这是一个最精简的 Rails 开发环境镜像，如果有需要可以用<code>apt-get</code>安装其他系统依赖。</p><p>现在还不需要构建镜像，稍后我们会用<code>docker compose</code>命令一起构建。</p><h3 id="添加-docker-compose-yml"><a href="#添加-docker-compose-yml" class="headerlink" title="添加 docker-compose.yml"></a>添加 docker-compose.yml</h3><p>在项目目录下添加<code>docker-compose.yml</code>文件，输入以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3.9&quot;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    build: .</span><br><span class="line">    command: bin/rails server -b 0.0.0.0</span><br><span class="line">    volumes:</span><br><span class="line">      - .:/app</span><br><span class="line">    ports:</span><br><span class="line">      - 3000:3000</span><br><span class="line">    depends_on:</span><br><span class="line">      - postgres</span><br><span class="line">  postgres:</span><br><span class="line">    image: postgres:13</span><br><span class="line">    environment:</span><br><span class="line">      POSTGRES_PASSWORD: postgres</span><br></pre></td></tr></table></figure><p>这里定义了 web 和 postgres services。web service 会基于当前目录下的 Dockerfile 文件构建镜像，并且挂载当前目录到容器内的 &#x2F;app 目录，释出 3000 端口，并且添加了对 postgres servcie 的启动依赖。postgres service 会使用 postgres 镜像，并通过环境变量设置了初始密码。</p><h3 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h3><p>执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker compose build</span><br></pre></td></tr></table></figure><p>Docker Compose 会读取 docker-compose.yml 中的配置，构建相应的镜像。</p><blockquote><p>注意：每次修改 Dockerfile 后都要重新执行这个命令。</p></blockquote><h3 id="进入命令行"><a href="#进入命令行" class="headerlink" title="进入命令行"></a>进入命令行</h3><p>执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker compose run web bash</span><br></pre></td></tr></table></figure><p>这样就会启动 web service 容器，并且打开一个 bash shell。在这个 shell 中我们可以执行本地开发时需要执行的命令，例如 bundle install，bin&#x2F;rails g 等。</p><p>后面需要在容器内执行的操作都会通过这个 shell 执行。</p><h3 id="执行-bundle"><a href="#执行-bundle" class="headerlink" title="执行 bundle"></a>执行 bundle</h3><p>首先在容器内执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/app# bundle config set --local path vendor/bundle</span><br></pre></td></tr></table></figure><p>这个命令将 bundle 的安装目录设为项目下的 vendor&#x2F;bundle 目录。因为我不希望开发的时候每次更新 Gemfile 都要重新构建镜像。</p><p>然后执行 bundle：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/app# bundle install</span><br></pre></td></tr></table></figure><blockquote><p>注意：记得在 .gitignore 中添加 vendor&#x2F;bundle。</p></blockquote><h3 id="准备数据库"><a href="#准备数据库" class="headerlink" title="准备数据库"></a>准备数据库</h3><p>在创建数据库前先要修改 Rails 项目的数据库设置，因为在 Docker Compose 搭建的环境中，PostgreSQL 跟 Rails 进程运行在不同的容器中，类似于不同的主机，service 名就是各自的网络名。</p><p>修改<code>database.yml</code>，在<code>development</code>和<code>test</code>段加入以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">host: postgres</span><br><span class="line">username: postgres</span><br><span class="line">password: postgres</span><br></pre></td></tr></table></figure><p>然后执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/app# bin/setup</span><br></pre></td></tr></table></figure><p>之后便会创建相应的数据库。</p><h3 id="启动-web-service"><a href="#启动-web-service" class="headerlink" title="启动 web service"></a>启动 web service</h3><p>经过上面的准备，是时候启动 web service 了。打开另一个终端，输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker compose up</span><br></pre></td></tr></table></figure><p>启动完成后，打开 <a href="http://localhost:3000/">http://localhost:3000</a> 就能看到 Rails 的启动页面了</p><h2 id="一种更简单的方式"><a href="#一种更简单的方式" class="headerlink" title="一种更简单的方式"></a>一种更简单的方式</h2><p>偶然看大佬的分享发现的：<a href="https://github.com/rails/docked">rails&#x2F;docked</a></p><p>先运行下面的命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker volume create ruby-bundle-cache</span><br><span class="line">$ alias docked=&#x27;docker run --rm -it -v $&#123;PWD&#125;:/rails -v ruby-bundle-cache:/bundle -p 3000:3000 ghcr.io/rails/cli&#x27;</span><br></pre></td></tr></table></figure><p>然后创造你的 rails 应用:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docked rails new weblog</span><br><span class="line">$ cd weblog</span><br><span class="line">$ docked rails generate scaffold post title:string body:text</span><br><span class="line">$ docked rails db:migrate</span><br><span class="line">$ docked rails server</span><br></pre></td></tr></table></figure><p>一般我会用这个生成一个初始化项目，然后配置好 docker，最后用 docker 做后续的开发</p><h2 id="自己的快速搭建模板"><a href="#自己的快速搭建模板" class="headerlink" title="自己的快速搭建模板"></a>自己的快速搭建模板</h2><p><a href="https://github.com/ytppp/docker-rails-project-temp">docker-rails-project-temp</a></p><p>目前支持的功能：</p><ul><li>Docker</li><li>dotenv</li><li>PosgreSQL</li><li>Redis</li><li>turbo</li><li>Github Actions</li><li>Brakeman</li><li>All other Rails default stack</li></ul><p>参考资料:</p><ol><li><a href="https://geeknote.net/Rei/posts/372">Rails on Docker: 用 Docker Compose 搭建开发环境</a></li><li><a href="https://www.bilibili.com/video/BV1QA411m7E4">用 Docked Rails CLI 启动新手环境</a></li><li><a href="https://ruby-china.org/topics/37628">用 Docker 构建开发环境</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h2&gt;&lt;p&gt;先开启一个临时的 Ruby 容器，在容器内创建项目，之后再构建开发需要的镜像。&lt;/p&gt;
&lt;h3 id=&quot;新建项目&quot;&gt;&lt;a href=&quot;#新建</summary>
      
    
    
    
    <category term="ruby学习杂记" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/categories/ruby%E5%AD%A6%E4%B9%A0%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="ruby" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/tags/ruby/"/>
    
  </entry>
  
  <entry>
    <title>计划</title>
    <link href="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/f6891fe0b305/"/>
    <id>https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/f6891fe0b305/</id>
    <published>2022-05-09T03:22:19.000Z</published>
    <updated>2023-08-11T01:47:47.443Z</updated>
    
    <content type="html"><![CDATA[<p>我工作、学习、生活等的计划，每周周日记录一次，在下面评论区更新。</p><h2 id="记录原则"><a href="#记录原则" class="headerlink" title="记录原则"></a>记录原则</h2><ul><li>用英语</li><li>本周总结的各项目要详细，并用百分比标明进度，未达到 100% 的项说明原因</li><li>学习相关的计划要做好总结，总结内容要记录在本网站</li><li>下周计划要详细</li></ul>]]></content>
    
    
    <summary type="html">我工作、学习、生活等的计划，每周周日记录一次</summary>
    
    
    
    <category term="杂货摊" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/categories/%E6%9D%82%E8%B4%A7%E6%91%8A/"/>
    
    
    <category term="计划" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/tags/%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>俄罗斯总理的几何题</title>
    <link href="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/712bc1ec6dda/"/>
    <id>https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/712bc1ec6dda/</id>
    <published>2021-12-01T06:51:59.000Z</published>
    <updated>2023-08-11T01:47:47.443Z</updated>
    
    <content type="html"><![CDATA[<p>9 月 1 日是俄罗斯的知识节，因为这一天是各级学校的开学日，象征进入知识宝库的日子。</p><p>今年的知识节，俄罗斯总理米哈伊尔·米舒斯京（Mikhail Mishustin）来到莫斯科物理技术学院（MIPT）视察。该校是俄罗斯顶级的理工科大学，出过许多诺贝尔奖得主和著名科学家。</p><p><img src="https://cdn.jsdelivr.net/gh/ytppp/ytpblog-image-store/img/bg2021092201.jpg"></p><p>米舒斯京总理来到新生的教室，给学生们讲话。他看到黑板上写满了数学公式，一时兴起，就上前写了一道数学题，要求大家当场解答。</p><p><img src="https://cdn.jsdelivr.net/gh/ytppp/ytpblog-image-store/img/bg2021092202.jpg"></p><p>根据维基百科，米舒斯京生于 1966 年，大学专业是系统工程，主修计算机辅助设计。工作以后，还读过一个经济学博士。在担任总理之前，他是俄罗斯联邦税务局长。</p><p><img src="https://cdn.jsdelivr.net/gh/ytppp/ytpblog-image-store/img/bg2021092203.jpg"></p><p>他出的是一道几何题，题目如下。</p><p>给定圆上的一个点和一条直径，你能否找到一种方法，画出从该点到直径的垂直线（下图的绿线）。</p><p><img src="https://cdn.jsdelivr.net/gh/ytppp/ytpblog-image-store/img/bg2021092204.jpg"></p><p>这道题的难点在于，你不能使用任何测量工具，唯一可以用的就是一把不带有标记的直尺。</p><p>大家可以思考一下，这道题怎么解。</p><p>虽然它用不到高深的数学知识，初中的几何学课程就可以解答，但也不算容易。你必须知道两个基本的几何定理，才能想出答案。</p><p>第一个是泰勒斯定理，欧几里得《几何原本》提到过： <strong>圆上任意一点与直径组成的三角形，是直角三角形。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/ytppp/ytpblog-image-store/img/bg2021092205.jpg"></p><p>第二个定理是： <strong>锐角三角形的三条高交于一点</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/ytppp/ytpblog-image-store/img/bg2021092206.jpg"></p><p>如果你已经忘了这两个定理，可以再去看一下初中几何课本，这里就不给出证明了。</p><p>下面我根据一个数学家写给英国《卫报》的文章，介绍如何解答这道题。</p><p>如果你还想再思考一下，自己找到答案，那就暂时不要往下看了。我要讲答案了。</p><p><img src="https://cdn.jsdelivr.net/gh/ytppp/ytpblog-image-store/img/bg2021092207.jpg"></p><p>第一步，在相同的半圆上，任意再找一个点。将这两个点，与直径的相邻端点连起来，连线延长后可以形成一个三角形。</p><p>上图中，圆周上的两个点与直径组成的，都是直角三角形。它们可以看作直径的两个端点到绿边的两条高。</p><p><img src="https://cdn.jsdelivr.net/gh/ytppp/ytpblog-image-store/img/bg2021092208.jpg"></p><p>第二步，上一步的两条高产生了一个交点，将这个交点与三角形的外部顶点连起来，延长后与直径相交。</p><p>根据三角形的三条高交于一点，可以知道，上图的绿线是直径的一条垂直线。后面只需要找到它的平行线，穿过红点即可。</p><p><img src="https://cdn.jsdelivr.net/gh/ytppp/ytpblog-image-store/img/bg2021092209.jpg"></p><p>第三步，上一步的绿线与圆周有一个交点，将这个交点与红点连起来，延长后与直径相交（上图的第一个绿点）。</p><p>同时，将上一步的垂直线延长，与另一侧的圆周相交，产生一个交点（上图的第二个绿点）。</p><p><img src="https://cdn.jsdelivr.net/gh/ytppp/ytpblog-image-store/img/bg2021092210.jpg"></p><p>第四步，将上一步的两个绿点连起来，这条线会与圆周产生一个交点（上图的绿点）。</p><p>再将绿点与红点连起来（上图的黄线），这就是我们所要寻找的答案：红点到直径的垂直线。</p><p>这是因为上图的两条绿边与第二步的垂直线，形成了一个等腰三角形，原始的那条直径就是等腰三角形顶点到底边的高。这意味着，红点与绿点是对称的，它们的连线平行于底边，所以垂直于高（直径）。</p><p>至此，整道题解答完毕。</p><p><img src="https://cdn.jsdelivr.net/gh/ytppp/ytpblog-image-store/img/bg2021092211.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/ytppp/ytpblog-image-store/img/bg2021092212.jpg"></p><p>米舒斯京总理在黑板上画完解题过程后，对学生们说：</p><blockquote><p>“你们会在大学里面，学到数学、物理、化学知识，但是不要忘了那些基础知识。基础知识与专业知识结合起来，你就能解决任何问题，不仅是科学问题，也包括商业问题。”</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;9 月 1 日是俄罗斯的知识节，因为这一天是各级学校的开学日，象征进入知识宝库的日子。&lt;/p&gt;
&lt;p&gt;今年的知识节，俄罗斯总理米哈伊尔·米舒斯京（Mikhail Mishustin）来到莫斯科物理技术学院（MIPT）视察。该校是俄罗斯顶级的理工科大学，出过许多诺贝尔奖得主和</summary>
      
    
    
    
    <category term="心情杂货" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/categories/%E5%BF%83%E6%83%85%E6%9D%82%E8%B4%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>知识广度 vs 知识深度</title>
    <link href="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/b4f20858ce8d/"/>
    <id>https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/b4f20858ce8d/</id>
    <published>2021-09-10T01:53:14.000Z</published>
    <updated>2023-08-11T01:47:47.443Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.ruanyifeng.com/blog/2021/09/weekly-issue-174.html">上一期</a>谈到，”特长程序员”比”全能程序员”吃香。</p><p>网友发给我一个<a href="https://nested.substack.com/p/short-fat-engineers-are-undervalued">网址</a>，国外有人已经谈过这个话题。</p><p>国外作者画了一张图，将世界上的程序员比喻成三种形状。</p><p><img src="https://cdn.jsdelivr.net/gh/ytppp/ytpblog-image-store/img/bg2021021404.jpg"></p><ol><li>大饼型：拥有知识广度，但没有知识深度。</li><li>竹竿型：拥有知识深度，但没有知识广度。</li><li>T 型：介于前两者之间。</li></ol><p>那篇文章也认为，通常情况下，竹竿型程序员的出路最好，雇主愿意为知识深度买单。因为现代社会高度分工，越是大公司，岗位职责越明确，需要的是领域专家，而不是多面手。</p><p>但是作者提到，<strong>有一种情况例外，知识广度有明显优势，那就是确定项目路线的时候</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/ytppp/ytpblog-image-store/img/bg2021021405.jpg"></p><p>请看上图，右上角有一个黑点，那是公司的目标。当前位置在左下角的原点，两点之间没有现成的道路，需要自己寻找实现路径。</p><p>这时，知识广度就发挥作用了，了解的信息越广泛，知道的情况越多，就越可能具备洞察力，能够在多条路径里面，选出最合适的道路。知识面狭窄的人，由于不了解其它道路，不管遇到什么问题，可能都选择他会的那一条路，比如 Java。</p><p>这就是全能程序员的优势，判断正确的仰角 θ，使得两点之间距离最短；特长程序员的优势是前进速度 r，可以在既定道路上做到快速前进。所以，<strong>知识的广度能告诉你什么是正确的方向，知识的深度则可以让你在该方向上快速前进</strong>。</p><p>对于长期而艰巨的项目，走得快固然重要，但更重要的是走对方向。如果仰角 θ 不对，走得再快也没用，因为一开始就走错方向，后期必须停下来校正方向，甚至可能永远到达不了目标，白白浪费了生命。</p><p><img src="https://cdn.jsdelivr.net/gh/ytppp/ytpblog-image-store/img/bg2021090815.jpg" alt="乔布斯与马斯克"></p><p>因此，<strong>全能型的人才比较适合确定项目方向，担任团队领导</strong>。 乔布斯、马斯克就是这样的人，强在知识的广度，而不是知识的深度。他们既懂技术，又懂市场和管理，还了解人文（”我喜欢站在人文和技术的交叉点”），一旦掌握资源，就能带领团队，做出创新的产品。但是，如果让他们担任工程师，绝对是糟糕的工程师，会被开除。</p><p>不过话说回来，现实中，谁会因为你知道的事情多，就让你担任团队领导呢？反而是因为你克服了技术难题，才有机会来领导团队。乔布斯和马斯克都是自己创业才出头的，恐怕不是偶然。</p><p>总结一下，对于公司来说，如果有明确的技术方向，那么就需要聘请特长程序员，帮助加快开发速度。如果是刚刚诞生的创业公司，方向还在摸索之中，那么全能程序员也许更有价值。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.ruanyifeng.com/blog/2021/09/weekly-issue-174.html&quot;&gt;上一期&lt;/a&gt;谈到，”特长程序员”比”全能程序员”吃香。&lt;/p&gt;
&lt;p&gt;网友发给我一个&lt;a href=&quot;https://neste</summary>
      
    
    
    
    <category term="心情杂货" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/categories/%E5%BF%83%E6%83%85%E6%9D%82%E8%B4%A7/"/>
    
    
    <category term="心情" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>基于SVG实现写字动画</title>
    <link href="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/2723c73b0da3/"/>
    <id>https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/2723c73b0da3/</id>
    <published>2021-07-09T06:24:36.000Z</published>
    <updated>2023-08-11T01:47:47.443Z</updated>
    
    <content type="html"><![CDATA[<p><code>SVG</code>是一种基于<code>XML</code>的标记语言，常用来优雅、简洁地渲染一些可以自动实现<code>响应式变化</code>的图形，并和<code>CSS</code>，<code>DOM</code>，<code>JavaScript</code>等其他网络标准无缝衔接。所以在工作中，熟练地使用它能使开发过程更得心应手。</p><p>今天的示例就是通过 <code>JavaScript</code> + <code>SVG</code> 实现写字动画。</p><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p>最终的实现效果：</p><p><img src="https://cdn.jsdelivr.net/gh/ytppp/ytpblog-image-store/img/ezgif-1-30b0796c0e30.gif"></p><h2 id="画-SVG-图形"><a href="#画-SVG-图形" class="headerlink" title="画 SVG 图形"></a>画 SVG 图形</h2><p>怎样才能实现上面的效果呢？首先，需要准备一张图片:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 280 40&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">g</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;#000&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span></span></span><br><span class="line"><span class="tag">      <span class="attr">d</span>=<span class="string">&quot;M20.15 22.62c-3.74-3.67-7.94-9.77-5-15 2.5-3.16 5.88 1.35 5 4.2-.66 5.23-2 11.08-6 14.8-2.95 2.62-8.04.02-7-4 1.15-1.88 3.52-.9 5 0&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span></span></span><br><span class="line"><span class="tag">      <span class="attr">d</span>=<span class="string">&quot;M48.15 21.62c-1.27-5.3-9.5-2.8-9 2.1-.4 4.65 7.2 5.37 8 .9l6-18m-4 12c-.22 2.87-2.37 6.7 0 9 3.02.14 4.57-2.8 6-5&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span></span></span><br><span class="line"><span class="tag">      <span class="attr">d</span>=<span class="string">&quot;M58.15 18.62c-2.7 1.97-4.1 6.13-2 9 2.53.45 4.45-1.22 6-3m2-6c-.45 2.87-3.6 6.56-1 9 4.88.6 7.7-4.72 7-9m0 0c-.08 3.47 2.6 6.87 5.95 4.02l.05-.02&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span></span></span><br><span class="line"><span class="tag">      <span class="attr">d</span>=<span class="string">&quot;M77.15 25.62c2.8-.67 5.64-4.77 3-7-5.52-.5-5.4 9.6.1 9 2.97.08 4.48-2.84 5.9-5&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span></span></span><br><span class="line"><span class="tag">      <span class="attr">d</span>=<span class="string">&quot;M86.15 22.62c2.77-4.7 7-9.27 7-15-2.77-2.68-4.56 2.88-4.8 5.18-.74 4.62-1.9 9.75-.82 14.2 2.64 2.2 5.43-2.47 6.62-4.38&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span></span></span><br><span class="line"><span class="tag">      <span class="attr">d</span>=<span class="string">&quot;M94.15 22.62c2.77-4.7 7-9.27 7-15-2.77-2.68-4.56 2.88-4.8 5.18-.74 4.62-1.9 9.75-.82 14.2 2.64 2.2 5.43-2.47 6.62-4.38&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span></span></span><br><span class="line"><span class="tag">      <span class="attr">d</span>=<span class="string">&quot;M121.15 13.62c-.43 2.95 2.74-.6 0 0zm-3 9c2.5-5.4 1.76-3.03.27 1.18-1.95 3.9 2.96 4.9 4.73 1.82l2-3&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span></span></span><br><span class="line"><span class="tag">      <span class="attr">d</span>=<span class="string">&quot;M125.15 22.62c.55-2.93 6.15-5.93 4.73-.94-.45 2.02-1.04 4-1.73 5.94m1-3c1.27-2.85 3.74-7.46 7.38-5.6 2.44 2.3-2.94 7.36 1.16 8.6 2.77-.3 4.06-2.92 5.45-5&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span></span></span><br><span class="line"><span class="tag">      <span class="attr">d</span>=<span class="string">&quot;M159.15 22.62c2.02-2.78 3.9-7.3 2.07-1.3-1.98 6.12-4.05 12.2-6.07 18.3m6-18c.83-4.6 8.62-3.63 8 1.1.06 2.33-1.9 4.2-4 4.9m-4-1c4.33 2.78 10.2-.4 13-4&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span></span></span><br><span class="line"><span class="tag">      <span class="attr">d</span>=<span class="string">&quot;M180.15 18.62c-4.63-1.2-8.56 6.1-4.02 8.5 4.4 2.74 9.78-4.58 5.53-7.74-3.54-2.53-3.16 4.84-.05 4.97 2.22.82 5.06.2 6.55-1.73&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span></span></span><br><span class="line"><span class="tag">      <span class="attr">d</span>=<span class="string">&quot;M188.15 22.62c2.35-2.74 2.73-7.08 3.9-1.64 1.38 2 4.07 5.8.1 6.64m-4-1c3.62 2.38 8.93.9 10.5-3.27l.32-.45.18-.28&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span></span></span><br><span class="line"><span class="tag">      <span class="attr">d</span>=<span class="string">&quot;M199.15 22.62c2.35-2.74 2.73-7.08 3.9-1.64 1.38 2 4.07 5.8.1 6.64m-4-1c3.62 2.38 8.93.9 10.5-3.27l.32-.45.18-.28&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span></span></span><br><span class="line"><span class="tag">      <span class="attr">d</span>=<span class="string">&quot;M213.15 13.62c-.43 2.95 2.74-.6 0 0zm-3 9c2.5-5.4 1.76-3.03.27 1.18-1.95 3.9 2.96 4.9 4.73 1.82l2-3&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span></span></span><br><span class="line"><span class="tag">      <span class="attr">d</span>=<span class="string">&quot;M217.15 22.62c2.77-4.7 7-9.27 7-15-2.77-2.68-4.56 2.88-4.8 5.18-.74 4.62-1.9 9.75-.82 14.2 2.47 1.77 5.9-1.88 6.3-4.45.7-6-.1-1.8 2.32 1.07 1.5.23 2.74-.22 4-1&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span></span></span><br><span class="line"><span class="tag">      <span class="attr">d</span>=<span class="string">&quot;M234.15 13.62c-.43 2.95 2.74-.6 0 0zm-3 9c2.5-5.4 1.76-3.03.27 1.18-1.95 3.9 2.96 4.9 4.73 1.82l2-3&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span></span></span><br><span class="line"><span class="tag">      <span class="attr">d</span>=<span class="string">&quot;M238.15 22.62c2.77-4.7 7-9.27 7-15-2.77-2.68-4.56 2.88-4.8 5.18-.74 4.62-1.9 9.75-.82 14.2 2.64 2.2 5.43-2.47 6.62-4.38&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span></span></span><br><span class="line"><span class="tag">      <span class="attr">d</span>=<span class="string">&quot;M249.15 13.62c-.43 2.95 2.74-.6 0 0zm-3 9c2.5-5.4 1.76-3.03.27 1.18-1.95 3.9 2.96 4.9 4.73 1.82l2-3&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span></span></span><br><span class="line"><span class="tag">      <span class="attr">d</span>=<span class="string">&quot;M253.15 22.62c1.6-2.18 2.84-4.55 4-7m3-9c-1.9 6.38-4.7 12.62-6 19.1.3 3.68 5.68 1.46 6.6-1l1.4-2.1m-8-8h7&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span></span></span><br><span class="line"><span class="tag">      <span class="attr">d</span>=<span class="string">&quot;M262.15 22.62c2.5-5.4 1.76-3.03.27 1.18-1.98 3.77 3.02 5.1 5.1 2.44 1.56-1.28 2.53-2.97 3.63-4.62m1-3c-2.4 6.64-4.1 13.56-7 20-3.85 3.06-3.5-3.64-1.62-5.38 3.73-4.66 10-5.83 13.62-10.62&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">g</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p>没接触过 <code>SVG</code> 的话在这里可能会疑惑，不是准备一张图片吗，上面怎么是一段<code>XML</code>代码呢？这是因为 <code>SVG</code> 本身是一种基于 <code>XML</code> 的标记语言，是浏览器通过解析 <code>XML</code> 携带的信息后以图片的形式将信息展示出来的。</p><p>例如，我们要用 <code>SVG</code> 将一个长为 <code>300px</code>，宽为 <code>300px</code>，以<code>红色</code>填充的正方形展示出来，只需要下面这段<code>XML</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span></span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">&quot;width: 150px; height: 300px&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">baseProfile</span>=<span class="string">&quot;full&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;red&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行效果:</p><p><img src="https://cdn.jsdelivr.net/gh/ytppp/ytpblog-image-store/img/1625802942(1).jpg"></p><blockquote><p>这里为了后续方便展示<code>SVG</code>的<code>响应式变化</code>，特意给 svg 图形加了 <code>150px</code> 的宽度和 <code>300px</code> 的高度，所以看起来不完整。</p></blockquote><p>尝试运行上面的代码会发现，<code>SVG</code>不是矢量图形吗，那为什么上面的图片不能实现<code>响应式变化</code>呢？只需要对上面的<code>XML</code>加上<code>viewBox</code>属性即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span></span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">&quot;width: 150px; height: 300px&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">baseProfile</span>=<span class="string">&quot;full&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">viewBox</span>=<span class="string">&quot;0 0 400 400&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;red&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行效果:</p><p><img src="https://cdn.jsdelivr.net/gh/ytppp/ytpblog-image-store/img/1625803086(1).jpg"></p><p><code>viewBox</code>属性的值是一组用空白或逗号分割的包含 <em>4</em> 个参数的序列，它们从左到右分别表示（<code>svg</code>的坐标原点在左上角）：<code>最小X轴数值</code>、<code>最小y轴数值</code>、<code>宽度</code>、<code>高度</code>。其中，宽度和高度不允许为负值，当宽度或高度设置为 <code>0</code> 可以隐藏元素。</p><p>对于<code>viewBox</code>的理解，可以把它想象成长度单位不是任何一个 css 单位（例如：px）的视图，这里为了方便叙述，统一就叫它<code>单位</code>吧。例如，上面示例的<code>viewBox</code>为<code>0 0 400 400</code>，即表示视图的最小 X 轴数值为 <code>0 单位</code>、最小 y 轴数值为 <code>0 单位</code>、宽度为 <code>400</code> 单位、高度为 <code>400 单位</code>。</p><p><code>viewBox</code>前两个参数，是对 svg 图形的元素做整体位移时使用。例如我们将一个 svg 图形的<code>viewBox</code>属性定义为<code>200 200 400 400</code>，则表示将元素相对于视图分别<strong>向左</strong>和<strong>向上</strong>移动了<strong>200 单位</strong>。</p><p>运行效果:</p><p><img src="https://cdn.jsdelivr.net/gh/ytppp/ytpblog-image-store/img/1625803174(1).jpg"></p><p><code>viewBox</code>的后两个参数理解起来比较抽象，用上面示例来说明。上面图形的<code>viewBox</code>属性定义为<code>0 0 400 400</code>，里面正方形的长款定义为<code>300*300</code>。在脑海里我们想象一个 <code>400单位*400单位</code>的大正方形，里面再放了一个<code>300单位*300单位</code>的小正方形。注意：<strong>svg 有个特点，在默认情况下，会调整 viewBox 的大小，让 viewBox 正好能被放进 svg 里去</strong>。因为外面的 svg 被定义成一个 <code>150px*300px</code>的长方形，所以就把大正方形的真实宽度缩小到和 svg 的宽度一样，就正好能将大正方形整个放进 svg 里了，所以现在<code>viewBox</code>的实际大小是<code>150px*150px</code>。也就表示 <code>viewBox</code> 的一个<code>单位</code>代表的长度 &#x3D; 150px&#x2F;400 &#x3D; 0.375px。而 <code>viewBox</code> 内部的所有数值*0.375px 才是真正的长度。那个小正方形的实际大小就是<code>112.5px*112.5px</code>。</p><h2 id="让-SVG-图形动起来"><a href="#让-SVG-图形动起来" class="headerlink" title="让 SVG 图形动起来"></a>让 SVG 图形动起来</h2><p>要让 SVG 图片动起来，先要明白<code>stroke-dasharray</code> 和 <code>stroke-dashoffset</code> 这两个概念。</p><h3 id="stroke-dasharray"><a href="#stroke-dasharray" class="headerlink" title="stroke-dasharray"></a>stroke-dasharray</h3><p>在 <code>SVG</code> 中也可以通过指定属性 <code>stroke-dasharray</code> 让边框像 <code>CSS</code> 中的<code>border-style: dashed</code>那样变为虚线。<code>stroke-dasharray</code> 属性的参数，是一组用逗号分割的数字组成的序列。需要注意的是，这里的数字必须用逗号分割，虽然也可以插入空格，但是数字之间必须用逗号分开。</p><p>每一组数字，第一个用来表示实线，第二个用来表示空白。如果只有一个数字 <code>5</code>，则表示会先画 <code>5px</code> 实线，紧接着是 <code>5px</code> 空白，然后又是 <code>5px</code> 实线，从而形成虚线。比如我有一条 <code>200px</code> 的线，我把 <code>stroke-dasharray</code> 的指定为 <code>200</code>，它就表示先画 <code>200px</code> 实线，紧接着是 <code>200px</code> 空白，然后又是 <code>200px</code> 实线，从而形成虚线。</p><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span></span></span><br><span class="line"><span class="tag">  <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">baseProfile</span>=<span class="string">&quot;full&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">width</span>=<span class="string">&quot;200&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">height</span>=<span class="string">&quot;200&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">viewPort</span>=<span class="string">&quot;0 0 200 300&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">line</span></span></span><br><span class="line"><span class="tag">    <span class="attr">stroke</span>=<span class="string">&quot;black&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">stroke-width</span>=<span class="string">&quot;2&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">stroke-dasharray</span>=<span class="string">&quot;5, 5&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x1</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">y1</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x2</span>=<span class="string">&quot;190&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">y2</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">line</span></span></span><br><span class="line"><span class="tag">    <span class="attr">stroke</span>=<span class="string">&quot;black&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">stroke-width</span>=<span class="string">&quot;2&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">stroke-dasharray</span>=<span class="string">&quot;5, 10&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x1</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">y1</span>=<span class="string">&quot;30&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x2</span>=<span class="string">&quot;190&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">y2</span>=<span class="string">&quot;30&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">line</span></span></span><br><span class="line"><span class="tag">    <span class="attr">stroke</span>=<span class="string">&quot;black&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">stroke-width</span>=<span class="string">&quot;2&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">stroke-dasharray</span>=<span class="string">&quot;10, 5&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x1</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">y1</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x2</span>=<span class="string">&quot;190&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">y2</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">line</span></span></span><br><span class="line"><span class="tag">    <span class="attr">stroke</span>=<span class="string">&quot;black&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">stroke-width</span>=<span class="string">&quot;2&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">stroke-dasharray</span>=<span class="string">&quot;5, 1&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x1</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">y1</span>=<span class="string">&quot;70&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x2</span>=<span class="string">&quot;190&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">y2</span>=<span class="string">&quot;70&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">line</span></span></span><br><span class="line"><span class="tag">    <span class="attr">stroke</span>=<span class="string">&quot;black&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">stroke-width</span>=<span class="string">&quot;2&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">stroke-dasharray</span>=<span class="string">&quot;1, 5&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x1</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">y1</span>=<span class="string">&quot;90&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x2</span>=<span class="string">&quot;190&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">y2</span>=<span class="string">&quot;90&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">line</span></span></span><br><span class="line"><span class="tag">    <span class="attr">stroke</span>=<span class="string">&quot;black&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">stroke-width</span>=<span class="string">&quot;2&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">stroke-dasharray</span>=<span class="string">&quot;0.9&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x1</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">y1</span>=<span class="string">&quot;110&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x2</span>=<span class="string">&quot;190&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">y2</span>=<span class="string">&quot;110&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">line</span></span></span><br><span class="line"><span class="tag">    <span class="attr">stroke</span>=<span class="string">&quot;black&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">stroke-width</span>=<span class="string">&quot;2&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">stroke-dasharray</span>=<span class="string">&quot;15, 10, 5&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x1</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">y1</span>=<span class="string">&quot;130&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x2</span>=<span class="string">&quot;190&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">y2</span>=<span class="string">&quot;130&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">line</span></span></span><br><span class="line"><span class="tag">    <span class="attr">stroke</span>=<span class="string">&quot;black&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">stroke-width</span>=<span class="string">&quot;2&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">stroke-dasharray</span>=<span class="string">&quot;15, 10, 5, 10&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x1</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">y1</span>=<span class="string">&quot;150&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x2</span>=<span class="string">&quot;190&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">y2</span>=<span class="string">&quot;150&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">line</span></span></span><br><span class="line"><span class="tag">    <span class="attr">stroke</span>=<span class="string">&quot;black&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">stroke-width</span>=<span class="string">&quot;2&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">stroke-dasharray</span>=<span class="string">&quot;15, 10, 5, 10, 15&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x1</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">y1</span>=<span class="string">&quot;170&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x2</span>=<span class="string">&quot;190&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">y2</span>=<span class="string">&quot;170&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">line</span></span></span><br><span class="line"><span class="tag">    <span class="attr">stroke</span>=<span class="string">&quot;black&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">stroke-width</span>=<span class="string">&quot;2&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">stroke-dasharray</span>=<span class="string">&quot;5, 5, 1, 5&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x1</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">y1</span>=<span class="string">&quot;190&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x2</span>=<span class="string">&quot;190&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">y2</span>=<span class="string">&quot;190&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行效果:</p><p><img src="https://cdn.jsdelivr.net/gh/ytppp/ytpblog-image-store/img/1625803488(1).jpg"></p><h3 id="stroke-dashoffset"><a href="#stroke-dashoffset" class="headerlink" title="stroke-dashoffset"></a>stroke-dashoffset</h3><p><code>stroke-dashoffset</code> 属性表示路径从开始位置的偏移量。比如定义了 <code>stroke-dasharray</code> 的值为 <code>5, 10, 30, 10</code> 表示 5px 的虚线、10px 的空白、30px 的虚线、10px 的空白，如此循环。然后，通过改变它的 <code>stroke-dashoffset</code> 的值来看看会发生什么：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span></span></span><br><span class="line"><span class="tag">  <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">baseProfile</span>=<span class="string">&quot;full&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">width</span>=<span class="string">&quot;200&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">height</span>=<span class="string">&quot;200&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">viewPort</span>=<span class="string">&quot;0 0 200 300&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">line</span></span></span><br><span class="line"><span class="tag">    <span class="attr">stroke</span>=<span class="string">&quot;black&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">stroke-width</span>=<span class="string">&quot;2&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">stroke-dasharray</span>=<span class="string">&quot;5, 10, 30, 10&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x1</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">y1</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x2</span>=<span class="string">&quot;190&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">y2</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">line</span></span></span><br><span class="line"><span class="tag">    <span class="attr">stroke</span>=<span class="string">&quot;black&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">stroke-width</span>=<span class="string">&quot;2&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">stroke-dasharray</span>=<span class="string">&quot;5, 10, 30, 10&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">stroke-dashoffset</span>=<span class="string">&quot;15&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x1</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">y1</span>=<span class="string">&quot;20&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x2</span>=<span class="string">&quot;190&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">y2</span>=<span class="string">&quot;20&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行效果:</p><p><img src="https://cdn.jsdelivr.net/gh/ytppp/ytpblog-image-store/img/20210709120649.png"></p><p>观察上面代码的运行效果可以看到，通过<code>stroke-dashoffset</code>属性，可以重新设置路径开始的位置。在上面的实例中，设置 <code>stroke-dashoffset</code> 的值为 <code>15</code>，可以看到路径向左移动了 <code>15px</code> 的距离。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span></span></span><br><span class="line"><span class="tag">  <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">baseProfile</span>=<span class="string">&quot;full&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">width</span>=<span class="string">&quot;200&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">height</span>=<span class="string">&quot;200&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">viewPort</span>=<span class="string">&quot;0 0 200 300&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">g</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;#000&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span></span></span><br><span class="line"><span class="tag">      <span class="attr">d</span>=<span class="string">&quot;M20.15 22.62c-3.74-3.67-7.94-9.77-5-15 2.5-3.16 5.88 1.35 5 4.2-.66 5.23-2 11.08-6 14.8-2.95 2.62-8.04.02-7-4 1.15-1.88 3.52-.9 5 0&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">g</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p>把路径的 <code>stroke-dasharray</code> 和 <code>stroke-dashoffset</code> 都设置为同样的值，会发现什么也看不到了，因为路径的虚线和空白距离都是一样的。</p><h3 id="用-js-实现具体功能"><a href="#用-js-实现具体功能" class="headerlink" title="用 js 实现具体功能"></a>用 js 实现具体功能</h3><p>要实现上面的写字动画，首先要获取 <code>path</code> 的长度用来设置 <code>stroke-dasharray</code> 和 <code>stroke-dashoffset</code> 的值。然后使用 <code>Web Animations API</code> 中的 <code>animate</code> 方法来把 <code>stroke-dashoffset</code> 的值从等长设置为 0，就会产生书写出来的动画效果。</p><p>下面来实现具体的功能。先获取所有的 <code>path</code>，并且使用 <code>getTotalLength()</code>方法来获取 path 的长度，然后将每一个 <code>path</code> 的 <code>strokeDashoffset</code> 和 <code>strokeDasharray</code> 的值都设置为同样的值，从而隐藏所有 <code>path</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> paths = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> strokes = [];</span><br><span class="line"><span class="keyword">let</span> j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; paths.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  strokes[i] = paths[i].<span class="title function_">getTotalLength</span>();</span><br><span class="line">  paths[i].<span class="property">style</span>.<span class="property">strokeDasharray</span> = paths[i].<span class="title function_">getTotalLength</span>();</span><br><span class="line">  paths[i].<span class="property">style</span>.<span class="property">strokeDashoffset</span> = paths[i].<span class="title function_">getTotalLength</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后使用 <code>animate</code> 方法来动态更新每一个 <code>path</code> 的 <code>strokeDashoffset</code> 的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">strokeLetter</span>(<span class="params">letter, pathLen</span>) &#123;</span><br><span class="line">  letter.<span class="title function_">animate</span>([&#123; <span class="attr">strokeDashoffset</span>: pathLen &#125;, &#123; <span class="attr">strokeDashoffset</span>: <span class="number">0</span> &#125;], &#123;</span><br><span class="line">    <span class="attr">duration</span>: pathLen * <span class="number">7</span>,</span><br><span class="line">    <span class="attr">fill</span>: <span class="string">&#x27;forwards&#x27;</span>,</span><br><span class="line">  &#125;).<span class="property">onfinish</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    j++;</span><br><span class="line">    <span class="title function_">strokeLetter</span>(paths[j], paths[j].<span class="title function_">getTotalLength</span>());</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Web Animations 提供的 animate 方法和 CSS3 中的 animation 方法的属性差不多，相比较起来 Web Animations 更加的灵活方便，比如提供了回调的方法等等。</p></blockquote><p>最后调用这个方法，让每一个 path 从左到右依次出来，整个书写的动画就完成了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">strokeLetter</span>(paths[<span class="number">0</span>], strokes[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><p>最后，给大家分享一个用 svg 做动画更有趣的例子：<a href="https://juejin.cn/post/6865591917279870990">不依赖任何库打造属于自己的可视化数据地图</a>，文章作者用<code>svg</code>实现了一个真实地图的加载动画，有兴趣可以去观摩学习。</p><p>参考文章:</p><ol><li><a href="https://developer.mozilla.org/en-US/docs/Web/SVG">SVG 文档</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/viewBox">viewBox</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API">Web Animations API</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Animation">Web Animations 的 animate 方法</a></li><li><a href="https://blog.csdn.net/chao2458/article/details/84983203">svg 动画以描边以及文字书写 使用</a></li><li><a href="https://segmentfault.com/a/1190000009226427?utm_source=tag-newest">SVG 之 ViewBox</a></li></ol><blockquote><p>最后，这个系列项目的 github 地址：<a href="https://github.com/ytppp/native-web-projects">native-web-projects</a>，欢迎大家 star。我的个人网站：<a href="https://www.yangtp.com/">yangtp.com</a>，欢迎大家空闲时候来串串门呀。</p></blockquote>]]></content>
    
    
    <summary type="html">这是系列文章《原生 JS 实现前端常见功能》的第 2 篇，讲述一些 svg 的基础知识和如何通过 svg 实现一个写字动画。</summary>
    
    
    
    <category term="前端综合" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/categories/%E5%89%8D%E7%AB%AF%E7%BB%BC%E5%90%88/"/>
    
    
    <category term="SVG" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/tags/SVG/"/>
    
  </entry>
  
  <entry>
    <title>Git分支管理规范化</title>
    <link href="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/df066af7196d/"/>
    <id>https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/df066af7196d/</id>
    <published>2021-06-25T04:07:27.000Z</published>
    <updated>2023-08-11T01:47:47.439Z</updated>
    
    <content type="html"><![CDATA[<p>以下内容基于 <code>Git Flow</code> 分支管理策略。</p><blockquote><p><code>Git Flow</code> 最开始是由 <code>Vincent Driessen</code> 发行并广受欢迎，这个模型是在 2010 年构思出来的，而现在距今已有 10 多年了，而 Git 本身才诞生不久。在过去的十年中，<code>Git Flow</code> 在许多软件团队中非常流行</p></blockquote><h2 id="分支命名规范"><a href="#分支命名规范" class="headerlink" title="分支命名规范"></a>分支命名规范</h2><ul><li>master 分支：master 分支只有一个，名称即为 master。(GitHub 现在叫 main)</li><li>develop 分支：develop 分支只有一个，名称即为 develop</li><li>feature 分支：feature&#x2F;&lt;功能名&gt;，例如：feature&#x2F;login，以便其他人可以看到你的工作</li><li>hotfix 分支：hotfix&#x2F;日期，例如：hotfix&#x2F;0104</li></ul><h2 id="分支说明"><a href="#分支说明" class="headerlink" title="分支说明"></a>分支说明</h2><ul><li><p>master || main 分支：存储正式发布的产品，<code>master || main</code> 分支上的产品要求随时处于可部署状态。<code>master || main</code> 分支只能通过与其他分支合并来更新内容，禁止直接在 <code>master || main</code> 分支进行修改。</p></li><li><p>develop 分支：汇总开发者完成的工作成果，<code>develop</code> 分支上的产品可以是缺失功能模块的半成品，但是已有的功能模块不能是半成品。<code>develop</code> 分支只能通过与其他分支合并来更新内容，禁止直接在 <code>develop</code> 分支进行修改。</p></li><li><p>feature 分支：当要开发新功能时，从 <code>master</code> 分支创建一个新的 <code>feature</code> 分支，并在 <code>feature</code> 分支上进行开发。开发完成后，需要将该 <code>feature</code> 分支合并到 <code>develop</code> 分支，最后删除该 <code>feature</code> 分支。</p></li><li><p>release 分支：当 <code>develop</code> 分支上的项目准备发布时，从 <code>develop</code> 分支上创建一个新的 <code>release</code> 分支，新建的 <code>release</code> 分支只能进行质量测试、bug 修复、文档生成等面向发布的任务，不能再添加功能。这一系列发布任务完成后，需要将 <code>release</code> 分支合并到 <code>master</code> 分支上，并根据版本号为 <code>master</code> 分支添加 <code>tag</code>，然后将 <code>release</code> 分支创建以来的修改合并回 <code>develop</code> 分支，最后删除 <code>release</code> 分支。</p></li><li><p>hotfix 分支：当 <code>master</code> 分支中的产品出现需要立即修复的 <code>bug</code> 时，从 <code>master</code> 分支上创建一个新的 <code>hotfix</code> 分支，并在 <code>hotfix</code> 分支上进行 BUG 修复。修复完成后，需要将 <code>hotfix</code> 分支合并到 <code>master</code> 分支和 <code>develop</code> 分支，并为 <code>master</code> 分支添加新的版本号 <code>tag</code>，最后删除 <code>hotfix</code> 分支。</p></li></ul><h2 id="提交信息规范"><a href="#提交信息规范" class="headerlink" title="提交信息规范"></a>提交信息规范</h2><p>提交信息应该描述“做了什么”和“这么做的原因”，必要时还可以加上“造成的影响”，主要由 3 个部分组成：<code>Header</code>、<code>Body</code> 和 <code>Footer</code>。</p><h3 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h3><p>Header 部分只有 1 行，格式为<type>: <subject>。</p><p>type 用于说明提交的类型，共有下面几个候选值：</p><ul><li>feat：新功能（feature）</li><li>fix：问题修复</li><li>docs：文档</li><li>style：调整格式（不影响代码运行）</li><li>refactor：重构</li><li>test：增加测试</li><li>chore：构建过程或辅助工具的变动</li><li>revert：撤销以前的提交</li><li>scope: 用于说明提交的影响范围，内容根据具体项目而定</li><li>perf: 性能优化</li></ul><p>subject 用于概括提交内容。</p><h3 id="Body"><a href="#Body" class="headerlink" title="Body"></a>Body</h3><p>一般不写</p><h3 id="Footer"><a href="#Footer" class="headerlink" title="Footer"></a>Footer</h3><p>一般不写</p><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><p align="center">  <img src="https://cdn.jsdelivr.net/gh/ytppp/ytpblog-image-store/img/95db2bd611d144e596026143d02fba44_tplv-k3u1fbpfcp-watermark.png" /></p><p>这样做起来的好处，一个项目下：</p><ul><li>对于分支，每个人在做什么，我看分支就清楚。</li><li>对于修改内容，看前缀就知道这个文件改动了什么。</li><li>对于版本迭代，看 Tag 都上线了什么内容。</li></ul><blockquote><p>todo: 前端项目管理实例</p></blockquote>]]></content>
    
    
    <summary type="html">规范化 Git 分支管理</summary>
    
    
    
    <category term="git学习笔记" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/categories/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>原生JS实现表单验证</title>
    <link href="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/b3dfbc1786fb/"/>
    <id>https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/b3dfbc1786fb/</id>
    <published>2021-06-15T08:07:40.000Z</published>
    <updated>2023-08-11T01:47:47.443Z</updated>
    
    <content type="html"><![CDATA[<p>表单验证是 web 开发中的常见功能之一。为了更快地摸鱼，大佬们往往会用<code>vue</code>等框架提供的<strong>双向数据绑定</strong>功能结合<code>async-validator</code>等验证库来实现。但作为菜鸟的我，现状是：框架越用越熟练，对原生 JS 实现表单验证的方式却越来越模糊。所以今天索性通过<strong>表单注册</strong>这个小 demo 的开发，回味一下原汁原味的表单验证开发。</p><h3 id="功能描述"><a href="#功能描述" class="headerlink" title="功能描述"></a>功能描述</h3><p>当点击登录按钮时，验证：</p><ol><li>用户名、邮箱、密码、确认密码是否必填</li><li>用户名、邮箱长度是否在限制内</li><li>邮箱格式是否正确</li><li>两次输入的密码是否一致</li></ol><h3 id="html-和-css"><a href="#html-和-css" class="headerlink" title="html 和 css"></a>html 和 css</h3><ol><li>html：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;form&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">small</span>&gt;</span>错误信息<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;email&quot;</span>&gt;</span>邮箱<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入邮箱&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">small</span>&gt;</span>错误信息<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">small</span>&gt;</span>错误信息<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password2&quot;</span>&gt;</span>确认密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password2&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请再次输入密码&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">small</span>&gt;</span>错误信息<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>css：</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attr">--success-color</span>: <span class="number">#2ecc71</span>;</span><br><span class="line">  <span class="attr">--error-color</span>: <span class="number">#e74c3c</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f9fafb</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.3</span>);</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.form</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">30px</span> <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.form-control</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.form-control</span> <span class="selector-tag">label</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#777</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.form-control</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#f0f0f0</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.form-control</span> <span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">  <span class="attribute">outline</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#777</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.form-control</span><span class="selector-class">.success</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="built_in">var</span>(--success-color);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.form-control</span><span class="selector-class">.error</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="built_in">var</span>(--error-color);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.form-control</span> small &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--error-color);</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.form-control</span><span class="selector-class">.error</span> small &#123;</span><br><span class="line">  <span class="attribute">visibility</span>: visible;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.form</span> <span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#3498db</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#3498db</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>html 和 css 都很简单，就不赘述了。重点说下如何用 JS 实现表单验证。</p><h3 id="用-JS-实现表单验证与提交"><a href="#用-JS-实现表单验证与提交" class="headerlink" title="用 JS 实现表单验证与提交"></a>用 JS 实现表单验证与提交</h3><h4 id="获取-dom-节点。"><a href="#获取-dom-节点。" class="headerlink" title="获取 dom 节点。"></a>获取 dom 节点。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> form = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;form&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> username = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;username&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> email = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;email&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> password = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;password&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> password2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;password2&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="封装验证提示的公共方法"><a href="#封装验证提示的公共方法" class="headerlink" title="封装验证提示的公共方法"></a>封装验证提示的公共方法</h4><p>因为验证提示对于每一个要验证的表单项都会用到，所以这里封装成公用方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Show input error message</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showError</span>(<span class="params">input, message</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> formControl = input.<span class="property">parentElement</span>;</span><br><span class="line">  formControl.<span class="property">className</span> = <span class="string">&#x27;form-control error&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> small = formControl.<span class="title function_">querySelector</span>(<span class="string">&#x27;small&#x27;</span>);</span><br><span class="line">  small.<span class="property">innerText</span> = message;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Show success outline</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showSuccess</span>(<span class="params">input</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> formControl = input.<span class="property">parentElement</span>;</span><br><span class="line">  formControl.<span class="property">className</span> = <span class="string">&#x27;form-control success&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的实现方法是：</p><p>先获取当前表单项的父级节点，在其样式上加入验证是否通过的类样式（这里，通过加上<code>success</code>,不通过加上<code>error</code>），然后再找到与当前表单项同级的<code>&lt;small&gt;</code>标签，用来显示验证是否通过的提示信息。</p><h4 id="获取表单项的名字"><a href="#获取表单项的名字" class="headerlink" title="获取表单项的名字"></a>获取表单项的名字</h4><p>主要在验证是否通过的提示文本使用，也是一个公用方法，所以先封装一下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Get fieldname</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getFieldName</span>(<span class="params">input</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> formControl = input.<span class="property">parentElement</span>;</span><br><span class="line">  <span class="keyword">const</span> label = formControl.<span class="title function_">querySelector</span>(<span class="string">&#x27;label&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> label.<span class="property">innerText</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="其他验证"><a href="#其他验证" class="headerlink" title="其他验证"></a>其他验证</h4><p>接下来依次实现：邮箱格式验证、必填验证、长度验证、密码是否一致的验证。</p><ol><li>邮箱格式验证</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Check email is valid</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkEmail</span>(<span class="params">input</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> re = <span class="regexp">/^(([^&lt;&gt;()\[\]\\.,;:\s@&quot;]+(\.[^&lt;&gt;()\[\]\\.,;:\s@&quot;]+)*)|(&quot;.+&quot;))@((\[[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]&#123;2,&#125;))$/</span>;</span><br><span class="line">  <span class="keyword">if</span> (re.<span class="title function_">test</span>(input.<span class="property">value</span>.<span class="title function_">trim</span>())) &#123;</span><br><span class="line">    <span class="title function_">showSuccess</span>(input);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">showError</span>(input, <span class="string">&#x27;邮箱不合法&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>必填验证</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Check required fields</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkRequired</span>(<span class="params">inputArr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> isRequired = <span class="literal">false</span>;</span><br><span class="line">  inputArr.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">input</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (input.<span class="property">value</span>.<span class="title function_">trim</span>() === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">      <span class="title function_">showError</span>(input, <span class="string">`<span class="subst">$&#123;getFieldName(input)&#125;</span>必填`</span>);</span><br><span class="line">      isRequired = <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">showSuccess</span>(input);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> isRequired;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>长度验证</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Check input length</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkLength</span>(<span class="params">input, min, max</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (input.<span class="property">value</span>.<span class="property">length</span> &lt; min) &#123;</span><br><span class="line">    <span class="title function_">showError</span>(input, <span class="string">`<span class="subst">$&#123;getFieldName(input)&#125;</span>至少 <span class="subst">$&#123;min&#125;</span> 个字符`</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (input.<span class="property">value</span>.<span class="property">length</span> &gt; max) &#123;</span><br><span class="line">    <span class="title function_">showError</span>(input, <span class="string">`<span class="subst">$&#123;getFieldName(input)&#125;</span>至多 <span class="subst">$&#123;max&#125;</span> 个字符`</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">showSuccess</span>(input);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>密码是否一致的验证</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Check passwords match</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkPasswordsMatch</span>(<span class="params">input1, input2</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (input1.<span class="property">value</span> !== input2.<span class="property">value</span>) &#123;</span><br><span class="line">    <span class="title function_">showError</span>(input2, <span class="string">&#x27;密码不匹配&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">form.<span class="title function_">addEventListener</span>(<span class="string">&#x27;submit&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  e.<span class="title function_">preventDefault</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">checkRequired</span>([username, email, password, password2])) &#123;</span><br><span class="line">    <span class="title function_">checkLength</span>(username, <span class="number">3</span>, <span class="number">15</span>);</span><br><span class="line">    <span class="title function_">checkLength</span>(password, <span class="number">6</span>, <span class="number">25</span>);</span><br><span class="line">    <span class="title function_">checkEmail</span>(email);</span><br><span class="line">    <span class="title function_">checkPasswordsMatch</span>(password, password2);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="JS-部分整体代码"><a href="#JS-部分整体代码" class="headerlink" title="JS 部分整体代码"></a>JS 部分整体代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> form = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;form&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> username = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;username&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> email = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;email&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> password = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;password&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> password2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;password2&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Show input error message</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showError</span>(<span class="params">input, message</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> formControl = input.<span class="property">parentElement</span>;</span><br><span class="line">  formControl.<span class="property">className</span> = <span class="string">&#x27;form-control error&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> small = formControl.<span class="title function_">querySelector</span>(<span class="string">&#x27;small&#x27;</span>);</span><br><span class="line">  small.<span class="property">innerText</span> = message;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Show success outline</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showSuccess</span>(<span class="params">input</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> formControl = input.<span class="property">parentElement</span>;</span><br><span class="line">  formControl.<span class="property">className</span> = <span class="string">&#x27;form-control success&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check email is valid</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkEmail</span>(<span class="params">input</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> re = <span class="regexp">/^(([^&lt;&gt;()\[\]\\.,;:\s@&quot;]+(\.[^&lt;&gt;()\[\]\\.,;:\s@&quot;]+)*)|(&quot;.+&quot;))@((\[[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]&#123;2,&#125;))$/</span>;</span><br><span class="line">  <span class="keyword">if</span> (re.<span class="title function_">test</span>(input.<span class="property">value</span>.<span class="title function_">trim</span>())) &#123;</span><br><span class="line">    <span class="title function_">showSuccess</span>(input);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">showError</span>(input, <span class="string">&#x27;邮箱不合法&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check required fields</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkRequired</span>(<span class="params">inputArr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> isRequired = <span class="literal">false</span>;</span><br><span class="line">  inputArr.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">input</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (input.<span class="property">value</span>.<span class="title function_">trim</span>() === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">      <span class="title function_">showError</span>(input, <span class="string">`<span class="subst">$&#123;getFieldName(input)&#125;</span>必填`</span>);</span><br><span class="line">      isRequired = <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">showSuccess</span>(input);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> isRequired;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check input length</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkLength</span>(<span class="params">input, min, max</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (input.<span class="property">value</span>.<span class="property">length</span> &lt; min) &#123;</span><br><span class="line">    <span class="title function_">showError</span>(input, <span class="string">`<span class="subst">$&#123;getFieldName(input)&#125;</span>至少 <span class="subst">$&#123;min&#125;</span> 个字符`</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (input.<span class="property">value</span>.<span class="property">length</span> &gt; max) &#123;</span><br><span class="line">    <span class="title function_">showError</span>(input, <span class="string">`<span class="subst">$&#123;getFieldName(input)&#125;</span>至多 <span class="subst">$&#123;max&#125;</span> 个字符`</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">showSuccess</span>(input);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check passwords match</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkPasswordsMatch</span>(<span class="params">input1, input2</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (input1.<span class="property">value</span> !== input2.<span class="property">value</span>) &#123;</span><br><span class="line">    <span class="title function_">showError</span>(input2, <span class="string">&#x27;密码不匹配&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get fieldname</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getFieldName</span>(<span class="params">input</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> formControl = input.<span class="property">parentElement</span>;</span><br><span class="line">  <span class="keyword">const</span> label = formControl.<span class="title function_">querySelector</span>(<span class="string">&#x27;label&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> label.<span class="property">innerText</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Event listeners</span></span><br><span class="line">form.<span class="title function_">addEventListener</span>(<span class="string">&#x27;submit&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  e.<span class="title function_">preventDefault</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">checkRequired</span>([username, email, password, password2])) &#123;</span><br><span class="line">    <span class="title function_">checkLength</span>(username, <span class="number">3</span>, <span class="number">15</span>);</span><br><span class="line">    <span class="title function_">checkLength</span>(password, <span class="number">6</span>, <span class="number">25</span>);</span><br><span class="line">    <span class="title function_">checkEmail</span>(email);</span><br><span class="line">    <span class="title function_">checkPasswordsMatch</span>(password, password2);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>以上就是原生 JS 实现表单验证的全部功能，感兴趣的大佬可以在这个小小 demo 上再进行扩展，相信一定会有更多的收获哦。</p><blockquote><p>最后，这个系列项目的 github 地址：<a href="https://github.com/ytppp/native-web-projects">native-web-projects</a>，欢迎大家 star。我的个人网站：<a href="https://www.yangtp.com/">yangtp.com</a>，欢迎大家空闲时候来串串门呀。</p></blockquote>]]></content>
    
    
    <summary type="html">这是系列文章《原生 JS 实现前端常见功能》的第 1 篇，讲述如何通过原生 JS 实现表单验证。</summary>
    
    
    
    <category term="前端综合" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/categories/%E5%89%8D%E7%AB%AF%E7%BB%BC%E5%90%88/"/>
    
    
    <category term="JavaScript" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>生活就像《吃豆人》游戏</title>
    <link href="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/aee6aeaf1cee/"/>
    <id>https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/aee6aeaf1cee/</id>
    <published>2021-06-11T02:15:46.000Z</published>
    <updated>2023-08-11T01:47:47.443Z</updated>
    
    <content type="html"><![CDATA[<p>有一个经典游戏，叫做《吃豆人》（Pac-Man）。1980 年发布的，很多人现在还在玩。</p><p align="center">  <img src="https://cdn.jsdelivr.net/gh/ytppp/ytpblog-image-store/img/bg2021060615.jpg"></p><p>游戏很简单，吃完迷宫里的豆子，就能过关，但是不能被妖怪抓住。四个妖怪的策略各有不同，红色的在后面追你，粉色的在前面拦截，蓝色的在路口埋伏，橘色的随机漂移。迷宫里还有四颗能量豆，每吃掉一颗，你就能反戈一击，消灭一个妖怪。</p><p>谷歌发布过一个<a href="https://www.google.com/search?q=pac-man">网页在线版</a>，没玩过的朋友可以感受一下。</p><p align="center">  <img src="https://cdn.jsdelivr.net/gh/ytppp/ytpblog-image-store/img/bg2021060901.jpg"></p><p>提到这个游戏，是因为我最近看到了<a href="https://mahmoud-mohamed-bahaa.medium.com/i-spent-18-months-making-a-decision-heres-what-i-learned-the-pac-man-approach-c943e687413a">一篇文章</a>。 <strong>一个国外的年轻程序员说，他觉得，自己的生活就像一场《吃豆人》游戏。</strong></p><p>大学毕业后，我不知道该干什么。读研究生，还是找一份体面的工作？像其他人一样，最终我选择了那些很光鲜的职业，即使它跟我的兴趣并不吻合。对于未来，我毫无头绪。</p><p>我有时觉得，自己的生活与《吃豆人》游戏有许多相似之处。我困在迷宫里，只有快速拿到积分，才能过关。在这个迷宫中，妖怪四处游荡，试图吃掉你，如果被它们抓住，你就会死掉一条命，游戏重新开始。</p><p>我的生活好像就是一局游戏。我真的不知道该去哪里，如何晋级，什么时候妖怪会突然出现。</p><p>他这么一说，我顿时觉得，《吃豆人》真的很像生活的一个缩影。我们每天都在人生迷宫里探索，寻求出路。各种挫折打击在周围埋伏着，不知道何时，就会向你扑来。想要赢得游戏的唯一方法，就是尽量避开妖怪，快速吃掉能量豆，壮大自己，晋升到下一关。</p><p align="center">  <img src="https://cdn.jsdelivr.net/gh/ytppp/ytpblog-image-store/img/bg2021060617.jpg"></p><p>以程序员为例，毕业后进入互联网公司，就是游戏开始了。你必须不停闯关，一步步晋升，从初级程序员到中级程序员，再到高级程序员，然后是团队 Leader 或者部门主管。如果有一关卡住了，在某个级别上停留过久，你就很危险，遇到妖怪的概率越来越大，随时可能 Game Over。你最多只有十到十五年的时间，到达中高职级，否则就留不下来，时间一到不得不离开公司。</p><p><strong>不仅是程序员，其它竞争性的行业，都是这种游戏规则。</strong> 大家印象中，大学教授是一个很舒服的职业，不坐班，每年还有寒暑假。但是，国内高校现在引入了美国的制度，而且还是加强版：年轻博士从讲师当起，给你六年时间，竞争寥寥无几的正式编制。如果六年内出不了成果、发不了足够的论文，那就必须离开，因为学校不会养一个讲师养到老。这叫做<a href="https://www.163.com/dy/article/FVDFHGVA05488SSE.html">“非升即走”制度</a>，英语叫做 <code>Tenure track</code>。这不就像《吃豆人》游戏的真人版吗。</p><p>进一步说，每天上下班高峰时间，地铁上挤满了人，大家都在参与一线城市这个大型游戏。若干年内，如果得不到结果，就要离开，回到二线或三线城市。</p><p align="center">  <img src="https://cdn.jsdelivr.net/gh/ytppp/ytpblog-image-store/img/bg2021060903.jpg"></p><p>其实也不是一定要参与这种游戏，你也可以降低物质欲，选择不与其他人竞争的生活。但是，如果已经身在其中，或者不得不参与，那么下面几条《吃豆人》游戏的快速过关策略，似乎可以参考。</p><ol><li>不能留在原地，妖怪会感知你的位置。</li><li>必须时刻在前进。</li><li>一旦前面的路上出现妖怪，必须立刻改道。</li><li>尽快吃掉离你最近的能量豆，取得阶段性成果。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;有一个经典游戏，叫做《吃豆人》（Pac-Man）。1980 年发布的，很多人现在还在玩。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;https://cdn.jsdelivr.net/gh/ytppp/ytpblog-image-store/img</summary>
      
    
    
    
    <category term="心情杂货" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/categories/%E5%BF%83%E6%83%85%E6%9D%82%E8%B4%A7/"/>
    
    
    <category term="心情" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>当音乐还是稀缺的时候</title>
    <link href="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/6a1a001abdbd/"/>
    <id>https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/6a1a001abdbd/</id>
    <published>2021-03-19T03:50:55.000Z</published>
    <updated>2023-08-11T01:47:47.443Z</updated>
    
    <content type="html"><![CDATA[<p>上周，磁带的发明者、飞利浦公司的荷兰工程师 Lou Ottens 去世了。</p><p align="center">  <img src="https://cdn.jsdelivr.net/gh/ytppp/ytpblog-image-store/img/bg2021031605.jpg"></p><p>这让我想起了往事。这里的年轻读者，可能从没有听过磁带，但是20多年前，它是我们接触流行音乐的唯一渠道。</p><p>那时，电台的音乐频道会播歌，要想反复听，就必须录音，或者购买歌手的专辑。我记得，最早一盒是7元，后来涨到了10元。对于学生是很贵的东西，买一盒要下很久的决心，买来以后会反复听几百遍。</p><p align="center">  <img src="https://cdn.jsdelivr.net/gh/ytppp/ytpblog-image-store/img/bg2021031606.jpg"></p><p>现在完全不一样了，一个新专辑在网上发布，很少有人连着听几百遍吧，不知名歌手的专辑可能根本没人听。因为音乐实在太多了，随便一个流媒体网站，都是上百万的曲库，大家已经不会在一张专辑上花太多的时间了。</p><p>音乐家应该会怀念磁带的年代。那时，生活中缺乏音乐，人们才会那么投入地去听，歌手也会投入地创作。那时的歌曲真的会影响人生，甚至影响社会。</p><p align="center">  <img src="https://cdn.jsdelivr.net/gh/ytppp/ytpblog-image-store/img/bg2021031607.jpg"></p><p>美国歌手鲍勃·迪伦因为他的歌词，得到诺贝尔文学奖。<code>一个人要经历多少旅途，才能长大 \ 一只鸽子要飞过多少海洋，才能看到沙滩 \ 一门大炮要发射多少次，才有和平 \ 我的朋友啊，答案就在风中飘荡</code>成了一个时代的标志。要是他生在现在，到处是快餐文化，这种歌即使写出来，也不会有太大反响，最多就是在社交媒体上转发一阵子。</p><p>音乐的黄金年代，其实是它稀缺的年代。 现在的音乐就像流水线上的产品，丰富到大家都不在乎了。歌手出一张专辑，跟发一条朋友圈差不多。</p><p>如果看得远一点，真正出大师的年代，是音乐更稀缺的时候。巴赫、贝多芬和莫扎特的年代，根本没有录音技术，想听音乐必须去现场。但是，偏偏那个年代出现了最伟大的音乐家，后世的技术提升了，却没人赶得上他们，这是为什么？</p><p>我猜想，原因可能跟稀缺有关系。稀缺意味着竞争少，所有问题都没有解决，你可以探索各种可能性和解决方案，容易出大师，影响后世。顺便说一下，也许有人会问，为什么更早以前没有出现著名音乐家？因为欧洲人在17世纪才掌握了成熟的炼钢技术，可以制作钢丝琴弦，能够确定准确的音高了。</p><p>稀缺年代不仅诞生大师，也会诞生大公司。 现在的科技大厂，都是新技术的早期诞生的。PC 的稀缺诞生了微软和苹果，互联网的稀缺诞生了 BAT，手机 App 的稀缺诞生了美团和字节跳动。等到不稀缺的时候，再想变成巨头就难了。</p><p>这告诉我们，如果你真想做一番大事，就应该投入那些刚刚开始发展、供给还很稀缺的领域。否则，想要成功就好像在互联网年代当一个歌手。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;上周，磁带的发明者、飞利浦公司的荷兰工程师 Lou Ottens 去世了。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;https://cdn.jsdelivr.net/gh/ytppp/ytpblog-image-store/img/bg2021</summary>
      
    
    
    
    <category term="心情杂货" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/categories/%E5%BF%83%E6%83%85%E6%9D%82%E8%B4%A7/"/>
    
    
    <category term="心情" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>寻找你愿意忍受的痛苦</title>
    <link href="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/2e7ab08e2a03/"/>
    <id>https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/2e7ab08e2a03/</id>
    <published>2021-03-01T01:46:06.000Z</published>
    <updated>2023-08-11T01:47:47.443Z</updated>
    
    <content type="html"><![CDATA[<p>约翰·乌歇尔（John Urschel）是一个职业橄榄球运动员。</p><p align="center">  <img src="https://cdn.jsdelivr.net/gh/ytppp/ytpblog-image-store/img/bg2021022205.jpg" width="500"></p><p>2017 年退役后，他改行研究数学，先在宾夕法尼亚大学拿到数学硕士，现在麻省理工学院攻读数学博士。</p><p align="center">  <img src="https://cdn.jsdelivr.net/gh/ytppp/ytpblog-image-store/img/bg2021022206.jpg" width="500"></p><p align="center">  <img src="https://cdn.jsdelivr.net/gh/ytppp/ytpblog-image-store/img/bg2021022207.jpg" width="500"></p><p>约翰·乌歇尔从小就对数学有兴趣，在他还打球的 2015 年，就在学术杂志上发表过论文《用于计算图拉普拉斯算子的 Fiedler 向量的级联多重网格算法》，这种题目一看就属于专业数学家的范畴，说明那时他的数学水平已经不低了。</p><p>因此，外界对这件事情的看法就是，他具有数学天才，所以改行去读数学也很正常。</p><p>一次采访中，他回应了这种看法。说得真好，推荐给大家。</p><blockquote><p>“在别人眼里，数学对于数学家是很容易的。错了， 那是一场斗争，艰苦而孤独，不确定能得到成果，而且需要很长时间的奋斗。数学家是热爱斗争的人。”</p></blockquote><p>他的意思是，即使他真心热爱数学，依然觉得数学研究非常艰苦。（注意，一个真心热爱的人还说艰苦，如果换成普通人，感受可想而知。）他能够坚持下去，并不是因为他觉得很容易，而是因为他可以忍受这些痛苦。</p><p>这段话对我很有启发。大家往往只看到成功时的荣耀，而忽视成功之前那个痛苦的过程。英国著名作家奥威尔就说过：”一个人如果将他自己描述得很好的话，他十有八九是在撒谎，因为任何生命从内部审视都只不过是一系列的失败。”</p><p>实际上，一个人能够成功，仅有热爱是不够的，还必须有强大的忍受能力，能够吃苦。</p><p>很多人建议，寻找人生方向时，你应该听从自己的内心，寻找真正热爱的事情。我现在觉得，更现实的建议应该是，寻找你愿意忍受的痛苦。 你在哪一个方向上，愿意心甘情愿地、经年累月地吃苦，具有最大的忍耐，”虽九死其尤未悔”，那就是你应该选择的方向。</p><p>你能在某件事上赢过别人，原因很可能不是你比他强，也不是你比他更热爱这个事业，而是你比他更抗打击。生活虐你千百遍，等到别人都放弃的时候，你还没有放弃。</p>]]></content>
    
    
    <summary type="html">在别人眼里，数学对于数学家是很容易的。错了， 那是一场斗争，艰苦而孤独，不确定能得到成果，而且需要很长时间的奋斗。数学家是热爱斗争的人。</summary>
    
    
    
    <category term="心情杂货" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/categories/%E5%BF%83%E6%83%85%E6%9D%82%E8%B4%A7/"/>
    
    
    <category term="心情" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>实用sql语句</title>
    <link href="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/3eb99a0829b2/"/>
    <id>https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/3eb99a0829b2/</id>
    <published>2021-02-27T08:29:30.000Z</published>
    <updated>2023-08-11T01:47:47.439Z</updated>
    
    <content type="html"><![CDATA[<h2 id="插入或替换"><a href="#插入或替换" class="headerlink" title="插入或替换"></a>插入或替换</h2><p>如果我们希望插入一条新记录（INSERT），但如果记录已经存在，就先删除原记录，再插入新记录。此时，可以使用<code>REPLACE</code>语句，这样就不必先查询，再决定是否先删除再插入。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REPLACE INTO students (id, class_id, name, gender, score) VALUES (1, 1, &#x27;小明&#x27;, &#x27;F&#x27;, 99);</span><br></pre></td></tr></table></figure><p>若 id&#x3D;1 的记录不存在，REPLACE 语句将插入新记录，否则，当前 id&#x3D;1 的记录将被删除，然后再插入新记录。</p><h2 id="插入或更新"><a href="#插入或更新" class="headerlink" title="插入或更新"></a>插入或更新</h2><p>如果我们希望插入一条新记录（INSERT），但如果记录已经存在，就更新该记录，此时，可以使用<code>INSERT INTO ... ON DUPLICATE KEY UPDATE ...</code>语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO students (id, class_id, name, gender, score) VALUES (1, 1, &#x27;小明&#x27;, &#x27;F&#x27;, 99) ON DUPLICATE KEY UPDATE name=&#x27;小明&#x27;, gender=&#x27;F&#x27;, score=99;</span><br></pre></td></tr></table></figure><p>若 id&#x3D;1 的记录不存在，INSERT 语句将插入新记录，否则，当前 id&#x3D;1 的记录将被更新，更新的字段由 UPDATE 指定。</p><h2 id="插入或忽略"><a href="#插入或忽略" class="headerlink" title="插入或忽略"></a>插入或忽略</h2><p>如果我们希望插入一条新记录（INSERT），但如果记录已经存在，就啥事也不干直接忽略，此时，可以使用 INSERT IGNORE INTO …语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT IGNORE INTO students (id, class_id, name, gender, score) VALUES (1, 1, &#x27;小明&#x27;, &#x27;F&#x27;, 99);</span><br></pre></td></tr></table></figure><p>若 id&#x3D;1 的记录不存在，INSERT 语句将插入新记录，否则，不执行任何操作。</p><h2 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h2><p>如果想要对一个表进行快照，即复制一份当前表的数据到一个新表，可以结合 CREATE TABLE 和 SELECT：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 对class_id=1的记录进行快照，并存储为新表students_of_class1:</span><br><span class="line">CREATE TABLE students_of_class1 SELECT * FROM students WHERE class_id=1;</span><br></pre></td></tr></table></figure><p>新创建的表结构和 SELECT 使用的表结构完全一致。</p><h2 id="写入查询结果集"><a href="#写入查询结果集" class="headerlink" title="写入查询结果集"></a>写入查询结果集</h2><p>如果查询结果集需要写入到表中，可以结合<code>INSERT</code>和<code>SELECT</code>，将<code>SELECT</code>语句的结果集直接插入到指定表中。</p><p>例如，创建一个统计成绩的表 statistics，记录各班的平均成绩：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE statistics (</span><br><span class="line">    id BIGINT NOT NULL AUTO_INCREMENT,</span><br><span class="line">    class_id BIGINT NOT NULL,</span><br><span class="line">    average DOUBLE NOT NULL,</span><br><span class="line">    PRIMARY KEY (id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>然后，我们就可以用一条语句写入各班的平均成绩：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO statistics (class_id, average) SELECT class_id, AVG(score) FROM students GROUP BY class_id;</span><br></pre></td></tr></table></figure><p>确保 INSERT 语句的列和 SELECT 语句的列能一一对应，就可以在 statistics 表中直接保存查询的结果：</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;插入或替换&quot;&gt;&lt;a href=&quot;#插入或替换&quot; class=&quot;headerlink&quot; title=&quot;插入或替换&quot;&gt;&lt;/a&gt;插入或替换&lt;/h2&gt;&lt;p&gt;如果我们希望插入一条新记录（INSERT），但如果记录已经存在，就先删除原记录，再插入新记录。此时，可以使用&lt;cod</summary>
      
    
    
    
    <category term="MySql学习笔记" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/categories/MySql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>连接查询</title>
    <link href="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/aeff52597ece/"/>
    <id>https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/aeff52597ece/</id>
    <published>2021-02-26T08:31:27.000Z</published>
    <updated>2023-08-11T01:47:47.439Z</updated>
    
    <content type="html"><![CDATA[<h1 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h1><p>连接查询是另一种类型的多表查询。连接查询对多个表进行 JOIN 运算，简单地说，就是先确定一个主表作为结果集，然后，把其他表的行有选择性地“连接”在主表结果集上。<br>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT s.id, s.name, s.class_id, s.gender, s.score FROM students s;</span><br></pre></td></tr></table></figure><p>现在假设我们希望结果集同时包含所在班级的名称，上面的结果集只有 class_id 列，缺少对应班级的 name 列。但是，存放班级名称的 name 列存储在 classes 表中，只有根据 students 表的 class_id，找到 classes 表对应的行，再取出 name 列，就可以获得班级名称。这时，连接查询就派上了用场。我们先使用最常用的一种内连接——INNER JOIN 来实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT s.id, s.name, s.class_id, c.name class_name, s.gender, s.score</span><br><span class="line">FROM students s</span><br><span class="line">INNER JOIN classes c</span><br><span class="line">ON s.class_id = c.id;</span><br></pre></td></tr></table></figure><p>INNER JOIN 查询的写法是：</p><p>先确定主表，仍然使用 FROM &lt;表 1&gt;的语法；<br>再确定需要连接的表，使用 INNER JOIN &lt;表 2&gt;的语法；<br>然后确定连接条件，使用 ON &lt;条件…&gt;，这里的条件是 s.class_id &#x3D; c.id，表示 students 表的 class_id 列与 classes 表的 id 列相同的行需要连接；<br>可选：加上 WHERE 子句、ORDER BY 等子句。</p><p>外连接（OUTER JOIN）。我们把内连接查询改成外连接查询，看看效果:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT s.id, s.name, s.class_id, c.name class_name, s.gender, s.score</span><br><span class="line">FROM students s</span><br><span class="line">RIGHT OUTER JOIN classes c</span><br><span class="line">ON s.class_id = c.id;</span><br></pre></td></tr></table></figure><p>INNER JOIN 只返回同时存在于两张表的行数据，由于 students 表的 class_id 包含 1，2，3，classes 表的 id 包含 1，2，3，4，所以，INNER JOIN 根据条件 s.class_id &#x3D; c.id 返回的结果集仅包含 1，2，3。</p><p>RIGHT OUTER JOIN 返回右表都存在的行。如果某一行仅在右表存在，那么结果集就会以 NULL 填充剩下的字段。</p><p>LEFT OUTER JOIN 则返回左表都存在的行。如果我们给 students 表增加一行，并添加 class_id&#x3D;5，由于 classes 表并不存在 id&#x3D;5 的行，所以，LEFT OUTER JOIN 的结果会增加一行，对应的 class_name 是 NULL：<br>FULL OUTER JOIN，它会把两张表的所有记录全部选择出来，并且，自动把对方不存在的列填充为 NULL：<br>对于这么多种 JOIN 查询，到底什么使用应该用哪种呢？其实我们用图来表示结果集就一目了然了。</p><p>总结<br>假设查询语句是：</p><p>SELECT … FROM tableA ??? JOIN tableB ON tableA.column1 &#x3D; tableB.column2;<br>我们把 tableA 看作左表，把 tableB 看成右表，那么 INNER JOIN 是选出两张表都存在的记录：</p><p><img src="https://cdn.jsdelivr.net/gh/ytppp/ytpblog-image-store/img/inner-join.png" alt="inner join" title="inner join"></p><p>LEFT OUTER JOIN 是选出左表存在的记录：</p><p><img src="https://cdn.jsdelivr.net/gh/ytppp/ytpblog-image-store/img/left-outer-join.png" alt="left-outer-join" title="left-outer-join"></p><p>RIGHT OUTER JOIN 是选出右表存在的记录：</p><p><img src="https://cdn.jsdelivr.net/gh/ytppp/ytpblog-image-store/img/right-outer-join.png" alt="right-outer-join" title="right-outer-join"></p><p>FULL OUTER JOIN 则是选出左右表都存在的记录：</p><p><img src="https://cdn.jsdelivr.net/gh/ytppp/ytpblog-image-store/img/full-outer-join.png" alt="full-outer-join" title="full-outer-join"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;连接查询&quot;&gt;&lt;a href=&quot;#连接查询&quot; class=&quot;headerlink&quot; title=&quot;连接查询&quot;&gt;&lt;/a&gt;连接查询&lt;/h1&gt;&lt;p&gt;连接查询是另一种类型的多表查询。连接查询对多个表进行 JOIN 运算，简单地说，就是先确定一个主表作为结果集，然后，把其他表</summary>
      
    
    
    
    <category term="MySql学习笔记" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/categories/MySql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>多表查询</title>
    <link href="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/f393cfeaa5cb/"/>
    <id>https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/f393cfeaa5cb/</id>
    <published>2021-02-25T08:31:12.000Z</published>
    <updated>2023-08-11T01:47:47.439Z</updated>
    
    <content type="html"><![CDATA[<h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><p>SELECT 查询不但可以从一张表查询数据，还可以从多张表同时查询数据。查询多张表的语法是：**SELECT * FROM &lt;表 1&gt; &lt;表 2&gt;**。<br>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students, classes;</span><br></pre></td></tr></table></figure><p>这种一次查询两个表的数据，查询的结果也是一个二维表，它是 students 表和 classes 表的“乘积”，即 students 表的每一行与 classes 表的每一行都两两拼在一起返回。结果集的列数是 students 表和 classes 表的列数之和，行数是 students 表和 classes 表的行数之积。这种多表查询又称笛卡尔查询，使用笛卡尔查询时要非常小心，由于结果集是目标表的行数乘积，对两个各自有 100 行记录的表进行笛卡尔查询将返回 1 万条记录，对两个各自有 1 万行记录的表进行笛卡尔查询将返回 1 亿条记录。</p><p>你可能还注意到了，上述查询的结果集有两列 id 和两列 name，两列 id 是因为其中一列是 students 表的 id，而另一列是 classes 表的 id，但是在结果集中，不好区分。两列 name 同理</p><p>要解决这个问题，我们仍然可以利用投影查询的“设置列的别名”来给两个表各自的 id 和 name 列起别名:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">    students.id sid,</span><br><span class="line">    students.name,</span><br><span class="line">    students.gender,</span><br><span class="line">    students.score,</span><br><span class="line">    classes.id cid,</span><br><span class="line">    classes.name cname</span><br><span class="line">FROM students, classes;</span><br></pre></td></tr></table></figure><p>注意，多表查询时，要使用表名.列名这样的方式来引用列和设置别名，这样就避免了结果集的列名重复问题。但是，用表名.列名这种方式列举两个表的所有列实在是很麻烦，所以 SQL 还允许给表设置一个别名，让我们在投影查询中引用起来稍微简洁一点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">    s.id sid,</span><br><span class="line">    s.name,</span><br><span class="line">    s.gender,</span><br><span class="line">    s.score,</span><br><span class="line">    c.id cid,</span><br><span class="line">    c.name cname</span><br><span class="line">FROM students s, classes c;</span><br></pre></td></tr></table></figure><blockquote><p>注意到 FROM 子句给表设置别名的语法是 FROM &lt;表名 1&gt; &lt;别名 1&gt;, &lt;表名 2&gt; &lt;别名 2&gt;。这样我们用别名 s 和 c 分别表示 students 表和 classes 表。</p></blockquote><p>多表查询也是可以添加 WHERE 条件的，我们来试试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">    s.id sid,</span><br><span class="line">    s.name,</span><br><span class="line">    s.gender,</span><br><span class="line">    s.score,</span><br><span class="line">    c.id cid,</span><br><span class="line">    c.name cname</span><br><span class="line">FROM students s, classes c</span><br><span class="line">WHERE s.gender = &#x27;M&#x27; AND c.id = 1; # 这个查询的结果集每行记录都满足条件s.gender = &#x27;M&#x27;和c.id = 1。添加WHERE条件后结果集的数量大大减少了。</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;多表查询&quot;&gt;&lt;a href=&quot;#多表查询&quot; class=&quot;headerlink&quot; title=&quot;多表查询&quot;&gt;&lt;/a&gt;多表查询&lt;/h2&gt;&lt;p&gt;SELECT 查询不但可以从一张表查询数据，还可以从多张表同时查询数据。查询多张表的语法是：**SELECT * FROM </summary>
      
    
    
    
    <category term="MySql学习笔记" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/categories/MySql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>查询操作</title>
    <link href="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/9ba3a2e89171/"/>
    <id>https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/9ba3a2e89171/</id>
    <published>2021-02-24T08:26:46.000Z</published>
    <updated>2023-08-11T01:47:47.439Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h2><p>要查询数据库表的数据，我们使用如下的 SQL 语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM &lt;表名&gt;</span><br></pre></td></tr></table></figure><p>SELECT 是关键字，表示将要执行一个查询，*表示“所有列”，FROM 表示将要从哪个表查询。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 100+200; // 输出: 300</span><br></pre></td></tr></table></figure><p>SELECT 可以用作计算，但它并不是 SQL 的强项。但是，不带 FROM 子句的 SELECT 语句有一个有用的用途，就是用来判断当前到数据库的连接是否有效。许多检测工具会执行一条 SELECT 1;来测试数据库连接。</p><h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><p>条件查询的语法就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM &lt;表名&gt; WHERE &lt;条件表达式&gt;</span><br></pre></td></tr></table></figure><p>条件表达式可以用&lt;条件 1&gt; AND &lt;条件 2&gt;表达满足条件 1 并且满足条件 2</p><p>第二种条件是&lt;条件 1&gt; OR &lt;条件 2&gt;,，表示满足条件 1 或者满足条件 2</p><p>第三种条件是 NOT &lt;条件&gt;，表示“不符合该条件”的记录。</p><p>如果不加括号，条件运算按照 NOT、AND、OR 的优先级进行，即 NOT 优先级最高，其次是 AND，最后是 OR。加上括号可以改变优先级。</p><h3 id="常用的条件表达式"><a href="#常用的条件表达式" class="headerlink" title="常用的条件表达式"></a>常用的条件表达式</h3><table><thead><tr><th>条件</th><th>表达式举例 1</th><th>表达式举例 2</th><th>说明</th></tr></thead><tbody><tr><td>使用&#x3D;判断相等</td><td>score &#x3D; 80</td><td>name &#x3D; ‘abc’</td><td>字符串需要用单引号括起来</td></tr><tr><td>使用&gt;判断大于</td><td>score &gt; 80</td><td>name &gt; ‘abc’</td><td>字符串比较根据 ASCII 码, 中文字符比较根据数据库设置</td></tr><tr><td>使用&gt;&#x3D;判断大于或相等</td><td>score &gt;&#x3D; 80</td><td>name &gt;&#x3D; ‘abc’</td><td></td></tr><tr><td>使用&lt;判断小于 score &lt; 80</td><td>name &lt;&#x3D; ‘abc’</td><td></td><td></td></tr><tr><td>使用&lt;&#x3D;判断小于或相等</td><td>score &lt;&#x3D; 80</td><td>name &lt;&#x3D; ‘abc’</td><td></td></tr><tr><td>使用&lt;&gt;判断不相等</td><td>score &lt;&gt; 80</td><td>name &lt;&gt; ‘abc’</td><td></td></tr><tr><td>使用 LIKE 判断相似</td><td>name LIKE ‘ab%’</td><td>name LIKE ‘%bc%’</td><td>%表示任意字符，例如’ab%’将匹配’ab’，’abc’，’abcd’</td></tr></tbody></table><h3 id="投影查询"><a href="#投影查询" class="headerlink" title="投影查询"></a>投影查询</h3><p>可以用<code>SELECT 列1, 列2, 列3 FROM ...</code>，让结果集仅包含指定列。这种操作称为投影查询。</p><p>使用<code>SELECT 列1, 列2, 列3 FROM ...</code>时，还可以给每一列起个别名，这样，结果集的列名就可以与原表的列名不同。它的语法是<code>SELECT 列1 别名1, 列2 别名2, 列3 别名3 FROM ...</code>。</p><blockquote><p>投影查询同样可以接 WHERE 条件，实现复杂的查询。</p></blockquote><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p><strong>加上<code>ORDER BY xxx</code>子句。从低到高进行排序</strong> 。</p><p><strong>加上<code>ORDER BY xxx DESC</code>。从高到低进行排序</strong>。</p><p>如果某列有相同的数据，要进一步排序，可以继续添加列名。例如，使用<code>ORDER BY score DESC</code>, gender 表示先按 score 列倒序，如果有相同分数的，再按 gender 列排序：</p><p>默认的排序规则是 ASC（升序），即从小到大。ASC 可以省略，即 ORDER BY score ASC 和 ORDER BY score 效果一样。</p><blockquote><p>如果有 WHERE 子句，那么 ORDER BY 子句要放到 WHERE 子句后面。</p></blockquote><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><p>使用 SELECT 查询时，如果结果集数据量很大，比如几万行数据，放在一个页面显示的话数据量太大。这个时候就可以采用分页显示。要实现分页功能（假设一个分页显示 100 页），实际上就是从结果集中显示第 1<del>100 条记录作为第 1 页，显示第 101</del>200 条记录作为第 2 页，以此类推。因此，分页实际上就是从结果集中“截取”出第 M~N 条记录。这个查询可以通过 LIMIT <M> OFFSET <N>子句实现。</p><p>对结果集分页，假设每页 3 条记录。要获取第 1 页的记录，可以使用 LIMIT 3 OFFSET 0：查询 LIMIT 3 OFFSET 0 表示，对结果集从 0 号记录开始，最多取 3 条。</p><blockquote><p>注意 SQL 记录集的索引从 0 开始。</p></blockquote><p>分页查询的关键在于，<strong>首先要确定每页需要显示的结果数量 pageSize（这里是 3），然后根据当前页的索引 pageIndex（从 1 开始），确定 LIMIT 和 OFFSET 应该设定的值:</strong></p><p>LIMIT 总是设定为 pageSize。OFFSET 计算公式为 pageSize * (pageIndex - 1)。</p><blockquote><p>OFFSET 是可选的，如果只写 LIMIT 15，那么相当于 LIMIT 15 OFFSET 0。</p></blockquote><blockquote><p>在 MySQL 中，LIMIT 15 OFFSET 30 还可以简写成 LIMIT 30, 15。</p></blockquote><blockquote><p>使用<code>LIMIT &lt;M&gt; OFFSET &lt;N&gt;</code>分页时，随着 N 越来越大，查询效率也会越来越低。</p></blockquote><h3 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h3><p>对于统计总数、平均数这类计算，SQL 提供了专门的聚合函数，使用聚合函数进行查询，就是聚合查询，它可以快速获得结果。</p><p>COUNT(<em>)表示查询所有列的行数，要注意聚合的计算结果虽然是一个数字，但查询的结果仍然是一个二维表，只是这个二维表只有一行一列，并且列名是 COUNT(</em>)。通常，使用聚合查询时，我们应该给列名设置一个别名，便于处理结果。</p><p>COUNT(*)和 COUNT(id)实际上是一样的效果。另外注意，聚合查询同样可以使用 WHERE 条件</p><p>除了 COUNT()函数外，SQL 还提供了如下聚合函数：</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>SUM</td><td>计算某一列的合计值，该列必须为数值类型</td></tr><tr><td>AVG</td><td>计算某一列的平均值，该列必须为数值类型</td></tr><tr><td>MAX</td><td>计算某一列的最大值</td></tr><tr><td>MIN</td><td>计算某一列的最小值</td></tr></tbody></table><blockquote><p>注意，MAX()和 MIN()函数并不限于数值类型。如果是字符类型，MAX()和 MIN()会返回排序最后和排序最前的字符。</p></blockquote><blockquote><p>如果聚合查询的 WHERE 条件没有匹配到任何行，COUNT()会返回 0，而 SUM()、AVG()、MAX()和 MIN()会返回 NULL：</p></blockquote><p>对于聚合查询，SQL 还提供了“分组聚合”的功能。我们观察下面的聚合查询。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(*) num FROM students GROUP BY class_id;</span><br></pre></td></tr></table></figure><p>也可以使用多个列进行分组。例如，我们想统计各班的男生和女生人数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT class_id, gender, COUNT(*) num FROM students GROUP BY class_id, gender;</span><br></pre></td></tr></table></figure><p>聚合查询的列中，只能放入分组的列。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基本查询&quot;&gt;&lt;a href=&quot;#基本查询&quot; class=&quot;headerlink&quot; title=&quot;基本查询&quot;&gt;&lt;/a&gt;基本查询&lt;/h2&gt;&lt;p&gt;要查询数据库表的数据，我们使用如下的 SQL 语句：&lt;/p&gt;
&lt;figure class=&quot;highlight plaint</summary>
      
    
    
    
    <category term="MySql学习笔记" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/categories/MySql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>增删改操作</title>
    <link href="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/6d1133dce64f/"/>
    <id>https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/6d1133dce64f/</id>
    <published>2021-02-23T08:25:50.000Z</published>
    <updated>2023-08-11T01:47:47.439Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>关系数据库建立在关系模型之上。关系模型的本质就是若干个存储数据的二维表。</p></blockquote><p>表的每一行称为<code>记录</code>（Record），记录一个逻辑上的数据。</p><p>表的每一列称为<code>字段</code>（Column）。字段定义了数据类型（整型、浮点型、字符串、日期等），以及是否允许为 NULL。</p><blockquote><p>注意<code>NULL表示字段数据不存在</code>。一个整型字段如果为 NULL 不表示它的值为 0，同样的，一个字符串型字段为 NULL 也不表示它的值为空串’’。</p></blockquote><blockquote><p>通常情况下，字段应该避免允许为 NULL。不允许为 NULL 可以简化查询条件，加快查询速度，也利于应用程序读取数据后无需判断是否为 NULL。</p></blockquote><blockquote><p>同一个表的若干记录都有若干相同的字段。</p></blockquote><p>关系数据库的表与表之间需要建立<code>一对一</code>，<code>一对多</code>，<code>多对多</code>的关系。</p><blockquote><p>在关系数据库中，关系是通过<code>主键外键</code>来维护的。</p></blockquote><h2 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h2><p>对于关系表，有个很重要的约束，就是任意两条记录不能重复。不能重复不是指两条记录不完全相同，而是指能够通过某个字段唯一区分出不同的记录，这个字段被称为<code>主键</code>。</p><p>对主键的要求，最关键的一点是：记录一旦插入到表中，主键最好不要再修改，因为主键是用来唯一定位记录的，修改了主键，会造成一系列的影响。</p><p>选取主键的一个基本原则是：不使用任何业务相关的字段作为主键，我们一般把这个字段命名为 id。常见的可作为 id 字段的类型有：</p><ol><li>自增整数类型：数据库会在插入数据时自动为每一条记录分配一个自增整数，这样我们就完全不用担心主键重复，也不用自己预先生成主键；</li><li>全局唯一 GUID 类型：使用一种全局唯一的字符串作为主键，类似 8f55d96b-8acc-4636-8cb8-76bf8abc2f57。GUID 算法通过网卡 MAC 地址、时间戳和随机数保证任意计算机在任意时间生成的字符串都是不同的，大部分编程语言都内置了 GUID 算法，可以自己预算出主键。</li></ol><p>对于大部分应用来说，通常自增类型的主键就能满足需求。</p><blockquote><p>如果使用 INT 自增类型，那么当一张表的记录数超过 2147483647（约 21 亿）时，会达到上限而出错。使用 BIGINT 自增类型则可以最多约 922 亿亿条记录。</p></blockquote><h3 id="联合主键"><a href="#联合主键" class="headerlink" title="联合主键"></a>联合主键</h3><p>关系数据库实际上还允许通过多个字段唯一标识记录，即两个或更多的字段都设置为主键，这种主键被称为联合主键。对于联合主键，允许一列有重复，只要不是所有主键列都重复即可。</p><blockquote><p>没有必要的情况下，尽量不使用联合主键，因为它给关系表带来了复杂度的上升。</p></blockquote><hr><h3 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h3><p>在数据表中，可以把数据与另一张表关联起来的字段对应的列称为<code>外键</code>。</p><p>外键并不是通过列名实现的，而是通过定义外键约束实现的。但由于外键约束会降低数据库的性能，大部分互联网应用程序为了追求速度，并不设置外键约束，而是仅靠应用程序自身来保证逻辑的正确性。</p><p><code>多对多关系</code>实际上是通过两个一对多关系实现的，即通过一个中间表，关联两个一对多关系，就形成了多对多关系.</p><blockquote><p>一些应用会把一个大表拆成两个一对一的表，目的是把经常读取和不经常读取的字段分开，以获得更高的性能。例如，把一个大的用户表分拆为用户基本信息表 user_info 和用户详细信息表 user_profiles，大部分时候，只需要查询 user_info 表，并不需要查询 user_profiles 表，这样就提高了查询速度。</p></blockquote><hr><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><blockquote><p>先创建一个后面会用到的表 students</p></blockquote><table><thead><tr><th>ID</th><th>class_id</th><th>name</th><th>gender</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>Lucy</td><td>1</td><td>90</td></tr><tr><td>2</td><td>3</td><td>Tom</td><td>0</td><td>40</td></tr></tbody></table><p><code>索引</code>是关系数据库中对某一列或多个列的值进行预排序的数据结构。<strong>通过使用索引，可以让数据库系统不必扫描整个表，而是直接定位到符合条件的记录，这样就大大加快了查询速度。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALERT TABLE students</span><br><span class="line">ADD INDEX idx_score (score)</span><br></pre></td></tr></table></figure><p>上述代码就创建了一个名称为 idx_score，使用列 score 的索引。索引名称是任意的。</p><p>索引如果有多列，可以在括号里依次写上，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ADD INDEX idx_name_score (name, score)</span><br></pre></td></tr></table></figure><blockquote><p>对于主键，关系数据库会自动对其创建主键索引。使用主键索引的效率是最高的，因为主键会保证绝对唯一。</p></blockquote><h3 id="索引的效率"><a href="#索引的效率" class="headerlink" title="索引的效率"></a>索引的效率</h3><p><strong>索引的效率取决于索引列的值是否散列</strong>。即该列的值如果越互不相同，那么索引效率越高。反过来，如果记录的列存在大量相同的值，例如 gender 列，大约一半的记录值是 M，另一半是 F，因此，对该列创建索引就没有意义。</p><h3 id="使用索引的优点与缺点"><a href="#使用索引的优点与缺点" class="headerlink" title="使用索引的优点与缺点"></a>使用索引的优点与缺点</h3><p>索引的优点是提高了查询效率，缺点是在插入、更新和删除记录时，需要同时修改索引，因此，索引越多，插入、更新和删除记录的速度就越慢。</p><h3 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h3><p>在设计关系数据表的时候，看上去唯一的列，例如身份证号、邮箱地址等，因为他们具有业务含义，因此不宜作为主键。但是，这些列根据业务要求，又具有唯一性约束：即不能出现两条记录存储了同一个身份证号。这个时候，就可以给该列添加一个唯一索引。例如，我们假设 students 表的 name 不能重复：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALERT TABLE students</span><br><span class="line">ADD UNIQUE INDEX uni_name (name)</span><br></pre></td></tr></table></figure><p>可以只对某一列添加一个唯一约束而不创建唯一索引：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE students</span><br><span class="line">ADD CONSTRAINT uni_name UNIQUE (name);</span><br></pre></td></tr></table></figure><p>这种情况下，name 列没有索引，但仍然具有唯一性保证。</p><p>无论是否创建索引，对于用户和应用程序来说，使用关系数据库不会有任何区别。这里的意思是说，当我们在数据库中查询时，如果有相应的索引可用，数据库系统就会自动使用索引来提高查询效率，如果没有索引，查询也能正常执行，只是速度会变慢。因此，索引可以在使用数据库的过程中逐步优化。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;关系数据库建立在关系模型之上。关系模型的本质就是若干个存储数据的二维表。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;表的每一行称为&lt;code&gt;记录&lt;/code&gt;（Record），记录一个逻辑上的数据。&lt;/p&gt;
&lt;p&gt;表的每一列称为&lt;code&gt;字段&lt;</summary>
      
    
    
    
    <category term="MySql学习笔记" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/categories/MySql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>关系模型</title>
    <link href="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/16c62ee73722/"/>
    <id>https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/16c62ee73722/</id>
    <published>2021-02-22T08:24:26.000Z</published>
    <updated>2023-08-11T01:47:47.439Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>关系数据库建立在关系模型之上。关系模型的本质就是若干个存储数据的二维表。</p></blockquote><p>表的每一行称为<code>记录</code>（Record），记录一个逻辑上的数据。</p><p>表的每一列称为<code>字段</code>（Column）。字段定义了数据类型（整型、浮点型、字符串、日期等），以及是否允许为 NULL。</p><blockquote><p>注意<code>NULL表示字段数据不存在</code>。一个整型字段如果为 NULL 不表示它的值为 0，同样的，一个字符串型字段为 NULL 也不表示它的值为空串’’。</p></blockquote><blockquote><p>通常情况下，字段应该避免允许为 NULL。不允许为 NULL 可以简化查询条件，加快查询速度，也利于应用程序读取数据后无需判断是否为 NULL。</p></blockquote><blockquote><p>同一个表的若干记录都有若干相同的字段。</p></blockquote><p>关系数据库的表与表之间需要建立<code>一对一</code>，<code>一对多</code>，<code>多对多</code>的关系。</p><blockquote><p>在关系数据库中，关系是通过<code>主键外键</code>来维护的。</p></blockquote><h2 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h2><p>对于关系表，有个很重要的约束，就是任意两条记录不能重复。不能重复不是指两条记录不完全相同，而是指能够通过某个字段唯一区分出不同的记录，这个字段被称为<code>主键</code>。</p><p>对主键的要求，最关键的一点是：记录一旦插入到表中，主键最好不要再修改，因为主键是用来唯一定位记录的，修改了主键，会造成一系列的影响。</p><p>选取主键的一个基本原则是：不使用任何业务相关的字段作为主键，我们一般把这个字段命名为 id。常见的可作为 id 字段的类型有：</p><ol><li>自增整数类型：数据库会在插入数据时自动为每一条记录分配一个自增整数，这样我们就完全不用担心主键重复，也不用自己预先生成主键；</li><li>全局唯一 GUID 类型：使用一种全局唯一的字符串作为主键，类似 8f55d96b-8acc-4636-8cb8-76bf8abc2f57。GUID 算法通过网卡 MAC 地址、时间戳和随机数保证任意计算机在任意时间生成的字符串都是不同的，大部分编程语言都内置了 GUID 算法，可以自己预算出主键。</li></ol><p>对于大部分应用来说，通常自增类型的主键就能满足需求。</p><blockquote><p>如果使用 INT 自增类型，那么当一张表的记录数超过 2147483647（约 21 亿）时，会达到上限而出错。使用 BIGINT 自增类型则可以最多约 922 亿亿条记录。</p></blockquote><h3 id="联合主键"><a href="#联合主键" class="headerlink" title="联合主键"></a>联合主键</h3><p>关系数据库实际上还允许通过多个字段唯一标识记录，即两个或更多的字段都设置为主键，这种主键被称为联合主键。对于联合主键，允许一列有重复，只要不是所有主键列都重复即可。</p><blockquote><p>没有必要的情况下，尽量不使用联合主键，因为它给关系表带来了复杂度的上升。</p></blockquote><hr><h3 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h3><p>在数据表中，可以把数据与另一张表关联起来的字段对应的列称为<code>外键</code>。</p><p>外键并不是通过列名实现的，而是通过定义外键约束实现的。但由于外键约束会降低数据库的性能，大部分互联网应用程序为了追求速度，并不设置外键约束，而是仅靠应用程序自身来保证逻辑的正确性。</p><p><code>多对多关系</code>实际上是通过两个一对多关系实现的，即通过一个中间表，关联两个一对多关系，就形成了多对多关系.</p><blockquote><p>一些应用会把一个大表拆成两个一对一的表，目的是把经常读取和不经常读取的字段分开，以获得更高的性能。例如，把一个大的用户表分拆为用户基本信息表 user_info 和用户详细信息表 user_profiles，大部分时候，只需要查询 user_info 表，并不需要查询 user_profiles 表，这样就提高了查询速度。</p></blockquote><hr><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><blockquote><p>先创建一个后面会用到的表 students</p></blockquote><table><thead><tr><th>ID</th><th>class_id</th><th>name</th><th>gender</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>Lucy</td><td>1</td><td>90</td></tr><tr><td>2</td><td>3</td><td>Tom</td><td>0</td><td>40</td></tr></tbody></table><p><code>索引</code>是关系数据库中对某一列或多个列的值进行预排序的数据结构。<strong>通过使用索引，可以让数据库系统不必扫描整个表，而是直接定位到符合条件的记录，这样就大大加快了查询速度。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALERT TABLE students</span><br><span class="line">ADD INDEX idx_score (score)</span><br></pre></td></tr></table></figure><p>上述代码就创建了一个名称为 idx_score，使用列 score 的索引。索引名称是任意的。</p><p>索引如果有多列，可以在括号里依次写上，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ADD INDEX idx_name_score (name, score)</span><br></pre></td></tr></table></figure><blockquote><p>对于主键，关系数据库会自动对其创建主键索引。使用主键索引的效率是最高的，因为主键会保证绝对唯一。</p></blockquote><h3 id="索引的效率"><a href="#索引的效率" class="headerlink" title="索引的效率"></a>索引的效率</h3><p><strong>索引的效率取决于索引列的值是否散列</strong>。即该列的值如果越互不相同，那么索引效率越高。反过来，如果记录的列存在大量相同的值，例如 gender 列，大约一半的记录值是 M，另一半是 F，因此，对该列创建索引就没有意义。</p><h3 id="使用索引的优点与缺点"><a href="#使用索引的优点与缺点" class="headerlink" title="使用索引的优点与缺点"></a>使用索引的优点与缺点</h3><p>索引的优点是提高了查询效率，缺点是在插入、更新和删除记录时，需要同时修改索引，因此，索引越多，插入、更新和删除记录的速度就越慢。</p><h3 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h3><p>在设计关系数据表的时候，看上去唯一的列，例如身份证号、邮箱地址等，因为他们具有业务含义，因此不宜作为主键。但是，这些列根据业务要求，又具有唯一性约束：即不能出现两条记录存储了同一个身份证号。这个时候，就可以给该列添加一个唯一索引。例如，我们假设 students 表的 name 不能重复：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALERT TABLE students</span><br><span class="line">ADD UNIQUE INDEX uni_name (name)</span><br></pre></td></tr></table></figure><p>可以只对某一列添加一个唯一约束而不创建唯一索引：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE students</span><br><span class="line">ADD CONSTRAINT uni_name UNIQUE (name);</span><br></pre></td></tr></table></figure><p>这种情况下，name 列没有索引，但仍然具有唯一性保证。</p><p>无论是否创建索引，对于用户和应用程序来说，使用关系数据库不会有任何区别。这里的意思是说，当我们在数据库中查询时，如果有相应的索引可用，数据库系统就会自动使用索引来提高查询效率，如果没有索引，查询也能正常执行，只是速度会变慢。因此，索引可以在使用数据库的过程中逐步优化。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;关系数据库建立在关系模型之上。关系模型的本质就是若干个存储数据的二维表。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;表的每一行称为&lt;code&gt;记录&lt;/code&gt;（Record），记录一个逻辑上的数据。&lt;/p&gt;
&lt;p&gt;表的每一列称为&lt;code&gt;字段&lt;</summary>
      
    
    
    
    <category term="MySql学习笔记" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/categories/MySql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>MySql基础知识</title>
    <link href="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/a6ddc633a3a7/"/>
    <id>https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/a6ddc633a3a7/</id>
    <published>2021-02-21T08:30:18.000Z</published>
    <updated>2023-08-11T01:47:47.439Z</updated>
    
    <content type="html"><![CDATA[<p>安装完 MySQL 后，除了 MySQL Server，即真正的 MySQL 服务器外，还附赠一个 MySQL Client 程序。</p><p>MySQL Client 是一个命令行客户端，可以通过 MySQL Client 登录 MySQL，然后，输入 SQL 语句并执行。</p><p>打开命令提示符，输入命令<code>mysql -u root -p</code>，提示输入口令。填入 MySQL 的 root 口令，如果正确，就连上了 MySQL Server，同时提示符变为<code>mysql&gt;：</code></p><p>输入<code>exit</code>断开与 MySQL Server 的连接并返回到命令提示符。</p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>在一个运行 MySQL 的服务器上，实际上可以创建多个数据库（Database）。要列出所有数据库，使用命令：<code>SHOW DATABASE;</code>。</p><p>创建一个新数据库，使用命令：<code>CREATE DATABASE xxx;</code>。(xxx：要创建的数据库名字)</p><p>删除一个数据库：<code>DROP DATABASE test;</code></p><blockquote><p>注意：删除一个数据库将导致该数据库的所有表全部被删除</p></blockquote><p>对一个数据库进行操作时，要首先将其切换为当前数据库： <code>USE xxx;</code></p><h2 id="表"><a href="#表" class="headerlink" title="表"></a>表</h2><p>列出当前数据库的所有表，使用命令：<code>SHOW TABLES;</code></p><p>要查看一个表的结构，使用命令：<code>DESC students;</code></p><p>查看创建表的 SQL 语句:<code>SHOW CREATE TABLE students;</code></p><p>创建表使用 CREATE TABLE 语句，而删除表使用 DROP TABLE 语句</p><p>修改表就比较复杂。如果要给 students 表新增一列 birth，使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE students ADD COLUMN birth VARCHAR(10) NOT NULL;</span><br></pre></td></tr></table></figure><p>要修改 birth 列，例如把列名改为 birthday，类型改为 VARCHAR(20)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE students CHANGE COLUMN birth birthday VARCHAR(20) NOT NULL;</span><br></pre></td></tr></table></figure><p>要删除列，使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE students DROP COLUMN birthday;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;安装完 MySQL 后，除了 MySQL Server，即真正的 MySQL 服务器外，还附赠一个 MySQL Client 程序。&lt;/p&gt;
&lt;p&gt;MySQL Client 是一个命令行客户端，可以通过 MySQL Client 登录 MySQL，然后，输入 SQL 语句并</summary>
      
    
    
    
    <category term="MySql学习笔记" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/categories/MySql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Sql基础知识</title>
    <link href="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/7022355bc05f/"/>
    <id>https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/7022355bc05f/</id>
    <published>2021-02-20T07:09:49.000Z</published>
    <updated>2023-08-11T01:47:47.439Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库出现的原因："><a href="#数据库出现的原因：" class="headerlink" title="数据库出现的原因："></a>数据库出现的原因：</h1><p>因为应用程序需要保存用户的数据，比如 Word 需把用户文档保存起来，以便下次继续编辑或拷贝到另一台电脑。要保存用户的数据，最简单的方法是把用户数据写入文件。例如，要保存一个班级所有学生的信息，可以向文件中写入一个 CSV 文件。但是，随着应用程序的功能越来越复杂，数据量越来越大，对数据的保存和管理会出现下面的问题：</p><ol><li>读写文件并解析出数据需要大量重复代码。</li><li>从成千上万的数据中快速查询出指定数据需要复杂的逻辑。</li><li>如果每个应用程序都各自写自己的读写数据的代码，一方面效率低，容易出错。</li><li>每个应用程序访问数据的接口都不相同，数据难以复用。</li></ol><h1 id="数据库存储应用数据的好处"><a href="#数据库存储应用数据的好处" class="headerlink" title="数据库存储应用数据的好处"></a>数据库存储应用数据的好处</h1><p>应用程序不需要自己管理数据，而是通过数据库软件提供的接口来读写数据。同时，应用程序不用关心数据本身如何存储到文件的。</p><h1 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h1><ul><li>层次模型：层次模型就是以“上下级”的层次关系来组织数据的一种方式，层次模型的数据结构看起来就像一颗树</li><li>网状模型：网状模型把每个数据节点和其他很多节点都连接起来，它的数据结构看起来就像很多城市之间的路网</li><li>关系模型：关系模型把数据看作是一个二维表格，任何数据都可以通过行号+列号来唯一确定，它的数据模型看起来就是一个 Excel 表(关系模型占多数，因为相比层次模型和网状模型，关系模型理解和使用起来最简单)</li></ul><h1 id="主流关系数据库"><a href="#主流关系数据库" class="headerlink" title="主流关系数据库"></a>主流关系数据库</h1><p>目前，主流的关系数据库主要分为以下几类：</p><ul><li>商用数据库，例如：Oracle，SQL Server，DB2 等；</li><li>开源数据库，例如：MySQL，PostgreSQL 等；</li><li>桌面数据库，以微软 Access 为代表，适合桌面应用程序使用；</li><li>嵌入式数据库，以 Sqlite 为代表，适合手机应用和桌面程序。</li></ul><h1 id="SQL-概述"><a href="#SQL-概述" class="headerlink" title="SQL 概述"></a>SQL 概述</h1><blockquote><p>SQL 是结构化查询语言的缩写，用来访问和操作数据库系统。SQL 语句既可以查询数据库中的数据，也可以添加、更新和删除数据库中的数据，还可以对数据库进行管理和维护操作。简单说，SQL 是<code>访问</code>和<code>处理</code>关系数据库的计算机标准语言。</p></blockquote><h1 id="SQL-定义了以下几种操作数据库的能力："><a href="#SQL-定义了以下几种操作数据库的能力：" class="headerlink" title="SQL 定义了以下几种操作数据库的能力："></a>SQL 定义了以下几种操作数据库的能力：</h1><ul><li>DDL(Data Definition Language): DDL 允许用户定义数据，也就是创建表、删除表、修改表结构这些操作。通常，DDL 由数据库管理员执行。</li><li>DML(Data Manipulation Language): DML 为用户提供添加、删除、更新数据的能力。这些是应用程序对数据库的日常操作。</li><li>DQL(Data Query Language): DQL 允许用户查询数据.这也是通常最频繁的数据库日常操作。</li></ul><h1 id="NOSQL"><a href="#NOSQL" class="headerlink" title="NOSQL"></a>NOSQL</h1><blockquote><p>NoSQL 数据库就是非 SQL 的数据库，例如 MongoDB。但在应用中，SQL 数据库仍然承担了各种应用程序的核心数据存储，而 NoSQL 数据库作为 SQL 数据库的补充，两者不是二选一的问题，而是主从关系。</p></blockquote><h1 id="SQL-语法特点"><a href="#SQL-语法特点" class="headerlink" title="SQL 语法特点"></a>SQL 语法特点</h1><ul><li>SQL 语言关键字不区分大小写</li></ul><h1 id="安装-MySQL"><a href="#安装-MySQL" class="headerlink" title="安装 MySQL"></a>安装 MySQL</h1><ul><li>Windows 或 Mac 上安装 MySQL，首先从 MySQL 官方网站下载最新的 MySQL Community Server 版本：<a href="https://dev.mysql.com/downloads/mysql/">下载地址</a>，选择对应的操作系统版本，下载安装即可。在安装过程中，MySQL 会自动创建一个 root 用户，并提示输入 root 密码。</li><li>要在 Linux 上安装 MySQL，可以使用发行版的包管理器。例如，Debian 和 Ubuntu 用户可以简单地通过命令<code>apt-get install mysql-server</code>安装最新的 MySQL 版本。</li></ul><h1 id="运行-MySQL"><a href="#运行-MySQL" class="headerlink" title="运行 MySQL"></a>运行 MySQL</h1><p>MySQL 安装后会自动在后台运行。为了验证 MySQL 安装是否正确，我们需要通过 mysql 这个命令行程序来连接 MySQL 服务器。在命令提示符下输入<code>mysql -u root -p</code>，然后输入密码，如果一切正确，就会连接到 MySQL 服务器，同时提示符变为<code>mysql&gt;</code>。输入<code>exit</code>退出 MySQL 命令行(注意，输入<code>exit</code>退出 MySQL 后，MySQL 服务器仍在后台运行)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据库出现的原因：&quot;&gt;&lt;a href=&quot;#数据库出现的原因：&quot; class=&quot;headerlink&quot; title=&quot;数据库出现的原因：&quot;&gt;&lt;/a&gt;数据库出现的原因：&lt;/h1&gt;&lt;p&gt;因为应用程序需要保存用户的数据，比如 Word 需把用户文档保存起来，以便下次继续编</summary>
      
    
    
    
    <category term="MySql学习笔记" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/categories/MySql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>异步</title>
    <link href="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/b1144fdad27a/"/>
    <id>https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/b1144fdad27a/</id>
    <published>2021-02-07T01:39:56.000Z</published>
    <updated>2023-08-11T01:47:47.439Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章结构"><a href="#文章结构" class="headerlink" title="文章结构"></a>文章结构</h2><ul><li>异步<ul><li>JS 是单线程运行的</li></ul></li><li>面试题</li></ul><h2 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">100</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">200</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">300</span>);</span><br><span class="line"><span class="comment">// 执行结果：100 300 1秒后，200</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">100</span>);</span><br><span class="line"><span class="title function_">alert</span>(<span class="number">200</span>); <span class="comment">// 1秒钟之后点击确认</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">300</span>);</span><br><span class="line"><span class="comment">// 执行结果：100 点击alert弹框确认按钮后，200</span></span><br></pre></td></tr></table></figure><p>第一个例子的表现就叫做<strong>异步</strong>，<strong>异步不会阻塞后面程序的运行</strong>。第二个例子的表现就叫做<strong>同步</strong>。</p><h3 id="JS-是单线程运行的"><a href="#JS-是单线程运行的" class="headerlink" title="JS 是单线程运行的"></a>JS 是单线程运行的</h3><p>JS 需要异步的根本原因是<strong>JS 是单线程运行的</strong>，即在同一时间只能做一件事，不能“一心二用”。例如，一个 Ajax 请求由于网络比较慢，请求需要 5 秒钟。如果是同步，这 5 秒钟页面就卡死在这里啥也干不了了。异步的话，5 秒等待就等待了，其他事情不耽误做。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  a = <span class="literal">false</span>;</span><br><span class="line">&#125;, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">while</span> (a) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;while执行了&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行结果，程序会一直循环下去，因为js是单线程的，进入循环之后出不了了，所以就不会进入定时器了。</span></span><br></pre></td></tr></table></figure><h3 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h3><p>promise 的构造函数执行的优先级&gt;then 的优先级&gt;大于定时器的优先级</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;文章结构&quot;&gt;&lt;a href=&quot;#文章结构&quot; class=&quot;headerlink&quot; title=&quot;文章结构&quot;&gt;&lt;/a&gt;文章结构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;异步&lt;ul&gt;
&lt;li&gt;JS 是单线程运行的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;面试题&lt;/li&gt;
&lt;/ul</summary>
      
    
    
    
    <category term="javascript学习笔记" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/categories/javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>ES新标准总结</title>
    <link href="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/14d6939f8e0f/"/>
    <id>https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/14d6939f8e0f/</id>
    <published>2021-02-07T01:39:48.000Z</published>
    <updated>2023-08-11T01:47:47.439Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章结构"><a href="#文章结构" class="headerlink" title="文章结构"></a>文章结构</h2><ul><li>箭头函数</li><li>module</li><li>class</li><li>Set 和 Map</li><li>Promise</li><li>面试题</li></ul><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>箭头函数存在的意义，第一写起来更加简洁，第二可以解决 ES6 之前函数执行中 this 是全局变量的问题。</p><h2 id="module"><a href="#module" class="headerlink" title="module"></a>module</h2><ul><li><p>如果只是输出一个唯一的对象，使用<strong>export default</strong>即可。</p></li><li><p>如果要输出多个对象：</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导出方式1</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;fn1&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;fn2&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导出方式2</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;fn1&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;fn2&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; fn1, fn2 &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入</span></span><br><span class="line"><span class="keyword">import</span> &#123; fn1, fn2 &#125; <span class="keyword">from</span> <span class="string">&#x27;./util2.js&#x27;</span>;</span><br><span class="line"><span class="title function_">fn1</span>();</span><br><span class="line"><span class="title function_">fn2</span>();</span><br></pre></td></tr></table></figure><h2 id="class"><a href="#class" class="headerlink" title="class"></a>class</h2><p>使用 class，可以让类的定义更加简单与直观。</p><h2 id="Set-和-Map"><a href="#Set-和-Map" class="headerlink" title="Set 和 Map"></a>Set 和 Map</h2><p><code>Set</code></p><p>Set 类似于数组，但数组可以允许元素重复，Set 不允许元素重复</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例1</span></span><br><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set); <span class="comment">// Set(4) &#123;1, 2, 3, 4&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例2</span></span><br><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">8</span>].<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> set.<span class="title function_">add</span>(item));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2 3 5 4 8</span></span><br></pre></td></tr></table></figure><p>Set 实例的属性和方法有:</p><ul><li>size：获取元素数量。</li><li>add(value)：添加元素，返回 Set 实例本身。可以链式调用。</li><li>delete(value)：删除元素，返回一个布尔值，表示删除是否成功。</li><li>has(value)：返回一个布尔值，表示该值是否是 Set 实例的元素。</li><li>clear()：清除所有元素，没有返回值。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">s.<span class="title function_">add</span>(<span class="number">1</span>)</span><br><span class="line">  .<span class="title function_">add</span>(<span class="number">2</span>)</span><br><span class="line">  .<span class="title function_">add</span>(<span class="number">2</span>); <span class="comment">// 添加元素</span></span><br><span class="line"></span><br><span class="line">s.<span class="property">size</span>; <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">s.<span class="title function_">has</span>(<span class="number">1</span>); <span class="comment">// true</span></span><br><span class="line">s.<span class="title function_">has</span>(<span class="number">2</span>); <span class="comment">// true</span></span><br><span class="line">s.<span class="title function_">has</span>(<span class="number">3</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">s.<span class="title function_">delete</span>(<span class="number">2</span>);</span><br><span class="line">s.<span class="title function_">has</span>(<span class="number">2</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">s.<span class="title function_">clear</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s); <span class="comment">// Set(0) &#123;&#125;</span></span><br></pre></td></tr></table></figure><p>Set 实例的遍历，可使用如下方法:</p><ul><li>keys()：返回键名的遍历器。</li><li>values()：返回键值的遍历器。由于 Set 结构的键名和键值是同一个值，所以 keys()和 values()返回结果一致。</li><li>entries()：返回键值对的遍历器。</li><li>forEach()：使用回调函数遍历每个成员。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;bbb&#x27;</span>, <span class="string">&#x27;ccc&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set.<span class="title function_">keys</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// aaa</span></span><br><span class="line"><span class="comment">// bbb</span></span><br><span class="line"><span class="comment">// ccc</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set.<span class="title function_">values</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// aaa</span></span><br><span class="line"><span class="comment">// bbb</span></span><br><span class="line"><span class="comment">// ccc</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set.<span class="title function_">entries</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [&quot;aaa&quot;, &quot;aaa&quot;]</span></span><br><span class="line"><span class="comment">// [&quot;bbb&quot;, &quot;bbb&quot;]</span></span><br><span class="line"><span class="comment">// [&quot;ccc&quot;, &quot;ccc&quot;]</span></span><br><span class="line"></span><br><span class="line">set.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value, key</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(key + <span class="string">&#x27; : &#x27;</span> + value));</span><br><span class="line"><span class="comment">// aaa : aaa</span></span><br><span class="line"><span class="comment">// bbb : bbb</span></span><br><span class="line"><span class="comment">// ccc : ccc</span></span><br></pre></td></tr></table></figure><p><code>Map</code></p><p>Map 的用法和普通对象基本一致，但它能用非字符串或者数字作为 key。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">p</span>: <span class="string">&#x27;Hello World&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line">map.<span class="title function_">set</span>(obj, <span class="string">&#x27;OK&#x27;</span>);</span><br><span class="line">map.<span class="title function_">get</span>(obj); <span class="comment">// &quot;OK&quot;</span></span><br><span class="line"></span><br><span class="line">map.<span class="title function_">has</span>(obj); <span class="comment">// true</span></span><br><span class="line">map.<span class="title function_">delete</span>(obj); <span class="comment">// true</span></span><br><span class="line">map.<span class="title function_">has</span>(obj); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>Map 实例的属性和方法如下：</p><ul><li>size：获取成员的数量</li><li>set：设置成员 key 和 value</li><li>get：获取成员属性值</li><li>has：判断成员是否存在</li><li>delete：删除成员</li><li>clear：清空所有</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;aaa&#x27;</span>, <span class="number">100</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;bbb&#x27;</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">map.<span class="property">size</span>; <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">map.<span class="title function_">get</span>(<span class="string">&#x27;aaa&#x27;</span>); <span class="comment">// 100</span></span><br><span class="line"></span><br><span class="line">map.<span class="title function_">has</span>(<span class="string">&#x27;aaa&#x27;</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">map.<span class="title function_">delete</span>(<span class="string">&#x27;aaa&#x27;</span>);</span><br><span class="line">map.<span class="title function_">has</span>(<span class="string">&#x27;aaa&#x27;</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">map.<span class="title function_">clear</span>();</span><br></pre></td></tr></table></figure><p>Map 实例的遍历方法有：</p><ul><li>keys()：返回键名的遍历器。</li><li>values()：返回键值的遍历器。</li><li>entries()：返回所有成员的遍历器。</li><li>forEach()：遍历 Map 的所有成员。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;aaa&#x27;</span>, <span class="number">100</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;bbb&#x27;</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> map.<span class="title function_">keys</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;aaa&quot;</span></span><br><span class="line"><span class="comment">// &quot;bbb&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> map.<span class="title function_">values</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 100</span></span><br><span class="line"><span class="comment">// 200</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> map.<span class="title function_">entries</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item[<span class="number">0</span>], item[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// aaa 100</span></span><br><span class="line"><span class="comment">// bbb 200</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map.<span class="title function_">entries</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// aaa 100</span></span><br><span class="line"><span class="comment">// bbb 200</span></span><br></pre></td></tr></table></figure><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>Promise 是 CommonJS 提出来的这一种规范，有多个版本，在 ES6 当中已经纳入规范，原生支持 Promise 对象。非 ES6 环境可以用类似 Bluebird、Q 这类库来支持。</p><p>Promise 可以将回调变成链式调用写法，流程更加清晰，代码更加优雅。</p><p>简单归纳下 Promise：三个状态、两个过程、一个方法，快速记忆方法：3-2-1</p><ul><li><p>三个状态：pending、fulfilled、rejected</p></li><li><p>两个过程：</p><ul><li>pending → fulfilled（resolve）</li><li>pending → rejected（reject）</li></ul></li><li><p>一个方法：then</p></li></ul><p>Promise 的其他概念，如 catch、 Promise.all&#x2F;race。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;文章结构&quot;&gt;&lt;a href=&quot;#文章结构&quot; class=&quot;headerlink&quot; title=&quot;文章结构&quot;&gt;&lt;/a&gt;文章结构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;箭头函数&lt;/li&gt;
&lt;li&gt;module&lt;/li&gt;
&lt;li&gt;class&lt;/li&gt;
&lt;li&gt;Set 和 Map&lt;/</summary>
      
    
    
    
    <category term="javascript学习笔记" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/categories/javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>BOM和DOM</title>
    <link href="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/642b76098012/"/>
    <id>https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/642b76098012/</id>
    <published>2021-02-07T01:39:34.000Z</published>
    <updated>2023-08-11T01:47:47.439Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章结构"><a href="#文章结构" class="headerlink" title="文章结构"></a>文章结构</h2><ul><li>BOM</li><li>DOM<ul><li>获取 DOM 节点</li><li>property 和 attribute</li><li>DOM 树操作</li></ul></li></ul><hr><h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><p>BOM 即<strong>浏览器对象模型</strong>，浏览器页面初始化时，会在内存中创建一个全局对象，用来描述浏览器和当前窗口的一些属性与状态。例如：</p><ul><li>navigator 包含浏览器的相关信息</li><li>screen 获取浏览器的宽度、高度</li><li>location 获取网址、协议、path、参数、hash 等</li><li>history 设置让浏览器跳转到哪个地址。</li></ul><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><h3 id="获取-DOM-节点"><a href="#获取-DOM-节点" class="headerlink" title="获取 DOM 节点"></a>获取 DOM 节点</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过 id 获取</span></span><br><span class="line"><span class="keyword">var</span> div1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;div1&#x27;</span>); <span class="comment">// 元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 tagname 获取</span></span><br><span class="line"><span class="keyword">var</span> divList = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;div&#x27;</span>); <span class="comment">// 集合</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(divList.<span class="property">length</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(divList[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 class 获取</span></span><br><span class="line"><span class="keyword">var</span> containerList = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;container&#x27;</span>); <span class="comment">// 集合</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 CSS 选择器获取</span></span><br><span class="line"><span class="keyword">var</span> pList = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;p&#x27;</span>); <span class="comment">// 集合</span></span><br></pre></td></tr></table></figure><h3 id="property-和-attribute"><a href="#property-和-attribute" class="headerlink" title="property 和 attribute"></a>property 和 attribute</h3><p><code>property</code></p><p>DOM 节点就是一个 js 对象，它符合之前讲过的对象的特征：<strong>可扩展属性</strong>。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pList = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> p = pList[<span class="number">0</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">style</span>.<span class="property">width</span>); <span class="comment">// 获取样式</span></span><br><span class="line">p.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&#x27;100px&#x27;</span>; <span class="comment">// 修改样式</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">className</span>); <span class="comment">// 获取 class</span></span><br><span class="line">p.<span class="property">className</span> = <span class="string">&#x27;p1&#x27;</span>; <span class="comment">// 修改 class</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 nodeName 和 nodeType</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">nodeName</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">nodeType</span>);</span><br></pre></td></tr></table></figure><p><code>attribute</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pList = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> p = pList[<span class="number">0</span>];</span><br><span class="line">p.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-name&#x27;</span>);</span><br><span class="line">p.<span class="title function_">setAttribute</span>(<span class="string">&#x27;data-name&#x27;</span>, <span class="string">&#x27;juejin&#x27;</span>);</span><br><span class="line">p.<span class="title function_">getAttribute</span>(<span class="string">&#x27;style&#x27;</span>);</span><br><span class="line">p.<span class="title function_">setAttribute</span>(<span class="string">&#x27;style&#x27;</span>, <span class="string">&#x27;font-size:30px;&#x27;</span>);</span><br></pre></td></tr></table></figure><p>property 和 attribute 两种的区别：</p><ul><li>property 的获取和操作，是直接改变 js 对象。</li><li>attribute 是直接改变 HTML 的属性（**即对 HTML 属性的<code>get</code>和<code>set</code>**）。而且，get 和 set Attribute 时，还会触发 DOM 的查询和浏览器的重绘与重排，频繁操作会影响页面性能。</li></ul><h3 id="DOM-树操作"><a href="#DOM-树操作" class="headerlink" title="DOM 树操作"></a>DOM 树操作</h3><ul><li>新增节点</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取待新增节点</span></span><br><span class="line"><span class="keyword">var</span> div1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;div1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建新增节点</span></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line">p1.<span class="property">innerHTML</span> = <span class="string">&#x27;Hello, world&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将新增节点增加至待新增节点</span></span><br><span class="line">div1.<span class="title function_">appendChild</span>(p1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移动节点 这里是移动，不是拷贝</span></span><br><span class="line"><span class="keyword">var</span> div2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;div2&#x27;</span>);</span><br><span class="line">div1.<span class="title function_">appendChild</span>(div2);</span><br></pre></td></tr></table></figure><ul><li>获取父元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取待新增节点</span></span><br><span class="line"><span class="keyword">var</span> div1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;div1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> parent = div1.<span class="property">parentelement</span>;</span><br></pre></td></tr></table></figure><ul><li>获取子元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取待新增节点</span></span><br><span class="line"><span class="keyword">var</span> div1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;div1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child = div1.<span class="property">childNodes</span>;</span><br></pre></td></tr></table></figure><ul><li>删除节点</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取待新增节点</span></span><br><span class="line"><span class="keyword">var</span> div1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;div1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child = div1.<span class="property">childNodes</span>;</span><br><span class="line"><span class="keyword">var</span> firstChild = child[<span class="number">0</span>];</span><br><span class="line">div1.<span class="title function_">removeChild</span>(firstChild);</span><br></pre></td></tr></table></figure><ul><li>获取前一个节点和获取后一个节点</li></ul>]]></content>
    
    
    <summary type="html">关于BOM和DOM的介绍</summary>
    
    
    
    <category term="javascript学习笔记" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/categories/javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>存储</title>
    <link href="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/51b574d733ed/"/>
    <id>https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/51b574d733ed/</id>
    <published>2021-02-07T01:39:21.000Z</published>
    <updated>2023-08-11T01:47:47.439Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章结构"><a href="#文章结构" class="headerlink" title="文章结构"></a>文章结构</h2><ul><li>Cookie</li><li>localStorage 和 sessionStroge</li></ul><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>Cookie 本身不是用来做服务器端存储的，它是设计用来在服务器和客户端进行信息传递的，因此我们的每个 HTTP 请求都带着 Cookie。但是 Cookie 也具备浏览器端存储的能力（例如记住用户名和密码）。</p><p>使用 Cookie 的缺点：</p><ul><li>存储量太小，只有 4kb。</li><li>所有 HTTP 请求都带着，会影响获取资源的效率。</li><li>API 简单，需要封装才能使用。</li></ul><h2 id="localStorage-和-sessionStorage"><a href="#localStorage-和-sessionStorage" class="headerlink" title="localStorage 和 sessionStorage"></a>localStorage 和 sessionStorage</h2><p>HTML5 标准就带来了 sessionStorage 和 localStorage，它们是专门为了浏览器端缓存而设计的。其优点有：</p><ul><li>存储量增大到 5MB。</li><li>不会带到 HTTP 请求中。</li><li>API 适用于数据存储。<code>localStorage.setItem(key, value)</code>和<code>localStorage.getItem(key)</code></li></ul><p>sessionStorage 和 localStorage 的区别在于它是根据 session 过期时间实现，而 localStorage 会永久有效，应用场景不同。例如，一些需要及时失效的重要信息放在 sessionStorage 中，一些不重要但是不经常设置的信息，放在 localStorage 中。</p><blockquote><p>注意：针对 localStorage.setItem，使用时尽量加入到 try-catch 中，某些浏览器是禁用这个 API 的。</p></blockquote>]]></content>
    
    
    <summary type="html">javascript 中存储的介绍</summary>
    
    
    
    <category term="javascript学习笔记" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/categories/javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Ajax</title>
    <link href="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/743a102d36ee/"/>
    <id>https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/743a102d36ee/</id>
    <published>2021-02-07T01:39:14.000Z</published>
    <updated>2023-08-11T01:47:47.439Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章结构"><a href="#文章结构" class="headerlink" title="文章结构"></a>文章结构</h2><ul><li>手写实现 XMLHttpRequest<ul><li>状态码说明<ul><li><code>xhr.readyState</code>中的状态码说明</li><li><code>xhr.status</code>中的状态码说明</li></ul></li></ul></li><li>Fetch API</li><li>跨域<ul><li>跨域</li><li>解决跨域<ul><li><code>JSONP</code></li><li>服务器设置 http header</li></ul></li></ul></li></ul><hr><h2 id="手写实现-XMLHttpRequest"><a href="#手写实现-XMLHttpRequest" class="headerlink" title="手写实现 XMLHttpRequest"></a>手写实现 XMLHttpRequest</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;/api&#x27;</span>, <span class="literal">false</span>);</span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><h3 id="状态码说明"><a href="#状态码说明" class="headerlink" title="状态码说明"></a>状态码说明</h3><p>上述代码中，两处涉及到了状态码。分别是:</p><ul><li><code>xhr.readyState</code>是浏览器判断请求过程各个阶段。</li><li><code>xhr.status</code>是 http 协议中规定的不同结果的返回状态说明</li></ul><h4 id="xhr-readyState中的状态码说明"><a href="#xhr-readyState中的状态码说明" class="headerlink" title="xhr.readyState中的状态码说明"></a><code>xhr.readyState</code>中的状态码说明</h4><ul><li>0 —— 代理被创建，但未调用 open()方法</li><li>1 —— open()方法已经被调用</li><li>2 —— send()方法已经被调用，并且头部和状态已经可以获得。</li><li>3 —— 下载中，并且 responseText 中已经包含部分数据。</li><li>4 —— 下载完成</li></ul><h4 id="http-协议中规定的不同结果的返回状态说明"><a href="#http-协议中规定的不同结果的返回状态说明" class="headerlink" title="http 协议中规定的不同结果的返回状态说明"></a>http 协议中规定的不同结果的返回状态说明</h4><p><code>xhr.status</code>中的状态码,有 2**,300**,4**,5**这几种。常见的有以下这几种：</p><ul><li>200 正常</li><li>404 未找到资源</li><li>5** 服务器出错了</li></ul><h2 id="Fetch-API"><a href="#Fetch-API" class="headerlink" title="Fetch API"></a>Fetch API</h2><p>目前已经有一个获取 HTTP 请求更加方便的 API：Fetch，通过 Fetch 提供的 fetch()这个全局函数方法可以很<strong>简单地发起异步请求，并且支持 Promise 的回调</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;some/api/data.json&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>, <span class="comment">// 请求类型 GET、POST</span></span><br><span class="line">  <span class="attr">headers</span>: &#123;&#125;, <span class="comment">// 请求的头信息，形式为 Headers 对象或 ByteString</span></span><br><span class="line">  <span class="attr">body</span>: &#123;&#125;, <span class="comment">// 请求发送的数据 blob、BufferSource、FormData、URLSearchParams（get 或head 方法中不能包含 body）</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 请求的模式，是否跨域等，如 cors、 no-cors 或 same-origin</span></span><br><span class="line">  <span class="attr">credentials</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// cookie 的跨域策略，如 omit、same-origin 或 include</span></span><br><span class="line">  <span class="attr">cache</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 请求的 cache 模式: default、no-store、reload、no-cache、 force-cache 或 only-if-cached</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">response</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><h3 id="跨域-1"><a href="#跨域-1" class="headerlink" title="跨域"></a>跨域</h3><p>浏览器有<strong>同源策略</strong>，即一个域下的页面，无法通过 Ajax 请求获取到其他域的接口。</p><p>在 url 中，只要<strong>协议、域名、端口</strong>不同都算做跨域。</p><p>但是在 HTML 中有三个标签能逃避同源策略，他们分别是<code>&lt;script&gt;</code>、<code>&lt;link&gt;</code>、<code>&lt;img&gt;</code>,这三个标签的<code>src\href</code>可以加载其他域的资源。</p><ul><li><code>&lt;img&gt;</code>可以做打点统计。</li><li><code>&lt;script&gt;</code>和<code>&lt;link&gt;</code>可以使用 CDN，CDN 基本都是其他域的链接。</li><li>另外<code>&lt;script&gt;</code>还可以实现 JSONP，能获取其他域接口的信息</li></ul><blockquote><p>请注意，所有的跨域请求方式，最终都需要信息提供方来做出相应的支持和改动，也就是要经过信息提供方的同意才行，否则接收方是无法得到它们的信息的，浏览器是不允许的。</p></blockquote><h3 id="解决跨域"><a href="#解决跨域" class="headerlink" title="解决跨域"></a>解决跨域</h3><h4 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a><code>JSONP</code></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">JSONP</span>(<span class="params">url, cb</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">  script.<span class="property">type</span> = <span class="string">&#x27;text/javascript&#x27;</span>;</span><br><span class="line">  script.<span class="property">src</span> = <span class="string">`<span class="subst">$&#123;url&#125;</span>?callback=<span class="subst">$&#123;cb&#125;</span>`</span>;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;head&#x27;</span>).<span class="title function_">appendChild</span>(script);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dealData1</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是getData1的回调:&#x27;</span> + data.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">JSON</span>P(<span class="string">&#x27;api.ytpblog.com/api/v1/xxx&#x27;</span>, <span class="string">&#x27;dealData1&#x27;</span>); <span class="comment">// www.somewhere.com/getdata1?callback=dealData1</span></span><br></pre></td></tr></table></figure><h4 id="服务器设置-http-header"><a href="#服务器设置-http-header" class="headerlink" title="服务器设置 http header"></a>服务器设置 http header</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;http://api.ytpblog.com/&#x27;</span>); <span class="comment">// 第二个参数填写允许跨域的域名称，不建议直接写 &quot;*&quot;</span></span><br><span class="line">response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;X-Requested-With&#x27;</span>);</span><br><span class="line">response.<span class="title function_">setHeader</span>(</span><br><span class="line">  <span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;PUT,POST,GET,DELETE,OPTIONS&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收跨域的cookie</span></span><br><span class="line">response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span>, <span class="string">&#x27;true&#x27;</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">javascript 中ajax的介绍。</summary>
    
    
    
    <category term="javascript学习笔记" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/categories/javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>事件</title>
    <link href="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/15b674d794e6/"/>
    <id>https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/15b674d794e6/</id>
    <published>2021-02-07T01:39:05.000Z</published>
    <updated>2023-08-11T01:47:47.439Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章结构"><a href="#文章结构" class="headerlink" title="文章结构"></a>文章结构</h2><ul><li>事件绑定</li><li>事件冒泡</li><li>事件代理(事件委托)</li></ul><h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><p>普通的事件绑定方式如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;div1&#x27;</span>);</span><br><span class="line"></span><br><span class="line">div1.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="comment">// e.preventDefault() 阻止默认行为</span></span><br><span class="line">  <span class="comment">// e.stopPropagation() 阻止事件冒泡</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;clicked&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>可以对上述事件绑定编写一个更通用的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bindEvent</span>(<span class="params">el, event, fn</span>) &#123;</span><br><span class="line">  el.<span class="title function_">addEventListener</span>(event, fn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用该方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;div1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">bindEvent</span>(div1, <span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;clicked&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h2><p>在 DOM 树上绑定的事件，会沿着 DOM 结构冒泡，从下到上挨个(直到 body)执行。使用 e.stopProgapation()可以阻止事件冒泡。</p><h2 id="事件代理-事件委托"><a href="#事件代理-事件委托" class="headerlink" title="事件代理(事件委托)"></a>事件代理(事件委托)</h2><p>应该添加到子元素上的事件，添加到了父元素上。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>a1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>a2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>a3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>a4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点击增加一个 a 标签&lt;/butto</span><br></pre></td></tr></table></figure><p>这里，一个<code>&lt;div&gt;</code>中包含很多个<code>&lt;a&gt;</code>，并且将来还有可能继续添加<code>&lt;a&gt;</code>。那么怎么快速方便地给<code>&lt;a&gt;</code>添加事件呢?</p><p>这里我们就可以采用事件代理的方式，监听<code>&lt;a&gt;</code>上的事件，但把具体的事件绑定到<code>&lt;div&gt;</code>上。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;div1&#x27;</span>);</span><br><span class="line"></span><br><span class="line">div1.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> target = e.<span class="property">target</span>;</span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">nodeName</span> === <span class="string">&#x27;A&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(target.<span class="property">innerHtml</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>再完善一下之前封装得方法，让它支持事件代理：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bindEvent</span>(<span class="params">el, event, selector, fn</span>) &#123;</span><br><span class="line">  <span class="comment">// 这样处理，可接收两种调用方式 bindEvent(div1, &#x27;click&#x27;, &#x27;a&#x27;, function () &#123;...&#125;) 和 bindEvent(div1, &#x27;click&#x27;, function () &#123;...&#125;)</span></span><br><span class="line">  <span class="keyword">if</span> (fn == <span class="literal">null</span>) &#123;</span><br><span class="line">    fn = selector;</span><br><span class="line">    selector = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 绑定事件</span></span><br><span class="line">  el.<span class="title function_">addEventListener</span>(event, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> target;</span><br><span class="line">    <span class="keyword">if</span> (selector) &#123;</span><br><span class="line">      <span class="comment">// 有 selector 说明需要事件代理</span></span><br><span class="line">      <span class="comment">// 获取触发事件的元素，即 e.target</span></span><br><span class="line">      target = e.<span class="property">target</span>;</span><br><span class="line">      <span class="comment">// 看是否符合 selector 这个条件</span></span><br><span class="line">      <span class="keyword">if</span> (target.<span class="title function_">match</span>(selector)) &#123;</span><br><span class="line">        <span class="comment">// call方法主要作用是改变函数的上下文同时执行构造方法，第一个参数是对应的上下文对象。例如：fn.call(&#123;a: 100&#125;)就是把fn的this指向&#123;a: 100&#125;</span></span><br><span class="line">        fn.<span class="title function_">call</span>(target, e);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 无 selector 则不需要事件代理</span></span><br><span class="line">      <span class="title function_">fn</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改进之前的绑定代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;div1&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> a1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;a1&#x27;</span>);</span><br><span class="line"><span class="comment">// 事件绑定</span></span><br><span class="line"><span class="title function_">bindEvent</span>(div1, <span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a1.<span class="property">innerHTML</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 事件代理</span></span><br><span class="line"><span class="title function_">bindEvent</span>(div1, <span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">innerHTML</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用事件代理的优点：</p><ul><li>代码看起来更简洁</li><li>减少浏览器的内存占用</li></ul>]]></content>
    
    
    <summary type="html">JavaScript 中事件的介绍</summary>
    
    
    
    <category term="javascript学习笔记" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/categories/javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>那些很燃的文言文</title>
    <link href="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/cefe4cc0f1a7/"/>
    <id>https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/cefe4cc0f1a7/</id>
    <published>2021-02-04T16:02:05.000Z</published>
    <updated>2023-08-11T01:47:47.443Z</updated>
    
    <content type="html"><![CDATA[<h1 id="那些很燃的文言文"><a href="#那些很燃的文言文" class="headerlink" title="那些很燃的文言文"></a>那些很燃的文言文</h1><blockquote><p>红日初升，其道大光。河出伏流，一泻汪洋。</p></blockquote><h2 id="《中华世纪坛序》"><a href="#《中华世纪坛序》" class="headerlink" title="《中华世纪坛序》"></a>《中华世纪坛序》</h2><p><span style="font-size: 16px">时间：1999 年&nbsp;&nbsp;&nbsp;&nbsp;作者：朱相远</span></p><p>大风<ruby>泱泱<rt>yāng yāng</rt></ruby>，大潮<ruby>滂滂<rt>pāng pāng</rt></ruby>。洪水图腾蛟龙，烈火<ruby>涅槃<rt>niè pán</rt></ruby>凤凰。<strong>文明圣火，千古未绝者，唯我无双</strong>；和天地并存，与日月同光。</p><p>中华文化，源远流长；博大精深，卓越辉煌。信步三百米<ruby>甬<rt>yǒng</rt></ruby>道，阅历五千年沧桑。社稷千秋，祖宗百世，几多荣辱沉浮，几度盛衰兴亡。圣贤典籍，浩如烟海；四大发明，<ruby>寰<rt>huán</rt></ruby>球共享。缅怀漫漫岁月，凝聚缕缕遐想。</p><p>回首近代，百年三万六千日，饱尝民族苦难，历尽变革风霜。烽火硝烟，江山激昂。挽狂澜于既倒，撑大厦于断梁。春风又绿神州，华夏再沐朝阳。</p><p>登坛远望：前有古人，星光灿烂；后有来者，群英堂堂。看乾坤旋转：乾恒动，自强不息之精神；坤包容，厚德载物之气量。继往开来，浩浩荡荡。立民主，兴文明，求统一，图富强。中华民族伟大复兴，定将舒天昭晖，磅礴东方。</p><p>世纪交汇，万众景仰；共<ruby>襄<rt>xiāng</rt></ruby>盛举，建坛流芳；昭示后代，永世莫忘。</p><blockquote><p>歌颂中华世纪坛的辞赋作品，包括两赋一序。此文选的是朱相远创作的序。此序之所以作为本篇收藏的文言文之首，是因为其高度概括了中华文明五千年的历史变迁、告诉了中华文明在人类文明舞台所扮演的角色，让读者读后有强烈的现实感。</p></blockquote><h2 id="《以香港今日之祸敬告天下洪门昆仲书》"><a href="#《以香港今日之祸敬告天下洪门昆仲书》" class="headerlink" title="《以香港今日之祸敬告天下洪门昆仲书》"></a>《以香港今日之祸敬告天下洪门昆仲书》</h2><p><strong>洪门昆仲共鉴：</strong></p><p>港岛乱祸，历时数十日仍未平复，且呈愈演愈烈之势，因港岛乃我近代洪门发祥之地，遗存、传承及新设山、堂组织之多，云集昆仲之众均为世界各地之最，故此，以洪门中华民族致公文化总会之名值此乱局告谕天下洪门昆仲知。</p><p>港岛素来偏隅中华南海，因满清孱弱租于大英帝国，以用船坞之途，历经百余年，倾我中华儿女之血泪，方有今日之香港。晚清时际，我洪门先烈以港岛为基地，沥血数代，终于辛亥年，驱除鞑虏复我中华，今日香港洪门之昆仲，皆乃当时之遗存，更应秉当时之遗志。若今日之港岛有宵小以修例为名，行港独之实，更有甚者，复举港英之旗，此举乃天下洪门昆仲所断不能容，港英之旗乃应满清之约而生，树港英之旗实则复满清之约，此举若成，置我洪门先烈骨血于何地，此独若立，置我华夏传承于何地？若以修例知名独港岛，则此后我中华处处皆可独，若以港英之旗复满清之约，则昔日列强不平等条约皆可复，看似港人之力争自主，实则当年未如愿诸列强吞噬我中华之心不死，殖民主义死灰复燃，值此为难之时，何以不举洪门之力，永灭此辈叵测之心，故告谕港岛内之三合会、红花会、同盟会、哥佬会、洪门会、和胜和等社团严格御下，不得组织参与任何祸乱港岛的集会或其他行动，若有参与者，为天下洪门昆仲所不齿，为天下华夏儿女所不齿，如有参与其间，甚至残害同胞，则为天下洪门所共诛之！更应各尽所能，以各社团之力，力促港岛稳定和谐，引导大众以和平方式各请其愿，更呼吁港岛外秉洪门致公之名，各党、团、山、堂组织，以我洪门先烈遗志为念，支援港岛，保境安民！</p><p>江湖事小，民族义大，摒除恩怨、共笃信念，方不辱没各昆仲洪门之名。江湖路远义字先，唯秉此志克难坚。他朝相逢黄泉路，予君血骨换酒钱。</p><p>中华儿女数以十几亿计，华夏骨血数以十几亿计，因地制宜，各有诉求，焉能一语而同之，若皆以暴乱之行，各尽其表，国将不国，族将不族。在此，洪门亦恳请香港民众，拳拳爱国，爱港之心，莫为叵测之辈所趁，以和平之举求和平之境，以合法之行为求法治之香港。</p><p>此致，天下洪门昆仲。</p><p style="text-align: right;">洪门·中华民族致公文化总会</p><p style="text-align: right;">二零一九年七月二十二日</p><blockquote><p>香港之祸乱，每每想起，仍痛心疾首。敌寇亡我中华之心不死，以此檄文激励我广大洪门昆仲，以拳拳爱国之心，护我民族之大义！</p></blockquote><p>（未完待更）</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>知乎热门提问：<a href="https://www.zhihu.com/question/298238543">有哪些很燃的文言文？</a></li></ul>]]></content>
    
    
    <summary type="html">本文用于收录自己喜欢的一些很燃的文言文，以传播知识为用。</summary>
    
    
    
    <category term="心情杂货" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/categories/%E5%BF%83%E6%83%85%E6%9D%82%E8%B4%A7/"/>
    
    
    <category term="文言文" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/tags/%E6%96%87%E8%A8%80%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>原型与原型链</title>
    <link href="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/add8faf32e4b/"/>
    <id>https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/add8faf32e4b/</id>
    <published>2021-01-26T14:40:37.000Z</published>
    <updated>2023-08-11T01:47:47.439Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章结构"><a href="#文章结构" class="headerlink" title="文章结构"></a>文章结构</h2><ul><li>原型与原型链<ul><li>原型</li><li>原型链</li><li>原型链中的 this</li></ul></li><li>作用域与闭包<ul><li>执行上下文</li><li>作用域</li><li>作用域链</li><li>闭包</li></ul></li><li>面试题</li></ul><h2 id="原型与原型链"><a href="#原型与原型链" class="headerlink" title="原型与原型链"></a>原型与原型链</h2><p>下面几条必须记住：</p><ul><li>所有的引用类型（数组，函数，对象），都具有对象特性，即可以自由扩展属性。</li><li>所有的引用类型（数组，函数，对象），都具有<strong>proto</strong>，其值是一个对象。</li><li>所有的函数，都具有 prototype，其值是一个对象。</li><li>所有的引用类型（数组，函数，对象），其<strong>proto</strong>属性都指向它的构造函数的 prototype 属性值。即：<code>obj.__proto__ === Object.prototype</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 要点一：自由扩展属性</span><br><span class="line">var obj = &#123;&#125;; obj.a = 100;</span><br><span class="line">var arr = []; arr.a = 100;</span><br><span class="line">function fn () &#123;&#125;</span><br><span class="line">fn.a = 100;</span><br><span class="line"></span><br><span class="line">// 要点二：__proto__</span><br><span class="line">console.log(obj.__proto__);</span><br><span class="line">console.log(arr.__proto__);</span><br><span class="line">console.log(fn.__proto__);</span><br><span class="line"></span><br><span class="line">// 要点三：函数有 prototype</span><br><span class="line">console.log(fn.prototype)</span><br><span class="line"></span><br><span class="line">// 要点四：引用类型的 __proto__ 属性值指向它的构造函数的 prototype 属性值</span><br><span class="line">console.log(obj.__proto__ === Object.prototype)</span><br></pre></td></tr></table></figure><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><p>当试图找到一个对象的某个属性时，如果该对象没有这个属性，那么就会到它的<strong>proto</strong>（即它的构造函数的 prototype）去寻找。如果它的<strong>proto</strong>还是没有则继续在 f.<strong>proto</strong>.<strong>proto</strong>（也即 F.prototype.<strong>proto</strong>）上寻找。如果直到最上层也没有找到，则返回<strong>undefined</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 构造函数</span><br><span class="line">function Foo(name, age) &#123;</span><br><span class="line">    this.name = name</span><br><span class="line">&#125;</span><br><span class="line">Foo.prototype.alertName = function () &#123;</span><br><span class="line">    alert(this.name)</span><br><span class="line">&#125;</span><br><span class="line">// 创建示例</span><br><span class="line">var f = new Foo(&#x27;zhangsan&#x27;)</span><br><span class="line">// 测试</span><br><span class="line">f.alertName()</span><br></pre></td></tr></table></figure><p>执行 f.alertName()时，因为该对象没有 alertName()方法，所以就会到它的<strong>proto</strong>（即 Foo.prototype）上去寻找。此时找到了，调用该原型链上的 alertName()方法。没有找到则继续查找。</p><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>上述找的过程，是一个链式的结构，叫做“原型链”。所有原型链的最上层都是 null（即 Object.prototype.<strong>proto</strong> &#x3D;&#x3D;&#x3D; null）。</p><h3 id="原型链中的-this"><a href="#原型链中的-this" class="headerlink" title="原型链中的 this"></a>原型链中的 this</h3><p>所有从原型链中得到的方法，在 this 执行时，都指向了当前触发这个方法的对象。</p><h2 id="作用域与闭包"><a href="#作用域与闭包" class="headerlink" title="作用域与闭包"></a>作用域与闭包</h2><h3 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h3><ul><li><p>在一段 javsscript 脚本执行之前，要先解析代码，解析的时候，会创建一个<strong>全局执行上下文</strong>环境，先把即将执行代码中的变量和函数的声明拿出来存放在这个环境中：变量暂时赋值为 undefined,函数则声明好可以使用。这一步完成之后，才正式开始执行代码。</p></li><li><p>一个函数在调用时，会创建<strong>函数执行上下文</strong>环境，相对于全局执行上下文环境，在函数执行上下文环境中，增加了 this,arguments 和函数的参数。</p></li></ul><blockquote><p>this 在执行时才能确定其值，定义的时候不能确认。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">console.log(a)</span><br><span class="line">var a = 100</span><br><span class="line"></span><br><span class="line">fn(&#x27;zhangsan&#x27;)</span><br><span class="line">function fn(name) &#123;</span><br><span class="line">    age = 20</span><br><span class="line">    console.log(a, name, age)</span><br><span class="line">    var age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(b); // Uncaught ReferenceError: b is not defined</span><br><span class="line">b = 100;</span><br></pre></td></tr></table></figure><p>上述代码执行过程：</p><ol><li>创建全局执行上下文</li><li>申明变量 a(此时变量 a 赋值为 undefined)、函数 fn</li><li>开始执行代码: <code>console.log(a) // undefined</code>，<code>fn(&#39;zhangsan&#39;) // 100 zhangsan 20</code>，<code>console.log(b) // 报错，因为全局执行环境中没有找到关于b的申明</code></li></ol><p><code>fn(&#39;zhangsan&#39;)</code>调用时，其执行过程如下：</p><ol><li>创建一个函数执行上下文</li><li>声明变量 age(此时变量 age 赋值为 undefined)<ol><li>沿着作用域链查找变量 a,若在全局作用域中还没有找到，才会报错:<code>a is not defined</code>并停止执行程序</li><li>在 arguments（arguments 是类数组）中找到 name</li></ol></li><li>开始执行代码</li></ol><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>在 es6 之前，javascript 中没有块级作用域的概念。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (true) &#123;</span><br><span class="line">    var name = &#x27;tom&#x27;</span><br><span class="line">&#125;</span><br><span class="line">console.log(name) // tom</span><br></pre></td></tr></table></figure><p>作用域就是一个独立的地盘，让变量不会泄露、暴露出去。<strong>JS 没有块级作用域，只有全局作用域和函数作用域。</strong></p><blockquote><p>jQuery、Zepto 等库的源码，所有的代码都会放在(function(){….})()中。因为放在里面的所有变量，都不会被外泄和暴露，不会污染到外面，不会对其他的库或者 JS 脚本造成影响。这是函数作用域的一个体现。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var a = 100</span><br><span class="line">function fn() &#123;</span><br><span class="line">    var a = 200</span><br><span class="line">    console.log(&#x27;fn&#x27;, a)</span><br><span class="line">&#125;</span><br><span class="line">console.log(&#x27;global&#x27;, a)</span><br><span class="line">fn()</span><br></pre></td></tr></table></figure><p>ES6 中开始加入了块级作用域，使用<code>let</code>定义变量即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (true) &#123;</span><br><span class="line">    let name = &#x27;tom&#x27;</span><br><span class="line">&#125;</span><br><span class="line">console.log(name) // 报错，因为在全局作用域中没有name的声明。</span><br></pre></td></tr></table></figure><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><p>执行某个函数作用域中的一段代码时，当一个变量的申明没有在当前作用域中找到，会一层一层向上级查找，这一层一层的关系，就是<strong>作用域链</strong>。若在全局作用域中还没有找到，才会报错。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var a = 100</span><br><span class="line">function fn() &#123;</span><br><span class="line">    var b = 200</span><br><span class="line">    console.log(a)</span><br><span class="line">    console.log(b)</span><br><span class="line">&#125;</span><br><span class="line">fn()</span><br></pre></td></tr></table></figure><p>上述代码中，console.log(a)要得到 a 变量，但是在当前的作用域中没有定义 a 变量。像这种在当前作用域中没有定义但在作用域链中定义的变量，就是<strong>自由变量</strong>。</p><p><strong>自由变量将在作用域链中寻找，但是依据的是函数定义时候的作用域链，而不是执行时候的。</strong></p><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>闭包主要有两个执行场景：</p><ul><li>函数作为返回值返回</li><li>函数作为参数传递</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function F1() &#123;</span><br><span class="line">    var a = 100</span><br><span class="line">    return function () &#123;</span><br><span class="line">        console.log(a)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var f1 = F1()</span><br><span class="line">var a = 200</span><br><span class="line">f1() // 100</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function F1() &#123;</span><br><span class="line">    var a = 100</span><br><span class="line">    return function () &#123;</span><br><span class="line">        console.log(a)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">function F2(f1) &#123;</span><br><span class="line">    var a = 200</span><br><span class="line">    console.log(f1())</span><br><span class="line">&#125;</span><br><span class="line">var f1 = F1()</span><br><span class="line">F2(f1) // 100</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;文章结构&quot;&gt;&lt;a href=&quot;#文章结构&quot; class=&quot;headerlink&quot; title=&quot;文章结构&quot;&gt;&lt;/a&gt;文章结构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;原型与原型链&lt;ul&gt;
&lt;li&gt;原型&lt;/li&gt;
&lt;li&gt;原型链&lt;/li&gt;
&lt;li&gt;原型链中的 this&lt;/li&gt;
</summary>
      
    
    
    
    <category term="javascript学习笔记" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/categories/javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>javascript中的数据类型</title>
    <link href="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/27b2d7f8ba60/"/>
    <id>https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/27b2d7f8ba60/</id>
    <published>2021-01-16T16:00:00.000Z</published>
    <updated>2023-08-11T01:47:47.439Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章结构"><a href="#文章结构" class="headerlink" title="文章结构"></a>文章结构</h2><ul><li>数据类型<ul><li>数据类型分类</li><li>值类型与引用类型</li></ul></li><li>面试题</li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="数据类型分类"><a href="#数据类型分类" class="headerlink" title="数据类型分类"></a>数据类型分类</h3><p>最新的 ECMAScript 标准定义了 8 种数据类型，包括 7 种原始数据类型（或叫做基本数据类型）：</p><ul><li>Boolean</li><li>Number</li><li>BigInt(BigInt 类型的数字必须加<strong>n</strong>后缀)</li><li>String</li><li>Symbol</li><li>Undefined</li><li>Null</li></ul><blockquote><p>其中，<strong>Symbol</strong>和<strong>BigInt</strong>是 es6 后新增的类型。</p></blockquote><p>和 1 种引用数据类型：</p><ul><li>Object</li></ul><h3 id="值类型与引用类型"><a href="#值类型与引用类型" class="headerlink" title="值类型与引用类型"></a>值类型与引用类型</h3><ul><li>值类型：值类型包括 7 种原始数据类型，值类型是按值传递的。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">b = <span class="number">20</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 20</span></span><br></pre></td></tr></table></figure><ul><li>引用类型：引用类型是包括 Object 类型的所有，例如 Array、Date、Function。引用类型是按照共享传递的。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123; <span class="attr">x</span>: <span class="number">10</span>, <span class="attr">y</span>: <span class="number">20</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">b.<span class="property">x</span> = <span class="number">100</span>;</span><br><span class="line">b.<span class="property">y</span> = <span class="number">200</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// &#123;x: 100, y: 200&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// &#123;x: 100, y: 200&#125;</span></span><br></pre></td></tr></table></figure><h2 id="面试题："><a href="#面试题：" class="headerlink" title="面试题："></a>面试题：</h2><ol><li>题目：<strong>undefined</strong>和<strong>null</strong>的区别：</li></ol><ul><li>undefined：指<strong>缺少值</strong>。当一个申明了的变量未被初始化，此时它的值就是 undefined。</li><li>null：指<strong>空值</strong>。表示此处不应该有值。</li></ul><ol start="2"><li>题目：类型判断用到哪些方法？</li></ol><ul><li>typeof</li></ul><p>typeof xxx 可以判断的类型有 boolean,number,bigint,string,symbol,undefined,function,object 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span> <span class="comment">// object 这是typeof的一个bug</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// typeof判断对象和数组时都是object</span></span><br><span class="line"><span class="keyword">typeof</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="comment">// object</span></span><br><span class="line">type &#123;<span class="attr">x</span>: <span class="number">10</span>&#125; <span class="comment">// object</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="title class_">Symbol</span>(<span class="string">&#x27;123&#x27;</span>) <span class="comment">// symbol</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="number">123n</span> <span class="comment">// bigint</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">typeof</span> test <span class="comment">// function</span></span><br></pre></td></tr></table></figure><ul><li>instanceof</li></ul><p>常用于实例和构造函数之间的判断。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>] <span class="keyword">instanceof</span> <span class="title class_">Array</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ol start="3"><li>题目：手写实现<code>typeof</code>和<code>instanceof</code>。</li></ol><p><code>typeof</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getType</span>(<span class="params">temp</span>) &#123;</span><br><span class="line">  <span class="comment">// 获取传入变量的构造函数并转换为字符串。</span></span><br><span class="line">  <span class="keyword">let</span> str = temp.<span class="property">constructor</span>.<span class="title function_">toString</span>();</span><br><span class="line">  <span class="keyword">return</span> str.<span class="title function_">splice</span>(<span class="number">9</span>, str.<span class="title function_">indexOf</span>(<span class="string">&#x27;(&#x27;</span>)).<span class="title function_">toLowerCase</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getType</span>(<span class="number">1</span>); <span class="comment">// number</span></span><br><span class="line"><span class="title function_">getType</span>(<span class="string">&#x27;123&#x27;</span>); <span class="comment">// string</span></span><br><span class="line"><span class="title function_">getType</span>(<span class="literal">false</span>); <span class="comment">// boolean</span></span><br><span class="line"><span class="title function_">getType</span>(<span class="number">123n</span>); <span class="comment">// bigint</span></span><br><span class="line"><span class="title function_">getType</span>(<span class="title class_">Symbol</span>(<span class="number">111</span>)); <span class="comment">// symbol</span></span><br><span class="line"><span class="title function_">getType</span>(<span class="literal">null</span>); <span class="comment">// Cannot read property &#x27;constructor&#x27; of undefined</span></span><br><span class="line"><span class="title function_">getType</span>(<span class="literal">undefined</span>); <span class="comment">// Cannot read property &#x27;constructor&#x27; of undefined</span></span><br><span class="line"><span class="title function_">getType</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// array</span></span><br><span class="line"><span class="title function_">getType</span>(&#123; <span class="attr">x</span>: <span class="number">10</span> &#125;); <span class="comment">// object</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;文章结构&quot;&gt;&lt;a href=&quot;#文章结构&quot; class=&quot;headerlink&quot; title=&quot;文章结构&quot;&gt;&lt;/a&gt;文章结构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;数据类型&lt;ul&gt;
&lt;li&gt;数据类型分类&lt;/li&gt;
&lt;li&gt;值类型与引用类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;</summary>
      
    
    
    
    <category term="javascript学习笔记" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/categories/javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>我为什么会搭建这个博客</title>
    <link href="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/ca3b38e3ee3f/"/>
    <id>https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/ca3b38e3ee3f/</id>
    <published>2021-01-10T16:00:00.000Z</published>
    <updated>2023-08-11T01:47:47.443Z</updated>
    
    <content type="html"><![CDATA[<p>想写这篇文章很久了，但心中犹豫：在这个流量为王、各种网站和 app 层出不穷的年代，搭建自己的博客的目的是什么呢？想了很久之后我顿悟：是对博客的<strong>热爱</strong>在一次又一次鼓励我搭建他——这个虚拟地球上我小小的“家”。</p><p>说到<strong>热爱</strong>，就不得不提自己与电脑的联系。我玩电脑比较早，算到现在有十多年了。但我仍记得那时，电脑上的一切东西都对小小的我有最大的吸引力：我喜欢玩电脑游戏；也喜欢浏览各种各样的网站（还记得第一次用谷歌时，在浏览器的搜索框上敲了几下，我想看的奥特曼就马上摆在眼前，一下子就觉得搜索引擎是普天之下最牛的玩意）；但更让我着迷地是当时的 QQ 空间，可以 DIY 各种功能，什么悬浮动画、开场动画、音乐播放器等等。甚至还可以在空间里开自己的农场、牧场，然后再种一大片“奇珍异果”，养一大群“飞禽走兽”！这一切的一切，每每想起，都认为是筑起了我想搭建个人博客的原因：因为在博客里，我可以在创造属于自己的世界！</p><p>伴着对电脑的兴趣，我走过了<code>3，2，1，fight</code>的初中时代，<code>fire in the hole</code>的高中时代，<code>loktar ogar</code>的大学时代。也正因为对电脑的喜欢，在大学时我选择了<code>计算机科学与技术</code>（简称<code>计科</code>）这门专业。记得在大一上学期的时候，学校老师就开设了《网页设计与制作教程》这门课程。因为这门课，我知道了炫酷的 QQ 空间是由<code>html</code>+<code>css</code>做的了。所以这门课我学得特别仔细，上课认真听讲，下课就把书上的每个 demo 敲一遍！不等课程学完，我就搭建了一个网页来展示自己做过的一些课堂上的小 DEMO。于是，就有了下面这个网页：</p><p align="center">  <img src="https://cdn.jsdelivr.net/gh/ytppp/ytpblog-image-store/img/20210122220921.jpg" width="500"></p><p style="text-align: center; font-size: 12px; color: #ccc">(现在看起来真的惨不忍睹，但这可以说是我的第一个比较系统的网页了。哈哈，好怀念那段半晚上还在敲代码的日子)</p><p>但当时的这门课，仅仅教了<code>html</code>与<code>css</code>，<code>javascript</code>仅让我们了解。然而我早听说<code>javascript</code>是网页的灵魂，有了它一个网页才能算真正的网页，所以我的网页怎么能没有它呢？于是我利用寒假的时间，自学了<code>javascript</code>。当“网页三剑客”了解完毕之后，我前端的大门终于开启了。在当时，我多了几个兴趣：或搬起那本厚厚的《JAVASCRIPT 高级程序设计》，在图书馆啃啃啃；或敲击<code>f12</code>打开浏览器的控制台，看一些网站的界面是怎么编写的；或寻觅一些炫酷的 demo 于网上，然后自己一步一步地实现它们。就这样过了一段时间，我搭建博客的想法又起来了。于是，参照杨青老师的博客网站（<a href="https://www.yangqq.com/">青青个人博客</a>），我做了下面这个网页：</p><p align="center">  <img src="https://cdn.jsdelivr.net/gh/ytppp/ytpblog-image-store/img/20210122221816.png" width="500"></p><p style="text-align: center; font-size: 12px; color: #ccc">(因为这里找不到原来网页的代码了，但记得当时是参照这个网站仿写的，所以这里厚颜无耻地借下杨青老师网站的截图吧。)</p><p>但网页做完了我又苦恼了：像<a href="https://juejin.cn/">掘金</a>、<a href="https://github.com/ytppp">Github</a> 这类的网站是可以动态更新的，然而我的网页却总是用一尘不变的样子欢迎大家。恰在此时，一位学长告诉我：网页要想能动态更新，必须要有后端，而我现在做的呢，叫做网站前端。同时，他也推荐我用 php 语言作为网站的后端语言，用 mysql 数据库做数据存储。于是我了几个月的时间学习它们，再花了半年的时间开发博客网站并将其部署在了阿里云购买的服务器上。</p><p>记得这段时间太难熬了，从 php 语言到 sql 查询，从数据库设计到前端界面，从本地开发到服务器部署……每一处有着大把大把的知识需要去掌握，现在想起，真是笑中带泪啊！但看到网站部署上去了，我就像怀胎十月的母亲，看着自己从初中到大学都在孕育的孩子呱呱坠地。而“他”的叫声，让我第一次踏入到了虚拟地球！</p><p>但我对他却不是称职的。在随后的日子，我没有仔细地照顾他。甚至宁愿整天玩游戏，也不愿为他写一行代码，在他上面发一篇文章。直到 2019 年的下半年，凭着直觉我将那个熟悉又陌生的 ip 地址输入在了浏览器上。随着浏览器从服务器拉取 html 文本、css 文本、js 代码、图片，我的眼镜模糊了：虽然那个“丑八怪”打开速度特别慢，但只要我访问它，它会不管我做了，依然在我心中的静静守护着我。随后我重新打扮了他:</p><p align="center">  <img src="https://cdn.jsdelivr.net/gh/ytppp/ytpblog-image-store/img/20210122224909.png" width="500"></p><p>这就是现在网站截图，他是个纯静态的网站，通过解析<code>markdown</code>文本来完成文章页面的渲染。将来，我会用前端+后端的方式重塑其身，用各种各样的动态重塑其魂。让他载着虚拟地球的我，乘上电波地翅膀，远游九霄银河之外！</p><p>最后，愿大家始终不忘自己的初心，带着自己的热爱向未来出发！</p>]]></content>
    
    
    <summary type="html">很多人的博客都有一篇文章讲自己为什么要搭建自己的博客的，今天我也来说说我自己吧！</summary>
    
    
    
    <category term="心情杂货" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/categories/%E5%BF%83%E6%83%85%E6%9D%82%E8%B4%A7/"/>
    
    
    <category term="心情" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>HTML基础知识</title>
    <link href="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/3433d51e5bfe/"/>
    <id>https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/3433d51e5bfe/</id>
    <published>2021-01-07T04:20:10.000Z</published>
    <updated>2023-08-11T01:47:47.439Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h2><ul><li>CSS 选择器的权重与优先级</li><li>盒子模型</li><li>浮动 Float</li></ul><hr><h2 id="CSS-选择器的权重与优先级"><a href="#CSS-选择器的权重与优先级" class="headerlink" title="CSS 选择器的权重与优先级"></a>CSS 选择器的权重与优先级</h2><p>对于一个元素，如果存在多个选择器,那么会通过各个类选择器的权重来计算其优先级。</p><p>权重分为 4 级，分别是：</p><ol><li>代表内联样式，如 style&#x3D;”xxx”，权值为 1000；</li><li>代表 ID 选择器，如#content，权值为 100；</li><li>代表类、伪类和属性选择器，如<code>.content</code>、<code>:hover</code>、<code>[attribute]</code>，权值为 10；</li><li>代表元素选择器和伪元素选择器，如 div、p，权值为 1。</li></ol><blockquote><p>需要注意的是：通用选择器（*）、子选择器（&gt;）和相邻同胞选择器（+）并不在这四个等级中，所以他们的权值都为 0。 权重值大的选择器其优先级也高，相同权重的优先级又遵循后定义覆盖前面定义的情况。</p></blockquote><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><ul><li>盒子宽度</li></ul><p>在盒子模型中，我们设置的宽度都是内容宽度，不是整个盒子的宽度。而整个盒子的宽度是：内容宽度 + padding 宽度 + border 宽度 + margin 宽度。</p><p>为盒子指定样式<code>box-sizing:border-box</code>可以让盒子内容宽度变为：实际内容宽度 + padding 宽度 + border 宽度。这样，整个盒子的宽度就是：盒子内容宽度 + 盒子 margin 宽度。</p><ul><li>纵向 margin 重叠</li></ul><p>margin 有<strong>纵向重叠</strong>这一特性。如<code>&lt;p&gt;</code>的纵向 margin 是 16px，那么两个<code>&lt;p&gt;</code>之间纵向的距离是多少？按常理来说应该是 16 + 16 &#x3D; 32px，但是答案仍然是 16px。因为纵向的 margin 是会重叠的，如果两者不一样大的话，大的会把小的“吃掉”。</p><h2 id="浮动-Float"><a href="#浮动-Float" class="headerlink" title="浮动 Float"></a>浮动 Float</h2><ul><li>误解和误用</li></ul><p><code>float</code>被设计出来的初衷是文字环绕效果。即一个图片一段文字，图片<code>float:left</code>之后，文字会环绕图片。但是，后来大家发现结合 <code>float + div</code>可以实现之前通过 table 实现的网页布局，因此就被“误用”于网页布局了。</p><ul><li>破坏性</li></ul><p>float 会破坏父标签的原本结构，使得父标签出现了坍塌现象。导致这一现象的最根本原因在于：<strong>被设置了 float 的元素会脱离文档流</strong>。</p><ul><li>包裹性</li></ul><p>普通的 div 如果没有设置宽度，它会撑满整个屏幕。为 div 设置了 float 之后，其宽度会自动调整为包裹住内容宽度，而不是撑满整个父容器。div 设置 float 后出现包裹性的原因是为了让文字能环绕 div。</p><blockquote><p>注意，此时 div 虽然体现了包裹性，但是它的 display 样式是没有变化的，还是 display: block。</p></blockquote><ul><li>清空格</li></ul><p>这一特性的根本原因是被设置了 float 的元素会导致节点脱离文档流结构。它都不属于文档流结构了，那么它身边的什么换行、空格就都和它没了关系，它就尽量往一边靠拢，能靠多近就靠多近，这就是清空格的本质。</p><ul><li>clearfix</li></ul><p>清除浮动的方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.clearfix::after &#123;</span><br><span class="line">    content: &#x27;&#x27;;</span><br><span class="line">    display: table;</span><br><span class="line">    clear: both;</span><br><span class="line">&#125;</span><br><span class="line">.clearfix &#123;</span><br><span class="line">    zoom: 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;clearfix&quot;&gt;</span><br><span class="line">    &lt;img src=&quot;image/1.png&quot; style=&quot;float: left&quot;/&gt;</span><br><span class="line">    &lt;img src=&quot;image/2.png&quot; style=&quot;float: left&quot;/&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">HTML 一些基础知识的整理。</summary>
    
    
    
    <category term="html学习笔记" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/categories/html%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>BEM命名规范</title>
    <link href="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/a6cc427d923b/"/>
    <id>https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/a6cc427d923b/</id>
    <published>2021-01-06T16:00:00.000Z</published>
    <updated>2023-08-11T01:47:47.439Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是-BEM-命名规范？"><a href="#什么是-BEM-命名规范？" class="headerlink" title="什么是 BEM 命名规范？"></a>什么是 BEM 命名规范？</h2><p>Bem 是块（block）、元素（element）、修饰符（modifier）的简写，由 Yandex 团队提出的一种前端 CSS 命名命名约定。让你的前端代码更容易阅读和理解，更容易协作，更容易控制，更加健壮和明确，而且更加严密。</p><blockquote><p>中划线<code>-</code>: 仅作为连字符使用，表示某个块或者某个子元素的多单词之间的连接记号。</p></blockquote><blockquote><p>双下划线<code>__</code>: 用来连接块和块的子元素。</p></blockquote><blockquote><p>双中划线<code>--</code>: 用来描述一个块或者块的子元素的一种状态。</p></blockquote><h2 id="什么时候应该用-BEM-格式"><a href="#什么时候应该用-BEM-格式" class="headerlink" title="什么时候应该用 BEM 格式"></a>什么时候应该用 BEM 格式</h2><p>当需要明确关联性的模块关系时，应当使用 BEM 格式。比如只是一条公共的单独的样式，就没有使用 BEM 格式的意义：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.hide</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none <span class="meta">!important</span>; <span class="comment">/* 没必要用 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="命名实例"><a href="#命名实例" class="headerlink" title="命名实例:"></a>命名实例:</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article__body&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tag&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;article__button--primary&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;article__button--success&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="常规写法"><a href="#常规写法" class="headerlink" title="常规写法"></a>常规写法</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.xxx</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.xxx</span> <span class="selector-class">.xxx__item</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.xxx</span> <span class="selector-class">.xxx__item--current</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.xxx</span> <span class="selector-class">.xxx__item--hightlight</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.xxx</span> <span class="selector-class">.xxx__product-name</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.xxx</span> <span class="selector-class">.xxx__link</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.xxx</span> <span class="selector-class">.xxx__ming-zi-ke-yi-hen-chang</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">## 嵌套写法（需要css预处理器支持，例如scss、less等）</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.xxx__item_current</span> &#123;</span><br><span class="line">  <span class="selector-class">.xxx__link</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.xxx__item--current</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.xxx__item--hightlight</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.xxx__product-name</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.xxx__link</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.xxx__ming-zi-ke-yi-hen-chang</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 对应的HTML结构如下 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;xxx&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;xxx__item&quot;</span>&gt;</span></span><br><span class="line">    第一项</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;xxx__product-name&quot;</span>&gt;</span>我是名称<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;xxx__ming-zi-ke-yi-hen-chang&quot;</span>&gt;</span>看类名<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;xxx__link&quot;</span>&gt;</span>我是link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;xxx__item xxx__item--current&quot;</span>&gt;</span></span><br><span class="line">    第二项 且 当前选择项</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;xxx__product-name&quot;</span>&gt;</span>我是名称<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;xxx__item-link&quot;</span>&gt;</span>我是link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;xxx__item xxx__item--hightlight&quot;</span>&gt;</span></span><br><span class="line">    第三项 且 特殊高亮</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;xxx__product-name&quot;</span>&gt;</span>我是名称<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;xxx__item-link&quot;</span>&gt;</span>我是link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">一些 BEM 命名规范的介绍</summary>
    
    
    
    <category term="css学习笔记" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/categories/css%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="css" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/tags/css/"/>
    
    <category term="bem" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/tags/bem/"/>
    
  </entry>
  
  <entry>
    <title>Vue3 学习笔记</title>
    <link href="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/ec2651343da2/"/>
    <id>https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/ec2651343da2/</id>
    <published>2021-01-03T16:00:00.000Z</published>
    <updated>2023-08-11T01:47:47.443Z</updated>
    
    <content type="html"><![CDATA[<p>因为写这篇文章的时候，发现<code>vuepress</code>解析含有<code>Vue3</code>代码片段的 markdown 文档有些问题，所以我把这篇博客放<a href="https://juejin.cn/">掘金</a>上了，地址如下：</p><p><a href="https://juejin.cn/post/6914922312038875144/">Vue3 学习笔记</a></p>]]></content>
    
    
    <summary type="html">Vue3 中一些相较于 Vue2 变化与新语法的学习笔记。会一直更新。</summary>
    
    
    
    <category term="前端综合" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/categories/%E5%89%8D%E7%AB%AF%E7%BB%BC%E5%90%88/"/>
    
    
    <category term="Vue" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/tags/Vue/"/>
    
    <category term="TypeScript" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/tags/TypeScript/"/>
    
    <category term="JavaScript" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>网页回到页面指定位置的三种方式</title>
    <link href="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/00393cfea225/"/>
    <id>https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/00393cfea225/</id>
    <published>2020-12-23T16:00:00.000Z</published>
    <updated>2023-08-11T01:47:47.443Z</updated>
    
    <content type="html"><![CDATA[<p>在 web 的开发过程中，有时我们需要实现当点击一个按钮或超链接时，立刻滚动跳转到本页面中指定的位置。对此有很多的实现方式，但大体可以分为以下两类：</p><ul><li>通过 html 锚点实现</li><li>通过 js 实现<ul><li>通过 scrollTo() 实现</li><li>通过 Element.scrollIntoView()实现</li></ul></li></ul><p>今天的这篇文章，将讨论上述两类的实现原理与各自的优缺点。鉴于各种实现的 html 结构与 css 样式是共有的，所以我先将实现示例的共有的 html 结构与 css 样式列出来。</p><p>html 结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;topAnchor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list__item&quot;</span> <span class="attr">id</span>=<span class="string">&quot;top&quot;</span>&gt;</span>我是顶部<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list__item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list__item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list__item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list__item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list__item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;operation&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">      代码片段1</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;operation__back-top&quot;</span> <span class="attr">id</span>=<span class="string">&quot;backTopBtn2&quot;</span>&gt;</span></span><br><span class="line">      回到顶部</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;operation__back-top&quot;</span> <span class="attr">id</span>=<span class="string">&quot;backTopBtn3&quot;</span>&gt;</span></span><br><span class="line">      回到顶部</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css 样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  <span class="selector-class">.list</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">12vh</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: aqua;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.operation</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">120px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="通过锚点实现"><a href="#通过锚点实现" class="headerlink" title="通过锚点实现"></a>通过锚点实现</h2><p>对于这种实现方式，我们只需要在 html 结构的”代码片段 1”注释处插入以下代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#topAnchor&quot;</span>&gt;</span>回到顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者采用 js 生成 html 的方式：</p><p>先在”代码片段 1”注释处插入以下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;operation__back-top&quot;</span> <span class="attr">id</span>=<span class="string">&quot;backTopBtn1&quot;</span>&gt;</span></span><br><span class="line">  回到顶部</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再添加下面的 javascript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> backTopBtn1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;backTopBtn1&#x27;</span>);</span><br><span class="line">backTopBtn1.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> aNode = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">  aNode.<span class="property">href</span> = <span class="string">&#x27;#topAnchor&#x27;</span>;</span><br><span class="line">  e.<span class="property">target</span>.<span class="title function_">appendChild</span>(aNode);</span><br><span class="line">  aNode.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    e.<span class="title function_">stopPropagation</span>();</span><br><span class="line">  &#125;;</span><br><span class="line">  aNode.<span class="title function_">click</span>();</span><br><span class="line">  e.<span class="property">target</span>.<span class="title function_">removeChild</span>(aNode);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上述方法，在点击 a 标签或者按钮后，我们会看到页面立马跑到顶部。对于交互性要求不高的项目，这种做法没什么问题，同时不同浏览器之间的兼容性问题也不大。但如果我们的项目交互性要求高了之后就不行了，这种一下子就跑到页面顶部的交互方式会让用户觉得有些突兀。通过查询资料，可以在 style 中设置 <code>html, body &#123; scroll-behavior:smooth; &#125;</code>让过度变得比较平滑一些。但更好的解决方式还是通过 js 来实现。下面我将着重介绍通过 js 的实现方式。</p><h2 id="通过-scrollTo-实现："><a href="#通过-scrollTo-实现：" class="headerlink" title="通过 scrollTo() 实现："></a>通过 scrollTo() 实现：</h2><p>此 api 需要传递 DOM 元素相对于 window 的 left 和 top 的距离，当然它还有一个 behavior 参数，将其设置为 smooth 后，过度就会比较平滑一些。步骤如下：</p><ol><li>计算目标元素距离顶部的距离</li><li>通过事件触发</li></ol><p>实现代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> backTopBtn2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;backTopBtn2&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">TOP</span> = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;top&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> y = <span class="variable constant_">TOP</span>.<span class="property">offsetTop</span>;</span><br><span class="line">backTopBtn2.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(&#123; <span class="attr">top</span>: y, <span class="attr">left</span>: <span class="number">0</span>, <span class="attr">behavior</span>: <span class="string">&#x27;smooth&#x27;</span> &#125;); <span class="comment">// 此例子仅展示简单 demo，只考虑 top 坐标</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>相较于第一种实现方式，<code>scrollTo</code> 支持动画，使得页面跳转会更丝滑，但它对 iframe 的支持度不够。</p><h2 id="通过-Element-scrollIntoView-实现："><a href="#通过-Element-scrollIntoView-实现：" class="headerlink" title="通过 Element.scrollIntoView()实现："></a>通过 Element.scrollIntoView()实现：</h2><p>该 api 相较于上一个，节点信息更加的明确，操作方法也更加的简洁，更利于后续的维护。实现代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> backTopBtn3 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;backTopBtn3&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">TOP</span> = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;top&#x27;</span>);</span><br><span class="line">backTopBtn3.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable constant_">TOP</span>.<span class="title function_">scrollIntoView</span>(&#123; <span class="attr">behavior</span>: <span class="string">&#x27;smooth&#x27;</span> &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>从效果上来看，该 api 和 scrollTo 的作用是一致的，但是从代码结构上来说，scrollIntoView 会更加的简洁且在 iframe 中表现也很优秀，基本上被用到的频率更高。</p><p>然后，参考 eleUI 中的 backTop 组件源码，我又做了下面这个版本：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> distance = <span class="number">70</span>; <span class="comment">// 滚动条每次滚动的距离</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">up</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> start = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">gotop</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">scrollTo</span>(<span class="number">0</span>, start - distance);</span><br><span class="line">    start = start - distance;</span><br><span class="line">    <span class="keyword">if</span> (start &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="title function_">requestAnimationFrame</span>(gotop);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">requestAnimationFrame</span>(gotop);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>eleUI 中的 backTop 组件源码的实现方式是这样的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">cubic</span> = value =&gt; <span class="title class_">Math</span>.<span class="title function_">pow</span>(value, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">easeInOutCubic</span> = value =&gt; value &lt; <span class="number">0.5</span></span><br><span class="line">  ? <span class="title function_">cubic</span>(value * <span class="number">2</span>) / <span class="number">2</span></span><br><span class="line">  : <span class="number">1</span> - <span class="title function_">cubic</span>((<span class="number">1</span> - value) * <span class="number">2</span>) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">scrollToTop</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> el = <span class="variable language_">this</span>.<span class="property">el</span>; <span class="comment">// el如果是一个盒子，滚动条会在该盒子内滚动，若没被传参，则为整个页面</span></span><br><span class="line">  <span class="keyword">const</span> beginTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">  <span class="keyword">const</span> beginValue = el.<span class="property">scrollTop</span>;</span><br><span class="line">  <span class="keyword">const</span> rAF = <span class="variable language_">window</span>.<span class="property">requestAnimationFrame</span> || (<span class="function"><span class="params">func</span> =&gt;</span> <span class="built_in">setTimeout</span>(func, <span class="number">16</span>));</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">frameFunc</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> progress = (<span class="title class_">Date</span>.<span class="title function_">now</span>() - beginTime) / <span class="number">500</span>;</span><br><span class="line">    <span class="keyword">if</span> (progress &lt; <span class="number">1</span>) &#123;</span><br><span class="line">      el.<span class="property">scrollTop</span> = beginValue * (<span class="number">1</span> - <span class="title function_">easeInOutCubic</span>(progress));</span><br><span class="line">      <span class="title function_">rAF</span>(frameFunc);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      el.<span class="property">scrollTop</span> = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="title function_">rAF</span>(frameFunc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的源码中，用了一个数学曲线来搞的滚动，这样可以让无论页面内容多高，回到顶部都是差不多的时间。而我的却是写死的 70，这样界面越长，回到顶部就会花越多的时间。</p><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/scrollTo">Window.scrollTo API 文档</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView">Element.scrollIntoView API 文档</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame">requestAnimationFrame API 文档</a></li><li><a href="https://github.com/ElemeFE/element/blob/dev/packages/backtop/src/main.vue">eleUI backtop 组件源码</a></li></ul>]]></content>
    
    
    <summary type="html">网页回到页面指定位置，有很多的实现方式。在项目开发过程中灵活运用这些实现方式，会让我们的开发事半功倍。</summary>
    
    
    
    <category term="前端综合" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/categories/%E5%89%8D%E7%AB%AF%E7%BB%BC%E5%90%88/"/>
    
    
    <category term="JavaScript" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>搜索引擎使用技巧</title>
    <link href="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/6e88fc0d9a28/"/>
    <id>https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/6e88fc0d9a28/</id>
    <published>2020-05-24T03:44:19.000Z</published>
    <updated>2023-08-11T01:47:47.443Z</updated>
    
    <content type="html"><![CDATA[<h3 id="技巧-1：排除干扰项"><a href="#技巧-1：排除干扰项" class="headerlink" title="技巧 1：排除干扰项"></a>技巧 1：排除干扰项</h3><p><strong>方式</strong>：关键词 1+空格+减号+关键词 2，即 <code>关键词1 -关键词2</code></p><p><strong>功能</strong>：排除一些不想要的关键词</p><p><strong>示例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">锤子 -锤子手机</span><br></pre></td></tr></table></figure><p>示例中将在搜索结果排除与<code>锤子手机</code>相关的，只显示<code>锤子</code>本来的样子。</p><blockquote><p>经过百度搜索的测试，有的关键词能排除掉，有的并不好使</p></blockquote><h3 id="技巧-2：精确搜索"><a href="#技巧-2：精确搜索" class="headerlink" title="技巧 2：精确搜索"></a>技巧 2：精确搜索</h3><p><strong>方式</strong>：给关键词加双引号，<code>&quot;关键词&quot;</code></p><p><strong>功能</strong>：只搜索引号里的字，少一个字或者把字拆开都不行</p><p><strong>示例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;达拉不崩吧&quot;</span><br></pre></td></tr></table></figure><blockquote><p>注意是英文的双引号</p></blockquote><h3 id="技巧-3：指定网站内搜索"><a href="#技巧-3：指定网站内搜索" class="headerlink" title="技巧 3：指定网站内搜索"></a>技巧 3：指定网站内搜索</h3><p><strong>方式</strong>：<code>site:域名 关键词</code></p><p><strong>功能</strong>：只搜索指定域名的内容</p><p><strong>示例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">site:zhihu.com 前端</span><br></pre></td></tr></table></figure><p>有一些站内自带的搜索并不好用，可以尝试这个搜索技巧。</p><h3 id="技巧-4：指定文件格式"><a href="#技巧-4：指定文件格式" class="headerlink" title="技巧 4：指定文件格式"></a>技巧 4：指定文件格式</h3><p><strong>方式</strong>：<code>filetype:文件格式 关键词</code></p><p><strong>示例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filetype:avi 你懂的</span><br></pre></td></tr></table></figure><p>常见文件格式有<code>doc</code>、<code>pdf</code>、<code>ppt</code>等</p><h3 id="技巧-5：指定在标题搜索"><a href="#技巧-5：指定在标题搜索" class="headerlink" title="技巧 5：指定在标题搜索"></a>技巧 5：指定在标题搜索</h3><p><strong>方式</strong>：<code>intitle:关键词</code></p><p><strong>功能</strong>：搜索的关键词要出现在标题当中</p><h3 id="技巧-6：指定在内容中搜索"><a href="#技巧-6：指定在内容中搜索" class="headerlink" title="技巧 6：指定在内容中搜索"></a>技巧 6：指定在内容中搜索</h3><p><strong>方式</strong>：<code>intext:关键词</code>、<code>allintext:关键词1 关键词2</code>、<code>inurl:关键词2</code></p><h3 id="技巧-7：多种搜索技巧叠加使用"><a href="#技巧-7：多种搜索技巧叠加使用" class="headerlink" title="技巧 7：多种搜索技巧叠加使用"></a>技巧 7：多种搜索技巧叠加使用</h3><p><strong>示例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">site:zhihu.com 前端 intitle:js</span><br></pre></td></tr></table></figure><p>多种技巧和关键词叠加使用，中间空格隔开。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>以上搜索技巧使用的符号均是英文符号。</p>]]></content>
    
    
    <summary type="html">介绍几种可以提升搜索效率的搜索技巧，助你快速查资料。</summary>
    
    
    
    <category term="杂货摊" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/categories/%E6%9D%82%E8%B4%A7%E6%91%8A/"/>
    
    
    <category term="搜索技巧" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/tags/%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>网站</title>
    <link href="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/925772253184/"/>
    <id>https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/925772253184/</id>
    <published>2020-04-19T03:33:04.000Z</published>
    <updated>2023-08-11T01:47:47.443Z</updated>
    
    <content type="html"><![CDATA[<h1 id="个人收藏夹"><a href="#个人收藏夹" class="headerlink" title="个人收藏夹"></a>个人收藏夹</h1><p><a href="https://panjiachen.github.io/awesome-bookmarks/">一位大佬的收藏夹</a></p><p><a href="https://maliquankai.com/designnav/">码力全开资源库</a> 很全很强大，独立开发者&#x2F;设计干货&#x2F;优质利器&#x2F;工具资源…</p><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web">MDN</a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects">MDN-JS 标准内置对象</a> Web 技术权威文档</li><li><a href="https://zh.javascript.info/">现代 JavaScript 教程</a> 以最新标准为基准的 JS 教程</li><li><a href="https://wangdoc.com/javascript/">ES5 教程</a> 阮一峰的 JS 教程</li><li><a href="http://es6.ruanyifeng.com/">ES6 教程</a> 阮一峰的 ES6 教程</li><li><a href="https://wangdoc.com/bash/">Bash 脚本教程</a> 阮一峰编写</li><li><a href="https://www.ecma-international.org/">ECMA</a> ECMA 官网</li><li><a href="https://www.runoob.com/">菜鸟教程</a> 涵盖多种语言的初级教程</li><li><a href="https://cloud.tencent.com/developer/devdocs">腾讯云开发者手册</a></li></ul><h2 id="社区"><a href="#社区" class="headerlink" title="社区"></a>社区</h2><ul><li><a href="https://github.com/">Github</a> 程序员同性交友社区</li><li><a href="https://juejin.im/">掘金</a> 一个帮助开发者成长的社区</li><li><a href="https://www.jianshu.com/">简书</a> 有很多频道的创作社区</li><li><a href="https://segmentfault.com/">思否</a> 解决技术问题的社区</li><li><a href="https://stackoverflow.com/">stack overflow</a> 同上，外网的</li><li><a href="https://www.infoq.cn/topic/Front-end">InfoQ</a></li><li><a href="https://www.v2ex.com/">V2EX</a></li><li><a href="https://mo.fish/main/home/hot">鱼塘热榜</a> 划水网站，收集了很多网站，当天热门文章</li></ul><h2 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h2><ul><li><a href="http://www.ruanyifeng.com/blog/">阮一峰的网络日志</a></li><li><a href="https://www.samanthaming.com/">samanthaming</a> 对前端小知识点的总结，并为每个知识点制作精美的小卡片。</li><li><a href="https://css-tricks.com/">css-tricks</a> css 技巧文章</li><li><a href="https://lhammer.cn/You-need-to-know-css/#/zh-cn/">You-need-to-know-css</a> CSS 的各种 DEMO，很全</li><li><a href="https://animista.net/">animista</a> CSS 动画可视化工具</li></ul><h2 id="电子书"><a href="#电子书" class="headerlink" title="电子书"></a>电子书</h2><ul><li><a href="http://www.yuanchengcheng.vip/books">前端电子书收集</a></li><li><a href="https://sobooks.cc/">SoBooks</a> 免费的电子书资源网站</li></ul><h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><ul><li><a href="https://juejin.im/post/5d4d0ec651882549594e7293">灵活运用 CSS 开发技巧</a></li></ul><h2 id="科学上网"><a href="#科学上网" class="headerlink" title="科学上网"></a>科学上网</h2><ul><li><p><a href="https://www.ggfwzs.com/">谷歌 chrome 商店访问助手</a></p></li><li><p><a href="https://www.datacenterfarm.com/2549.html">谷歌云(GCP)一键搭建 V2Ray 让你畅快科学上网</a></p></li></ul><h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2><ul><li><a href="https://www.imooc.com/">慕课网</a> 实战视频教程</li><li><a href="https://www.miaov.com/">妙味课堂</a> 比较系统的前端入门视频教程</li><li><a href="https://www.icourse163.org/">中国大学 MOOC</a> 涵盖计算机、外语、心理学等专业免费课程</li><li><a href="https://www.bilibili.com/">bilibili</a> B 站，上面也有一些可供学习的免费视频</li><li><a href="http://egghead.io/">egghead</a> 质量还不错的短视频教程，外网</li></ul><h3 id="电视直播"><a href="#电视直播" class="headerlink" title="电视直播"></a>电视直播</h3><ul><li><a href="http://ivi.bupt.edu.cn/">CCTV、卫视高清直播</a></li></ul><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><ul><li><a href="https://git.io/">github 短域名服务</a></li><li><a href="https://shields.io/">shields</a> 徽章图标</li><li><a href="https://wangchujiang.com/github-rank/index.html">followers 全球排名</a></li><li><a href="https://star-history.t9t.io/">star-history</a> 展示一个项目 Stars 增长曲线</li></ul><h2 id="在线工具"><a href="#在线工具" class="headerlink" title="在线工具"></a>在线工具</h2><h3 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h3><ul><li><a href="https://caniuse.com/">Can I use</a> 查看属性和方法的兼容性</li><li><a href="https://30secondsofcode.org/">30 seconds of code</a> 收集了许多有用的代码小片段</li></ul><h3 id="代码编辑"><a href="#代码编辑" class="headerlink" title="代码编辑"></a>代码编辑</h3><ul><li><a href="https://codepen.io/">codepen</a> 在线代码编辑与演示</li><li><a href="https://codesandbox.io/">codesandbox</a> 内嵌 VSCode 的在线 IDE</li></ul><h3 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h3><ul><li><a href="https://www.iconfont.cn/">iconfont</a> 阿里巴巴矢量图标库</li><li><a href="https://undraw.co/illustrations">undraw</a> 免费的矢量插画</li><li><a href="https://icomoon.io/">icomoon</a> 矢量图标库</li><li><a href="http://cssicon.space/#/">cssicon</a> 所有的 icon 都是纯 css 画的 缺点：icon 不够多</li><li><a href="http://apps.eky.hk/css-triangle-generator/">CSS triangle generator</a> 帮你快速用 css 做出三角形</li><li><a href="http://bennettfeely.com/clippy/">clippy</a> 在线帮你使用 css clip-path 做出各种形状的图形</li><li><a href="https://picsum.photos/">Lorem Picsum</a> 提供免费的占位图</li></ul><h3 id="Emoji-表情"><a href="#Emoji-表情" class="headerlink" title="Emoji 表情"></a>Emoji 表情</h3><ul><li><a href="https://emojipedia.org/">emoji 表情</a></li><li><a href="https://www.webfx.com/tools/emoji-cheat-sheet">emoji 表情备忘录</a></li><li><a href="https://github.com/carloscuesta/gitmoji">gitmoji</a> 通过 emoji 表达 git 的操作内容<blockquote><p>windows 系统下按<kbd>Win</kbd>+<kbd>.</kbd>快速打开表情选择框</p></blockquote></li></ul><h3 id="图片压缩"><a href="#图片压缩" class="headerlink" title="图片压缩"></a>图片压缩</h3><ul><li><a href="https://tinypng.com/">tinypng 图片压缩</a> 压缩 png 很有用</li><li><a href="https://squoosh.app/">Squoosh</a> 谷歌出品在线免费图片压缩工具</li></ul><h3 id="作图"><a href="#作图" class="headerlink" title="作图"></a>作图</h3><ul><li><a href="https://www.processon.com/">processon 在线作图</a> 流程图、思维导图、原型图等</li><li><a href="https://naotu.baidu.com/">百度脑图</a> 思维导图</li></ul><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><ul><li><a href="http://css-tricks.neatbang.com/">CSS Tricks</a> CSS 技巧收集与演示</li><li><a href="https://neumorphism.io/">CSS 生成器</a></li><li><a href="https://www.colorzilla.com/gradient-editor/">CSS 渐变生成器</a></li><li><a href="https://www.html.cn/tool/css3Preview/Box-Shadow.html">CSS3-Box Shadow(阴影)</a></li><li><a href="https://cubic-bezier.com/">贝塞尔曲线生成器 </a></li><li><a href="http://www.heropatterns.com/">花纹背景生成器</a></li><li><a href="https://github.com/bansal-io/pattern.css">花纹背景-pattern.css</a></li><li><a href="https://bennettfeely.com/ztext/">3D 字体</a></li></ul><h3 id="CDN-加速"><a href="#CDN-加速" class="headerlink" title="CDN 加速"></a>CDN 加速</h3><ul><li><a href="http://www.jsdelivr.com/">jsDelivr</a> 国外的一家优秀的公共 CDN 服务提供商</li><li><a href="https://unpkg.com/">unpkg</a> cdn 服务</li></ul><h3 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h3><ul><li><a href="https://regex101.com/">正则可视化</a></li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li><a href="https://ipcmen.com/">Linux 命令手册</a></li><li><a href="https://carbon.now.sh/">代码图片生成器</a></li></ul><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><ul><li><a href="http://chuangzaoshi.com/">创造师导航</a></li><li><a href="http://hao.uisdc.com/">设计师网址导航</a></li><li><a href="https://www.remove.bg/zh">remove</a> AI 抠图，抠图算法很厉害</li><li><a href="https://www.manypixels.co/gallery/">Manypixels</a> 插画</li><li><a href="https://undraw.co/illustrations">Undraw</a> 插画</li><li><a href="https://uimovement.com/">uimovement</a> 能从这个网站找到不少动画交互的灵感</li><li><a href="https://www.awwwards.com/">awwwards</a>是一个一个专门为设计精美的网站以及富有创意的网站颁奖的网站</li><li><a href="https://dribbble.com/">dribbble</a> 经常能在上面找到很多有创意好看的 gif 或者图片</li><li><a href="https://www.behance.net/">Bēhance</a> dribbble 是设计师的微博，Bēhance 是设计师的博客</li><li><a href="https://logojoy.com/">Logojoy</a> 使用 ai 做 logo 的网站，做出来的 logo 质量还不错。</li><li><a href="http://brandmark.io/">brandmark</a> 另一个在线制作 logo 网站</li><li><a href="https://instantlogodesign.com/">instant</a> 又一个 logo 制作网站</li><li><a href="https://www.namecheap.com/logo-maker/app/">namecheap</a>又一个 logo 制作网站</li><li><a href="https://www.designevo.com/logo-maker/">logo-maker</a> 又一个 logo 制作网站 这个更简单点 就是选模板之后微调</li><li><a href="https://coolors.co/">coolors</a> 帮你在线配色的网站 你能找到不少配色灵感</li><li><a href="http://colorhunt.co/">colorhunt</a> 另一个配色网站</li><li><a href="https://uigradients.com/#SummerDog">uigradients</a> 渐变色网站</li><li><a href="https://www.designcap.com/">designcap</a> 在线海报设计</li><li><a href="https://flatuicolors.com/">Flat UI 色表</a> Flat UI 色表</li><li><a href="https://www.0to255.com/">0to255</a> 颜色梯度</li><li><a href="https://github.com/mikolajdobrucki/ikonate">Ikonate</a> 提供免费的图标 icons</li><li><a href="https://remixicon.com/">remixicon</a> 又一个提供免费图标 icons</li><li><a href="https://github.com/feathericons/feather">feather</a> 免费的 icons</li><li><a href="https://github.com/arcticicestudio/nord">nord </a> 北欧性冷淡风主题配色</li><li><a href="https://unsplash.com/">Unsplash</a> 提供免费的高清图片</li><li><a href="https://www.pexels.com/zh-cn/">Pexels</a> 提供免费的高清图片</li><li><a href="https://colorkitty.com/">colorkitty</a> 从你的图片中提取配色</li><li><a href="http://design.youzan.com/">design.youzan</a> 有赞设计原则</li></ul><h3 id="图库"><a href="#图库" class="headerlink" title="图库"></a>图库</h3><ul><li><a href="https://uigradients.com/">uigradients</a> 渐变色生成工具</li><li><a href="https://www.freepik.com/">freepik</a> banner 图库</li><li><a href="http://www.51yuansu.com/">觅元素</a>一天免费下载十张 psd</li><li><a href="https://www.gaoding.com/">搞定设计</a> 可以抠图</li><li><a href="https://www.vectorizer.io/">vectorizer</a> 真正的 png 转 svg 神器</li><li><a href="https://www.zcool.com.cn/">站酷</a></li><li><a href="https://huaban.com/">花瓣</a></li><li><a href="https://huke88.com/">虎克</a> Ps 学习教程</li><li><a href="https://themes.muffingroup.com/be/splash/">beTheme</a></li><li><a href="https://www.ui.cn/">UI 中国</a></li></ul><h2 id="有趣"><a href="#有趣" class="headerlink" title="有趣"></a>有趣</h2><ul><li><a href="https://fuun.fun/">奇趣网站收藏家</a> 收藏了很多有趣的网站</li><li><a href="http://www.baidu-x.com/">帮你百度一下</a> 可以 <a href="http://www.baidu-x.com/?q=%E5%92%8C%E8%B0%90%E6%9C%89%E7%88%B1%E5%AF%8C%E5%BC%BA">点我测试一下</a>-</li><li><a href="http://lmgtfy.com/">国际版</a> 同<code>帮我百度一下</code>-<a href="http://lmgtfy.com/?q=a">点我测试一下</a>-</li><li><a href="https://alpha.wallhaven.cc/">wallhaven</a> 壁纸网站-</li><li><a href="http://matthewrayfield.com/articles/animating-urls-with-javascript-and-emojis/#%F0%9F%8C%96">URL 地址播放 Emojis 动画</a> 在地址栏里面播放 emoji</li><li><a href="https://cantunsee.space/">Can’t Unsee</a> 强烈建议前端、客户端、UI 开发的同学玩下，检查一下自己对设计稿的敏感度怎么样</li><li><a href="https://talk.swift.gg/">ggtalk</a> 平时一直在听的一个技术博客</li><li><a href="https://github.com/Blankj/awesome-comment">awesome-comment</a> 里面收集了很多有趣的代码注释</li><li><a href="https://www.text-image.com/index.html">text-img</a> 都将图片转化为 ascii 用来写注释</li><li><a href="https://github.com/beizhedenglong/weird-fonts">weird-fonts</a> 将普通字母转化为 特殊 unicode</li><li><a href="https://github.com/epidemian/snake">snake</a> 在地址栏里面玩贪吃蛇</li><li><a href="https://github.com/yuanfux/zero-width-lib">zero-width-lib</a> 利用零宽度字符实现 隐形水印、加密信息分享、逃脱词匹配，很有创意</li><li><a href="https://www.abbreviations.com/">abbreviations</a> 查看一个简写是什么意思的网站</li><li><a href="https://magi.com/">magi</a> ai 搜索神器，超屌</li><li><a href="https://zzkia.noddl.me:8020/">诺基亚短信图片生成器</a></li></ul><h2 id="交互"><a href="#交互" class="headerlink" title="交互"></a>交互</h2><ul><li><a href="http://aliscued.lofter.com/">微交互</a> 里面收集了市面上很多很好的微交互例子 值得学习</li><li><a href="http://littlebigdetails.com/">Little Big Details</a> 同上，一个国外微交互汇集网站</li><li><a href="https://cruip.com/">cruip</a> 登录页的各种页面设计，可以免费下载模板</li><li><a href="https://comixify.ii.pw.edu.pl/">Comixify</a> 一个波兰团队做了非常好玩的工具，可以把视频自动转成漫画，上图是他们提供的 demo，效果很棒。</li><li><a href="https://github.com/bui/taiko-web">taiko-web</a> 太鼓达人网页版 只能说很 6</li></ul><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><ul><li><a href="https://egghead.io/courses/execute-npm-package-binaries-with-the-npx-package-runner">npx</a> 教你怎么合理的使用 npx</li><li><a href="https://www.hacksplaining.com/lessons">hacksplaining</a> 网络安全学习网站</li><li><a href="https://github.com/mcuking/mobile-web-best-practice">mobile-web-best-practice</a> 移动 web 最佳实践</li></ul><h2 id="产品"><a href="#产品" class="headerlink" title="产品"></a>产品</h2><ul><li><a href="http://www.pmdaniu.com/">产品大牛</a> 什么有很多完整的产品原型可以借鉴</li><li><a href="https://modao.cc/pricing">磨刀</a> 快速出 ui 原型</li></ul><h2 id="实用"><a href="#实用" class="headerlink" title="实用"></a>实用</h2><ul><li><a href="https://browser-update.org/">browser-update</a> 浏览器版本更新提示插件</li><li><a href="https://admin.typeform.com/signup">typeform</a> 一个国外的在线调查问卷网站</li><li><a href="https://www.videofk.com/">VideoFk</a> VideoFk 视频在线解析下载</li><li><a href="https://www.allhistory.com/">全历史</a> 历史内容聚合网站</li><li><a href="https://www.uzer.me/">UzerMe</a> 云端办公工具</li><li><a href="https://sobooks.cc/">SoBooks</a> 强大的电子书资源网站</li><li><a href="https://www.gaoding.com/">稿定设计</a> 键式设计工具+智能抠图</li><li><a href="https://dalipan.com/">大力盘</a> 百度网盘搜索</li><li><a href="https://www.macbl.com/app/internet/enfi">ENFI 下载器</a> 不限速下载器</li><li><a href="https://www.laihua.com/">来画视频</a> 像做 PPT 一样做短视频</li><li><a href="https://www.arkie.cn/">Arkie 海报制作工具</a></li><li><a href="http://www.ypppt.com/">优品 PPT</a></li><li><a href="http://www.tretars.com/">比格 PPT</a></li><li><a href="https://www.pexels.com/">高清免费图片</a></li><li><a href="https://unsplash.com/">高清免费图片 2</a></li></ul><h2 id="Talk"><a href="#Talk" class="headerlink" title="Talk"></a>Talk</h2><ul><li><a href="https://github.com/peerigon/talks">peerigon-talks</a> 收集了不少有意思的 talks</li></ul><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><ul><li><a href="https://github.com/azl397985856/leetcode">leetcode</a> 用 js 刷 leetcode</li></ul>]]></content>
    
    
    <summary type="html">收集一些常用的网站，正在整理中..</summary>
    
    
    
    <category term="收藏夹" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/categories/%E6%94%B6%E8%97%8F%E5%A4%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>资源</title>
    <link href="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/b06ffa7b2fa2/"/>
    <id>https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/b06ffa7b2fa2/</id>
    <published>2020-04-12T00:58:56.000Z</published>
    <updated>2023-08-11T01:47:47.443Z</updated>
    
    <content type="html"><![CDATA[<p>收集一些常用的库、插件等资源，正在整理中…</p><h2 id="前端常用"><a href="#前端常用" class="headerlink" title="前端常用"></a>前端常用</h2><blockquote><p>待整理</p></blockquote><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><ul><li><a href="https://lusaxweb.github.io/vuesax/">Vuesax</a> 一个优质的 vue 的组件库</li></ul><h2 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h2><ul><li><a href="https://github.com/ftlabs/fastclick">fastclick</a> 解决移动端点击延迟 300ms 问题</li><li><a href="https://github.com/ustbhuangyi/better-scroll">better-scroll</a> 移动端滚动插件</li></ul><h2 id="工具-插件"><a href="#工具-插件" class="headerlink" title="工具 &amp; 插件"></a>工具 &amp; 插件</h2><ul><li><a href="https://www.codota.com/">codota</a> AI 代码智能提示（应用于代码编辑器）</li></ul><h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><ul><li><a href="https://github.com/tj/commander.js">commander</a> 提供了用户命令行输入和参数解析的强大功能</li><li><a href="https://github.com/SBoudrias/Inquirer.js">inquirer</a> 与命令行进行交互</li><li><a href="https://github.com/chalk/chalk">chalk</a> 美化命令行打印样式</li></ul><h2 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h2><ul><li><a href="https://hexo.io/zh-tw/">Hexo</a> 快速、简单且强大的网志框架</li></ul><p><strong>文章</strong></p><ul><li><a href="https://blog.csdn.net/qq_41903941/article/details/90259369">跟着老司机玩转 Node 命令行</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;收集一些常用的库、插件等资源，正在整理中…&lt;/p&gt;
&lt;h2 id=&quot;前端常用&quot;&gt;&lt;a href=&quot;#前端常用&quot; class=&quot;headerlink&quot; title=&quot;前端常用&quot;&gt;&lt;/a&gt;前端常用&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;待整理&lt;/p&gt;
&lt;/blockquote</summary>
      
    
    
    
    <category term="收藏夹" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/categories/%E6%94%B6%E8%97%8F%E5%A4%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>npm packageJson属性详解</title>
    <link href="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/9a1c987b5f41/"/>
    <id>https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/9a1c987b5f41/</id>
    <published>2020-04-08T09:16:38.000Z</published>
    <updated>2023-08-11T01:47:47.443Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>package.json</code>必须是一个严格的 json 文件，而不仅仅是 js 里边的一个对象。其中很多属性可以通过<code>npm-config</code>来生成</p><h2 id="name"><a href="#name" class="headerlink" title="name"></a>name</h2><p><code>package.json</code>中最重要的属性是<code>name</code>和<code>version</code>两个属性，这两个属性是必须要有的，否则模块就无法被安装，这两个属性一起形成了一个 npm 模块的唯一标识符。模块中内容变更的同时，模块版本也应该一起变化。<br><code>name</code>属性就是你的模块名称，下面是一些命名规则:</p><ul><li><p><code>name</code>必须小于等于 214 个字节，包括前缀名称在内（如 xxx&#x2F;xxxmodule）。</p></li><li><p><code>name</code>不能以”_“或”.”开头</p></li><li><p>不能含有大写字母</p></li><li><p><code>name</code>会成为 url 的一部分，不能含有 url 非法字符</p><p>下面是官网文档的一些建议：</p></li><li><p>不要使用和 node 核心模块一样的名称</p></li><li><p><code>name</code>中不要含有”js”和”node”。 It’s assumed that it’s js, since you’re writing a package.json file, and you can specify the engine using the “engines” field. (See below.)</p></li><li><p><code>name</code>属性会成为模块 url、命令行中的一个参数或者一个文件夹名称，任何非 url 安全的字符在 name 中都不能使用，也不能以”_“或”.”开头</p></li><li><p><code>name</code>属性也许会被写在<code>require()</code>的参数中，所以最好取个简短而语义化的值。</p></li><li><p>创建一个模块前可以先到后边的网址查查<code>name</code>是否已经被占用. <a href="https://www.npmjs.com/">https://www.npmjs.com/</a></p><ul><li><pre><code class="sh"># 发布一个包的时候，需要检验某个包名是否存在npm search &lt;ModuleName&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">`name`属性可以有一些前缀如 e.g. @myorg/mypackage.在 npm-scope(7)的文档中可以看到详细说明</span><br><span class="line"></span><br><span class="line">## version</span><br><span class="line"></span><br><span class="line">`version`必须可以被 npm 依赖的一个`node-semver`模块解析。具体规则见下面的`dependencies`模块</span><br><span class="line"></span><br><span class="line">## description</span><br><span class="line"></span><br><span class="line">一个描述，方便别人了解你的模块作用，搜索的时候也有用。</span><br><span class="line"></span><br><span class="line">## keywords</span><br><span class="line"></span><br><span class="line">一个字符串数组，方便别人搜索到本模块</span><br><span class="line"></span><br><span class="line">## homepage</span><br><span class="line"></span><br><span class="line">项目主页 url</span><br><span class="line">**注意:** 这个项目主页 url 和 url 属性不同，如果你填写了 url 属性，npm 注册工具会认为你把项目发布到其他地方了，获取模块的时候不会从 npm 官方仓库获取，而是会重定向到 url 属性配置的地址。</span><br><span class="line">（原文档中用了 spit(吐)这个单词，作者表示他不是在开玩笑:）</span><br><span class="line"></span><br><span class="line">## bugs</span><br><span class="line"></span><br><span class="line">填写一个 bug 提交地址或者一个邮箱，被你的模块坑到的人可以通过这里吐槽，例如：</span><br><span class="line"></span><br><span class="line">```json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;url&quot;: &quot;https://github.com/owner/project/issues&quot;,</span><br><span class="line">  &quot;email&quot;: &quot;project@hostname.com&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><p>url 和 email 可以任意填或不填，如果只填一个，可以直接写成一个字符串而不是对象。如果填写了 url，npm bugs 命令会使用这个 url。</p><h2 id="license"><a href="#license" class="headerlink" title="license"></a>license</h2><p>你应该为你的模块制定一个协议，让用户知道他们有何权限来使用你的模块，以及使用该模块有哪些限制。最简单的，例如你用 BSD-3-Clause 或 MIT 之类的协议，如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MIT&quot;</span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>你可以在<a href="https://spdx.org/licenses/">https://spdx.org/licenses/ </a>这个地址查阅协议列表 。</p><h2 id="和用户相关的属性-author-contributors"><a href="#和用户相关的属性-author-contributors" class="headerlink" title="和用户相关的属性: author, contributors"></a>和用户相关的属性: author, contributors</h2><p><code>author</code>是一个码农， <code>contributors</code>是一个码农数组。 <code>person</code>是一个有一些描述属性的对象，如下 like this:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Barney Rubble&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;b@rubble.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://barnyrubble.tumblr.com/&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>也可以按如下格式缩写，npm 会帮着转换:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;Barney Rubble b@rubble.com (http://barnyrubble.tumblr.com/)&quot;</span><br></pre></td></tr></table></figure><p><code>email</code>和<code>url</code>属性实际上都是可以省略的。描述用户信息的还有一个<code>maintainers</code>（维护者）属性。</p><h2 id="files"><a href="#files" class="headerlink" title="files"></a>files</h2><p><code>files</code>属性的值是一个数组，内容是模块下文件名或者文件夹名，如果是文件夹名，则文件夹下所有的文件也会被包含进来（除非文件被另一些配置排除了）<br>你也可以在模块根目录下创建一个<code>.npmignore</code>文件（windows 下无法直接创建以”.”开头的文件，使用 linux 命令行工具创建如 git bash），写在这个文件里边的文件即便被写在 files 属性里边也会被排除在外，这个文件的写法”.gitignore”类似。</p><h2 id="main"><a href="#main" class="headerlink" title="main"></a>main</h2><p><code>main</code>属性指定了程序的主入口文件。意思是，如果你的模块被命名为 foo，用户安装了这个模块并通过 require(“foo”)来使用这个模块，那么 require 返回的内容就是 main 属性指定的文件中 module.exports 指向的对象。<br>它应该指向模块根目录下的一个文件。对大对数模块而言，这个属性更多的是让模块有一个主入口文件，然而很多模块并不写这个属性。</p><h2 id="bin"><a href="#bin" class="headerlink" title="bin"></a>bin</h2><p>很多模块有一个或多个需要配置到 PATH 路径下的可执行模块，npm 让这个工作变得十分简单（实际上 npm 本身也是通过 bin 属性安装为一个可执行命令的）<br>如果要用 npm 的这个功能，在 package.json 里边配置一个 bin 属性。bin 属性是一个已命令名称为 key，本地文件名称为 value 的 map 如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;bin&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;myapp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./cli.js&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>模块安装的时候，若是全局安装，则 npm 会为 bin 中配置的文件在 bin 目录下创建一个软连接（对于 windows 系统，默认会在 C:\Users\username\AppData\Roaming\npm 目录下），若是局部安装，则会在项目内的.&#x2F;node_modules&#x2F;.bin&#x2F;目录下创建一个软链接。<br>因此，按上面的例子，当你安装 myapp 的时候，npm 就会为 cli.js 在&#x2F;usr&#x2F;local&#x2F;bin&#x2F;myapp 路径创建一个软链接。<br>如果你的模块只有一个可执行文件，并且它的命令名称和模块名称一样，你可以只写一个字符串来代替上面那种配置，例如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my-program&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.2.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;bin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./path/to/program&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>作用和如下写法相同:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my-program&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.2.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;bin&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;my-program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./path/to/program&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="man"><a href="#man" class="headerlink" title="man"></a>man</h2><p>制定一个或通过数组制定一些文件来让 linux 下的 man 命令查找文档地址。<br>如果只有一个文件被指定的话，安装后直接使用 man+模块名称，而不管 man 指定的文件的实际名称。例如:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;foo&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.2.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;A packaged foo fooer for fooing foos&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;foo.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;man&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./man/doc.1&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>通过 man foo 命令会得到 .&#x2F;man&#x2F;doc.1 文件的内容。<br>如果 man 文件名称不是以模块名称开头的，安装的时候会给加上模块名称前缀。因此，下面这段配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;foo&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.2.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;A packaged foo fooer for fooing foos&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;foo.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;man&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;./man/foo.1&quot;</span><span class="punctuation">,</span> <span class="string">&quot;./man/bar.1&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>会创建一些文件来作为 man foo 和 man foo-bar 命令的结果。<br>man 文件必须以数字结尾，或者如果被压缩了，以.gz 结尾。数字表示文件将被安装到 man 的哪个部分。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;foo&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.2.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;A packaged foo fooer for fooing foos&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;foo.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;man&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;./man/foo.1&quot;</span><span class="punctuation">,</span> <span class="string">&quot;./man/foo.2&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>会创建 man foo 和 man 2 foo 两条命令。</p><h2 id="directories"><a href="#directories" class="headerlink" title="directories"></a>directories</h2><p>CommonJs 通过 directories 来制定一些方法来描述模块的结构，看看 npm 的 package.json 文件<a href="https://registry.npmjs.org/npm/latest">https://registry.npmjs.org/npm/latest</a> ，可以发现里边有这个字段的内容。<br><img src="http://zoucz.com/blogimgs/2016-02-16/1455624810992.png" alt="img"><br>目前这个配置没有任何作用，将来可能会整出一些花样来。</p><h3 id="directories-lib"><a href="#directories-lib" class="headerlink" title="directories.lib"></a>directories.lib</h3><p>告诉用户模块中 lib 目录在哪，这个配置目前没有任何作用，但是对使用模块的人来说是一个很有用的信息。</p><h3 id="directories-bin"><a href="#directories-bin" class="headerlink" title="directories.bin"></a>directories.bin</h3><p>如果你在这里指定了 bin 目录，这个配置下面的文件会被加入到 bin 路径下，如果你已经在 package.json 中配置了 bin 目录，那么这里的配置将不起任何作用。</p><h3 id="directories-man"><a href="#directories-man" class="headerlink" title="directories.man"></a>directories.man</h3><p>指定一个目录，目录里边都是 man 文件，这是一种配置 man 文件的语法糖。</p><h3 id="directories-doc"><a href="#directories-doc" class="headerlink" title="directories.doc"></a>directories.doc</h3><p>在这个目录里边放一些 markdown 文件，可能最终有一天它们会被友好的展现出来（应该是在 npm 的网站上）</p><h3 id="directories-example"><a href="#directories-example" class="headerlink" title="directories.example"></a>directories.example</h3><p>放一些示例脚本，或许某一天会有用 - -！</p><h2 id="repository"><a href="#repository" class="headerlink" title="repository"></a>repository</h2><p>指定一个代码存放地址，对想要为你的项目贡献代码的人有帮助。像这样：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;repository&quot;</span> <span class="punctuation">:</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;git&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;https://github.com/npm/npm.git&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;repository&quot;</span> <span class="punctuation">:</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;svn&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;https://v8.googlecode.com/svn/trunk/&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>若你的模块放在 GitHub, GitHub gist, Bitbucket, or GitLab 的仓库里，npm install 的时候可以使用缩写标记来完成：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;repository&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm/npm&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;repository&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gist:11081aaa281&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;repository&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bitbucket:example/repo&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;repository&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gitlab:another/repo&quot;</span></span><br></pre></td></tr></table></figure><h2 id="scripts"><a href="#scripts" class="headerlink" title="scripts"></a>scripts</h2><p>scripts 属性是一个对象，里边指定了项目的生命周期个各个环节需要执行的命令。key 是生命周期中的事件，value 是要执行的命令。<br>具体的内容有 install start stop 等，详见<a href="https://docs.npmjs.com/misc/scripts"> https://docs.npmjs.com/misc/scripts</a></p><h2 id="config"><a href="#config" class="headerlink" title="config"></a>config</h2><p>用来设置一些项目不怎么变化的项目配置，例如 port 等。<br>用户用的时候可以使用如下用法：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.createServer(...).listen(process.env.npm_package_config_port)</span><br></pre></td></tr></table></figure><p>可以通过 npm config set foo:port 80 来修改 config。详见<a href="https://docs.npmjs.com/misc/config">https://docs.npmjs.com/misc/config</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;foo&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;config&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8080&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="dependencies"><a href="#dependencies" class="headerlink" title="dependencies"></a>dependencies</h2><p>dependencies 属性是一个对象，配置模块依赖的模块列表，key 是模块名称，value 是版本范围，版本范围是一个字符，可以被一个或多个空格分割。<br>dependencies 也可以被指定为一个 git 地址或者一个压缩包地址。<br>不要把测试工具或 transpilers 写到 dependencies 中。 下面是一些写法，详见<a href="https://docs.npmjs.com/misc/semver">https://docs.npmjs.com/misc/semver</a></p><ul><li>version 精确匹配版本</li><li>&gt;version 必须大于某个版本</li><li>&gt;&#x3D;version 大于等于</li><li>&lt;version 小于</li><li>&lt;&#x3D;versionversion 小于</li><li>~version “约等于”，具体规则详见 semver 文档</li><li>^version “兼容版本”具体规则详见 semver 文档</li><li>1.2.x 仅一点二点几的版本</li><li>http:&#x2F;&#x2F;… 见下面 url 作为 denpendencies 的说明</li><li><ul><li>任何版本</li></ul></li><li>“” 空字符，和*相同</li><li>version1 - version2 相当于 &gt;&#x3D;version1 &lt;&#x3D;version2.</li><li>range1 || range2 范围 1 和范围 2 满足任意一个都行</li><li>git… 见下面 git url 作为 denpendencies 的说明</li><li>user&#x2F;repo See 见下面 GitHub 仓库的说明</li><li>tag 发布的一个特殊的标签，见 npm-tag 的文档 <a href="https://docs.npmjs.com/getting-started/using-tags">https://docs.npmjs.com/getting-started/using-tags</a></li><li>path&#x2F;path&#x2F;path 见下面本地模块的说明<br>下面的写法都是可以的:</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;foo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0 - 2.9999.9999&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;bar&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&gt;=1.0.2 &lt;2.1.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;baz&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&gt;1.0.2 &lt;=2.3.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;boo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;qux&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;1.0.0 || &gt;=2.3.1 &lt;2.4.5 || &gt;=2.5.2 &lt;3.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;asd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://asdf.com/asdf.tar.gz&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;til&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~1.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;elf&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~1.2.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;two&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.x&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;thr&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3.3.x&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lat&quot;</span><span class="punctuation">:</span> <span class="string">&quot;latest&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dyl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;file:../dyl&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="URLs-as-Dependencies"><a href="#URLs-as-Dependencies" class="headerlink" title="URLs as Dependencies"></a>URLs as Dependencies</h2><p>在版本范围的地方可以写一个 url 指向一个压缩包，模块安装的时候会把这个压缩包下载下来安装到模块本地。</p><h2 id="Git-URLs-as-Dependencies"><a href="#Git-URLs-as-Dependencies" class="headerlink" title="Git URLs as Dependencies"></a>Git URLs as Dependencies</h2><p>Git url 可以像下面一样:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git://github.com/user/project.git#commit-ish</span><br><span class="line">git+ssh://user@hostname:project.git#commit-ish</span><br><span class="line">git+ssh://user@hostname/project.git#commit-ish</span><br><span class="line">git+http://user@hostname/project/blah.git#commit-ish</span><br><span class="line">git+https://user@hostname/project/blah.git#commit-ish</span><br></pre></td></tr></table></figure><p>commit-ish 可以是任意标签，哈希值，或者可以检出的分支，默认是 master 分支。</p><h2 id="GitHub-URLs"><a href="#GitHub-URLs" class="headerlink" title="GitHub URLs"></a>GitHub URLs</h2><p>支持 github 的 username&#x2F;modulename 的写法，#后边可以加后缀写明分支 hash 或标签：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;foo&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;express&quot;</span><span class="punctuation">:</span> <span class="string">&quot;visionmedia/express&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;mocha&quot;</span><span class="punctuation">:</span> <span class="string">&quot;visionmedia/mocha#4727d357ea&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Local-Paths"><a href="#Local-Paths" class="headerlink" title="Local Paths"></a>Local Paths</h2><p>npm2.0.0 版本以上可以提供一个本地路径来安装一个本地的模块，通过 npm install xxx –save 来安装，格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">../foo/bar</span><br><span class="line">~/foo/bar</span><br><span class="line">./foo/bar</span><br><span class="line">/foo/bar</span><br></pre></td></tr></table></figure><p>package.json 生成的相对路径如下:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;baz&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bar&quot;</span><span class="punctuation">:</span> <span class="string">&quot;file:../foo/bar&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这种属性在离线开发或者测试需要用 npm install 的情况，又不想自己搞一个 npm server 的时候有用，但是发布模块到公共仓库时不应该使用这种属性。</p><h2 id="devDependencies"><a href="#devDependencies" class="headerlink" title="devDependencies"></a>devDependencies</h2><p>如果有人想要下载并使用你的模块，也许他们并不希望或需要下载一些你在开发过程中使用的额外的测试或者文档框架。<br>在这种情况下，最好的方法是把这些依赖添加到 devDependencies 属性的对象中。<br>这些模块会在 npm link 或者 npm install 的时候被安装，也可以像其他 npm 配置一样被管理，详见 npm 的 config 文档。<br>对于一些跨平台的构建任务，例如把 CoffeeScript 编译成 JavaScript，就可以通过在 package.json 的 script 属性里边配置 prepublish 脚本来完成这个任务，然后需要依赖的 coffee-script 模块就写在 devDependencies 属性种。<br>例如:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ethopia-waza&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;a delightfully fruity coffee varietal&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.2.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;coffee-script&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~1.6.3&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;prepublish&quot;</span><span class="punctuation">:</span> <span class="string">&quot;coffee -o lib/ -c src/waza.coffee&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lib/waza.js&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>prepublish 脚本会在发布之前运行，因此用户在使用之前就不用再自己去完成编译的过程了。在开发模式下，运行 npm install 也会执行这个脚本（见 npm script 文档），因此可以很方便的调试。</p><h2 id="peerDependencies"><a href="#peerDependencies" class="headerlink" title="peerDependencies"></a>peerDependencies</h2><p>有时候做一些插件开发，比如 grunt 等工具的插件，它们往往是在 grunt 的某个版本的基础上开发的，而在他们的代码中并不会出现 require(“grunt”)这样的依赖，dependencies 配置里边也不会写上 grunt 的依赖，为了说明此模块只能作为插件跑在宿主的某个版本范围下，可以配置 peerDependencies：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tea-latte&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.3.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;peerDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;tea&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.x&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>上面这个配置确保再 npm install 的时候 tea-latte 会和 2.x 版本的 tea 一起安装，而且它们两个的依赖关系是同级的：<br>├── <a href="mailto:&#x74;&#x65;&#x61;&#45;&#108;&#x61;&#x74;&#x74;&#x65;&#64;&#x31;&#x2e;&#51;&#x2e;&#x35;">&#x74;&#x65;&#x61;&#45;&#108;&#x61;&#x74;&#x74;&#x65;&#64;&#x31;&#x2e;&#51;&#x2e;&#x35;</a><br>└── <a href="mailto:&#116;&#101;&#97;&#x40;&#50;&#46;&#x32;&#46;&#x30;">&#116;&#101;&#97;&#x40;&#50;&#46;&#x32;&#46;&#x30;</a><br>这个配置的目的是让 npm 知道，如果要使用此插件模块，请确保安装了兼容版本的宿主模块。</p><h2 id="bundledDependencies"><a href="#bundledDependencies" class="headerlink" title="bundledDependencies"></a>bundledDependencies</h2><p>上面的单词少个 d，写成 bundleDependencies 也可以。<br>指定发布的时候会被一起打包的模块。</p><h2 id="optionalDependencies"><a href="#optionalDependencies" class="headerlink" title="optionalDependencies"></a>optionalDependencies</h2><p>如果一个依赖模块可以被使用， 同时你也希望在该模块找不到或无法获取时 npm 继续运行，你可以把这个模块依赖放到 optionalDependencies 配置中。这个配置的写法和 dependencies 的写法一样，不同的是这里边写的模块安装失败不会导致 npm install 失败。<br>当然，这种模块就需要你自己在代码中处理模块确实的情况了，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> foo = <span class="built_in">require</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> fooVersion = <span class="built_in">require</span>(<span class="string">&#x27;foo/package.json&#x27;</span>).<span class="property">version</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (er) &#123;</span><br><span class="line">  foo = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_">notGoodFooVersion</span>(fooVersion)) &#123;</span><br><span class="line">  foo = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// .. then later in your program ..</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (foo) &#123;</span><br><span class="line">  foo.<span class="title function_">doFooThings</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>optionalDependencies 中的配置会覆盖 dependencies 中的配置，最好只在一个地方写。</p><h2 id="engines"><a href="#engines" class="headerlink" title="engines"></a>engines</h2><p>你可以指定项目运行的 node 版本范围，如下：<br>{ “engines” : { “node” : “&gt;&#x3D;0.10.3 &lt;0.12” } }<br>和 dependencies 一样，如果你不指定版本范围或者指定为*，任何版本的 node 都可以。<br>也可以指定一些 npm 版本可以正确的安装你的模块，例如：<br>{ “engines” : { “npm” : “~1.0.20” } }<br>要注意的是，除非你设置了 engine-strict 属性，engines 属性是仅供参考的。</p><h2 id="engineStrict"><a href="#engineStrict" class="headerlink" title="engineStrict"></a>engineStrict</h2><p>注意：这个属性已经弃用，将在 npm 3.0.0 版本干掉。</p><h2 id="os"><a href="#os" class="headerlink" title="os"></a>os</h2><p>可以指定你的模块只能在哪个操作系统上跑：<br>“os” : [ “darwin”, “linux” ]<br>也可以指定黑名单而不是白名单：<br>“os” : [ “!win32” ]<br>服务的操作系统是由 process.platform 来判断的，这个属性允许黑白名单同时存在，虽然没啥必要这样搞…</p><h2 id="cpu"><a href="#cpu" class="headerlink" title="cpu"></a>cpu</h2><p>限制模块只能在某某 cpu 架构下运行<br>“cpu” : [ “x64”, “ia32” ]<br>同样可以设置黑名单:<br>“cpu” : [ “!arm”, “!mips” ]<br>cpu 架构通过 process.arch 判断</p><h2 id="preferGlobal"><a href="#preferGlobal" class="headerlink" title="preferGlobal"></a>preferGlobal</h2><p>如果您的软件包主要用于安装到全局的命令行应用程序，那么该值设置为 true ，如果它被安装在本地，则提供一个警告。实际上该配置并没有阻止用户把模块安装到本地，只是防止该模块被错误的使用引起一些问题。</p><h2 id="private"><a href="#private" class="headerlink" title="private"></a>private</h2><p>如果这个属性被设置为 true，npm 将拒绝发布它，这是为了防止一个私有模块被无意间发布出去。如果你只想让模块被发布到一个特定的 npm 仓库，如一个内部的仓库，可与在下面的 publishConfig 中配置仓库参数。</p><h2 id="publishConfig"><a href="#publishConfig" class="headerlink" title="publishConfig"></a>publishConfig</h2><p>这个配置是会在模块发布时用到的一些值的集合。如果你不想模块被默认被标记为最新的，或者默认发布到公共仓库，可以在这里配置 tag 或仓库地址。</p><h2 id="DEFAULT-VALUES"><a href="#DEFAULT-VALUES" class="headerlink" title="DEFAULT VALUES"></a>DEFAULT VALUES</h2><p>npm 设置了一些默认参数，如：<br>“scripts”: {“start”: “node server.js”}<br>如果模块根目录下有一个 server.js 文件，那么 npm start 会默认运行这个文件。<br>“scripts”:{“preinstall”: “node-gyp rebuild”}<br>如果模块根目录下有 binding.gyp, npm 将默认用 node-gyp 来编译 preinstall 的脚本<br>“contributors”: […]<br>若模块根目录下有 AUTHORS 文件，则 npm 会按 Name (url)格式解析每一行的数据添加到 contributors 中，可以用#添加行注释</p>]]></content>
    
    
    <summary type="html">简单介绍 package.json</summary>
    
    
    
    <category term="前端综合" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/categories/%E5%89%8D%E7%AB%AF%E7%BB%BC%E5%90%88/"/>
    
    
    <category term="npm" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>如何根据系统主题自动响应CSS深色模式</title>
    <link href="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/321da28b4985/"/>
    <id>https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/321da28b4985/</id>
    <published>2020-03-31T06:06:26.000Z</published>
    <updated>2023-08-11T01:47:47.439Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS-深色模式-Dark-Mode"><a href="#CSS-深色模式-Dark-Mode" class="headerlink" title="CSS 深色模式 (Dark Mode)"></a>CSS 深色模式 (Dark Mode)</h2><p>在<code>:root</code>根元素中定义变量来设置主题的颜色。我建议你也这样做，因为这样会使这个过程容易得多。我定义的变量如下:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attr">--bg</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attr">--textColor</span>: <span class="number">#004050</span>;</span><br><span class="line">  <span class="attr">--borderColor</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.15</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong><code>:root</code></strong> 这个 CSS 伪类匹配文档树的根元素。对于 HTML 来说，**<code>:root</code>** 表示 <code>&lt;html&gt;</code>元素，除了优先级更高之外，与 <code>html</code> 选择器相同。</p></blockquote><p>如果希望在样式表中使用这些变量，可以这样做</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--bg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，如果你想改变你的主题颜色，所需要做的就是修改你定义的变量，所有使用这个变量的样式都会被更新。</p><p>现在我们需要定义一组新的变量，这些变量将在调用 CSS 深色模式时使用。对我来说，深色模式的变量是这样的:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 定义深色模式的颜色 */</span></span><br><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attr">--bg</span>: <span class="built_in">rgb</span>(<span class="number">30</span>, <span class="number">30</span>, <span class="number">34</span>);</span><br><span class="line">  <span class="attr">--textColor</span>: <span class="built_in">rgb</span>(<span class="number">150</span>, <span class="number">150</span>, <span class="number">154</span>);</span><br><span class="line">  <span class="attr">--borderColor</span>: <span class="number">#2c2c3a</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="添加深色模式自动响应"><a href="#添加深色模式自动响应" class="headerlink" title="添加深色模式自动响应"></a>添加深色模式自动响应</h2><p>现在我们定义了两组变量。剩下要做的一件事就是将<code>prefers-color-scheme</code>媒体查询添加到我们的深色模式变量中。</p><p>使用您的深色模式变量并在外层添加<code>@media</code>查询</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 根据系统的深色模式响应深色变量 */</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">prefers-color-scheme</span>: dark) &#123;</span><br><span class="line">  <span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">    <span class="attr">--bg</span>: <span class="built_in">rgb</span>(<span class="number">30</span>, <span class="number">30</span>, <span class="number">34</span>);</span><br><span class="line">    <span class="attr">--textColor</span>: <span class="built_in">rgb</span>(<span class="number">150</span>, <span class="number">150</span>, <span class="number">154</span>);</span><br><span class="line">    <span class="attr">--borderColor</span>: <span class="number">#2c2c3a</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@media/prefers-color-scheme"><code>prefers-color-scheme</code>文档</a></p></blockquote><p>这是真的! 如果有人正在使用一个深色模式的系统主题，并访问你的网站，将自动切换到深色模式。</p><blockquote><p>如果你的电脑系统不支持深色模式，可以使用手机测试，先把手机的系统主题调到深色模式，再打开你的网站。</p></blockquote><h2 id="JS-判断深色模式"><a href="#JS-判断深色模式" class="headerlink" title="JS 判断深色模式"></a>JS 判断深色模式</h2><p>如果你的需求需要 js 来判断系统是否处于深色模式，可以这样做：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="title function_">matchMedia</span>(<span class="string">&#x27;(prefers-color-scheme: dark)&#x27;</span>).<span class="property">matches</span>) &#123;</span><br><span class="line">  <span class="comment">//深色主题</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/matchMedia"><code>matchMedia</code></a>方法返回一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MediaQueryList"><code>MediaQueryList</code></a>对象，该对象具有属性<code>matches</code>、<code>media</code>，具有方法<code>addListener</code>、<code>removeListener</code>。</p></blockquote><p><code>addListener</code>接收一个<code>MediaQueryList</code>对象作为参数。<br>为深色模式添加监听器，以响应系统切换到或切换出深色模式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> listeners = &#123;</span><br><span class="line">  <span class="attr">dark</span>: <span class="function">(<span class="params">mediaQueryList</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (mediaQueryList.<span class="property">matches</span>) &#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&#x27;您切换到深色模式了！&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">light</span>: <span class="function">(<span class="params">mediaQueryList</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (mediaQueryList.<span class="property">matches</span>) &#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&#x27;您切换到浅色模式了！&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">matchMedia</span>(<span class="string">&#x27;(prefers-color-scheme: dark)&#x27;</span>).<span class="title function_">addListener</span>(listeners.<span class="property">dark</span>);</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">matchMedia</span>(<span class="string">&#x27;(prefers-color-scheme: light)&#x27;</span>).<span class="title function_">addListener</span>(listeners.<span class="property">light</span>);</span><br></pre></td></tr></table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>我们不仅可以在布局方面响应不同尺寸屏幕，还可以按系统主题响应深色模式。我相信你的深夜访客，或者那些喜欢深色模式的人，会感谢你的。</p>]]></content>
    
    
    <summary type="html">很多人喜欢选择 APP 或网站中的深色模式，也许他们更喜欢这样的外观，或者他们想让自己的眼睛免受疲劳。这篇文章将告诉你如何在网站中实现一个自动的 CSS 深色模式，根据访客的系统主题来自动响应。</summary>
    
    
    
    <category term="css学习笔记" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/categories/css%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="css" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>防抖与节流函数</title>
    <link href="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/f0e80b8bdd6f/"/>
    <id>https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/f0e80b8bdd6f/</id>
    <published>2020-02-29T07:07:47.000Z</published>
    <updated>2023-08-11T01:47:47.439Z</updated>
    
    <content type="html"><![CDATA[<p>防抖和节流的作用都是在高频事件中防止函数被多次调用，是一种性能优化的方案。</p><p>区别在于，防抖函数只会在高频事件结束后 n 毫秒调用一次函数，节流函数会在高频事件触发过程当中每隔 n 毫秒调用一次函数。</p><h2 id="防抖函数"><a href="#防抖函数" class="headerlink" title="防抖函数"></a>防抖函数</h2><p>触发高频事件后一段时间（wait）只会执行一次函数，如果指定时间（wait）内高频事件再次被触发，则重新计算时间。</p><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 防抖函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, wait</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timeout = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> context = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">let</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line">    <span class="keyword">if</span> (timeout) <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">    timeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      func.<span class="title function_">apply</span>(context, args);</span><br><span class="line">    &#125;, wait);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="节流函数"><a href="#节流函数" class="headerlink" title="节流函数"></a>节流函数</h2><p>规定在一个单位时间内，只能触发一次函数。如果这个单位时间内触发多次函数，只有一次生效</p><h3 id="封装-1"><a href="#封装-1" class="headerlink" title="封装"></a>封装</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 节流函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">func, wait</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timeout = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> context = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">let</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line">    <span class="keyword">if</span> (!timeout) &#123;</span><br><span class="line">      timeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        timeout = <span class="literal">null</span>;</span><br><span class="line">        func.<span class="title function_">apply</span>(context, args);</span><br><span class="line">      &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>常见的应用场景都是使用高频事件来调用函数的过程当中，比如应用于 window 对象的 resize、scroll 事件，拖拽时的 mousemove 事件，文字输入、自动完成的 keyup 事件。</p><h3 id="防抖应用场景"><a href="#防抖应用场景" class="headerlink" title="防抖应用场景"></a>防抖应用场景</h3><ul><li>scroll 事件滚动触发事件</li><li>搜索框输入查询，如果用户一直在输入中，没有必要不停地调用去请求服务端接口，等用户停止输入的时候，再调用，设置一个合适的时间间隔，有效减轻服务端压力。</li><li>表单验证</li><li>按钮提交事件。</li><li>浏览器窗口缩放，resize 事件(如窗口停止改变大小之后重新计算布局)等。</li></ul><h3 id="节流的应用场景"><a href="#节流的应用场景" class="headerlink" title="节流的应用场景"></a>节流的应用场景</h3><ul><li>DOM 元素的拖拽功能实现（mousemove）</li><li>搜索联想（keyup）</li><li>计算鼠标移动的距离（mousemove）</li><li>Canvas 模拟画板功能（mousemove）</li><li>射击游戏的 mousedown&#x2F;keydown 事件（单位时间只能发射一颗子弹）</li><li>监听滚动事件判断是否到页面底部自动加载更多</li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p class="codepen" data-height="600" data-theme-id="light" data-default-tab="result" data-user="xugaoyi" data-slug-hash="QWbgLMP" style="height: 600px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="防抖与节流函数">  <span>See the Pen <a href="https://codepen.io/xugaoyi/pen/QWbgLMP">  防抖与节流函数</a> by xugaoyi (<a href="https://codepen.io/xugaoyi">@xugaoyi</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><blockquote><p>本文转自<a href="https://xugaoyi.com/pages/0f6a0ac99b62ede5">https://xugaoyi.com/pages/0f6a0ac99b62ede5</a>，作者：xugaoyi</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;防抖和节流的作用都是在高频事件中防止函数被多次调用，是一种性能优化的方案。&lt;/p&gt;
&lt;p&gt;区别在于，防抖函数只会在高频事件结束后 n 毫秒调用一次函数，节流函数会在高频事件触发过程当中每隔 n 毫秒调用一次函数。&lt;/p&gt;
&lt;h2 id=&quot;防抖函数&quot;&gt;&lt;a href=&quot;#防抖</summary>
      
    
    
    
    <category term="javascript学习笔记" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/categories/javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>常用meta整理</title>
    <link href="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/6985b23201e8/"/>
    <id>https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/6985b23201e8/</id>
    <published>2020-02-21T04:20:10.000Z</published>
    <updated>2023-08-11T01:47:47.439Z</updated>
    
    <content type="html"><![CDATA[<h2 id="元素"><a href="#元素" class="headerlink" title="&lt;meta&gt; 元素"></a>&lt;meta&gt; 元素</h2><p><strong>必要属性</strong></p><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>content</td><td>some text</td><td>定义与 http-equiv 或 name 属性相关的元信息</td></tr></tbody></table><p><strong>可选属性</strong></p><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>http-equiv</td><td>content-type &#x2F; expire &#x2F; refresh &#x2F; set-cookie</td><td>把 content 属性关联到 HTTP 头部。</td></tr><tr><td>name</td><td>author &#x2F; description &#x2F; keywords &#x2F; generator &#x2F; revised &#x2F; others</td><td>把 content 属性关联到一个 name。</td></tr><tr><td>content</td><td>some text</td><td>定义用于翻译 content 属性值的格式。</td></tr></tbody></table><h3 id="网页相关"><a href="#网页相关" class="headerlink" title="网页相关"></a>网页相关</h3><ul><li><strong>申明编码</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>优先使用 IE 最新版本和 Chrome</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 关于X-UA-Compatible --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge,chrome=1&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 推荐 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=6&quot;</span> /&gt;</span><span class="comment">&lt;!-- 使用IE6 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=7&quot;</span> /&gt;</span><span class="comment">&lt;!-- 使用IE7 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=8&quot;</span> /&gt;</span><span class="comment">&lt;!-- 使用IE8 --&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>浏览器内核控制</strong>：国内浏览器很多都是双内核（webkit 和 Trident），webkit 内核高速浏览，IE 内核兼容网页和旧版网站。而添加 meta 标签的网站可以控制浏览器选择何种内核渲染。<a href="http://se.360.cn/v6/help/meta.html">参考文档</a></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">默认用极速核(Chrome)：<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;renderer&quot;</span> <span class="attr">content</span>=<span class="string">&quot;webkit&quot;</span> /&gt;</span></span><br><span class="line">默认用ie兼容内核（IE6/7）：<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;renderer&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie-comp&quot;</span> /&gt;</span></span><br><span class="line">默认用ie标准内核（IE9/IE10/IE11/取决于用户的IE）：<span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">  <span class="attr">name</span>=<span class="string">&quot;renderer&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">content</span>=<span class="string">&quot;ie-stand&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure><p>国内双核浏览器默认内核模式如下：</p><ol><li>搜狗高速浏览器、QQ 浏览器：IE 内核（兼容模式）</li><li>360 极速浏览器、遨游浏览器：Webkit 内核（极速模式）</li></ol><ul><li><strong>禁止浏览器从本地计算机的缓存中访问页面内容</strong>：这样设定，访问者将无法脱机浏览。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Pragma&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-cache&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>Windows 8</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;msapplication-TileColor&quot;</span> <span class="attr">content</span>=<span class="string">&quot;#000&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Windows 8 磁贴颜色 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;msapplication-TileImage&quot;</span> <span class="attr">content</span>=<span class="string">&quot;icon.png&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Windows 8 磁贴图标 --&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>站点适配</strong>：主要用于 PC-手机页的对应关系。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;mobile-agent&quot;</span> <span class="attr">content</span>=<span class="string">&quot;format=[wml|xhtml|html5]; url=url&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">[wml|xhtml|html5]根据手机页的协议语言，选择其中一种；</span></span><br><span class="line"><span class="comment">url=&quot;url&quot; 后者代表当前PC页所对应的手机页URL，两者必须是一一对应关系。</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>转码申明</strong>：用百度打开网页可能会对其进行转码（比如贴广告），避免转码可添加如下 meta。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Cache-Control&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-siteapp&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="SEO-优化"><a href="#SEO-优化" class="headerlink" title="SEO 优化"></a>SEO 优化</h3><p><a href="http://msdn.microsoft.com/zh-cn/library/ff724016">参考文档</a></p><ul><li><strong>页面关键词</strong>，每个网页应具有描述该网页内容的一组唯一的关键字。<br>使用人们可能会搜索，并准确描述网页上所提供信息的描述性和代表性关键字及短语。标记内容太短，则搜索引擎可能不会认为这些内容相关。另外标记不应超过 874 个字符。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;your tags&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>页面描述</strong>，每个网页都应有一个不超过 150 个字符且能准确反映网页内容的描述标签。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;150 words&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>搜索引擎索引方式</strong>，robotterms 是一组使用逗号(,)分割的值，通常有如下几种取值：none，noindex，nofollow，all，index 和 follow。确保正确使用 nofollow 和 noindex 属性值。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;robots&quot;</span> <span class="attr">content</span>=<span class="string">&quot;index,follow&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    all：文件将被检索，且页面上的链接可以被查询；</span></span><br><span class="line"><span class="comment">    none：文件将不被检索，且页面上的链接不可以被查询；</span></span><br><span class="line"><span class="comment">    index：文件将被检索；</span></span><br><span class="line"><span class="comment">    follow：页面上的链接可以被查询；</span></span><br><span class="line"><span class="comment">    noindex：文件将不被检索；</span></span><br><span class="line"><span class="comment">    nofollow：页面上的链接不可以被查询。</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>页面重定向和刷新</strong>：content 内的数字代表时间（秒），既多少时间后刷新。如果加 url,则会重定向到指定网页（搜索引擎能够自动检测，也很容易被引擎视作误导而受到惩罚）。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;0;url=&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>其他</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;author name&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 定义网页作者 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;google&quot;</span> <span class="attr">content</span>=<span class="string">&quot;index,follow&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;googlebot&quot;</span> <span class="attr">content</span>=<span class="string">&quot;index,follow&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;verify&quot;</span> <span class="attr">content</span>=<span class="string">&quot;index,follow&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="移动设备"><a href="#移动设备" class="headerlink" title="移动设备"></a>移动设备</h3><ul><li><strong>viewport</strong>：能优化移动浏览器的显示。如果不是响应式网站，不要使用 initial-scale 或者禁用缩放。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">  <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0,minimun-scale=1.0,maximum-scale=1.0,user-scalable=no&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这是常用的移动meta设置--&gt;</span></span><br></pre></td></tr></table></figure><ol><li>width：宽度（数值 &#x2F; device-width）（范围从 200 到 10,000，默认为 980 像素）</li><li>height：高度（数值 &#x2F; device-height）（范围从 223 到 10,000）</li><li>initial-scale：初始的缩放比例 （范围从&gt;0 到 10）</li><li>minimum-scale：允许用户缩放到的最小比例</li><li>maximum-scale：允许用户缩放到的最大比例</li><li>user-scalable：用户是否可以手动缩 (no,yes)</li></ol><p><strong>注意</strong>，很多人使用 initial-scale&#x3D;1 到非响应式网站上，这会让网站以 100%宽度渲染，用户需要手动移动页面或者缩放。如果和 initial-scale&#x3D;1 同时使用 user-scalable&#x3D;no 或 maximum-scale&#x3D;1，则用户将不能放大&#x2F;缩小网页来看到全部的内容。</p><ul><li><strong>WebApp 全屏模式</strong>：伪装 app，离线应用。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;apple-mobile-web-app-capable&quot;</span> <span class="attr">content</span>=<span class="string">&quot;yes&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 启用 WebApp 全屏模式 --&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>主题颜色</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;theme-color&quot;</span> <span class="attr">content</span>=<span class="string">&quot;#11a8cd&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200221134927.jpg"></p><ul><li><strong>隐藏状态栏&#x2F;设置状态栏颜色</strong>：只有在开启 WebApp 全屏模式时才生效。content 的值为 default | black | black-translucent 。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">  <span class="attr">name</span>=<span class="string">&quot;apple-mobile-web-app-status-bar-style&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">content</span>=<span class="string">&quot;black-translucent&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>添加到主屏后的标题</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;apple-mobile-web-app-title&quot;</span> <span class="attr">content</span>=<span class="string">&quot;标题&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>忽略数字自动识别为电话号码</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">&quot;telephone=no&quot;</span> <span class="attr">name</span>=<span class="string">&quot;format-detection&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>忽略识别邮箱</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">&quot;email=no&quot;</span> <span class="attr">name</span>=<span class="string">&quot;format-detection&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>添加智能 App 广告条 Smart App Banner</strong>：告诉浏览器这个网站对应的 app，并在页面上显示下载 banner(如下图)。<a href="https://developer.apple.com/library/ios/documentation/AppleApplications/Reference/SafariWebContent/PromotingAppswithAppBanners/PromotingAppswithAppBanners.html">参考文档</a></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">  <span class="attr">name</span>=<span class="string">&quot;apple-itunes-app&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">content</span>=<span class="string">&quot;app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200221134638.png"></p><ul><li><strong>其他</strong> <a href="http://fex.baidu.com/blog/2014/10/html-head-tags/?qq-pf-to=pcqq.c2c">参考文档</a></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;HandheldFriendly&quot;</span> <span class="attr">content</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 微软的老式浏览器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;MobileOptimized&quot;</span> <span class="attr">content</span>=<span class="string">&quot;320&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- uc强制竖屏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;screen-orientation&quot;</span> <span class="attr">content</span>=<span class="string">&quot;portrait&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- QQ强制竖屏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;x5-orientation&quot;</span> <span class="attr">content</span>=<span class="string">&quot;portrait&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- UC强制全屏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;full-screen&quot;</span> <span class="attr">content</span>=<span class="string">&quot;yes&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- QQ强制全屏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;x5-fullscreen&quot;</span> <span class="attr">content</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- UC应用模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;browsermode&quot;</span> <span class="attr">content</span>=<span class="string">&quot;application&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- QQ应用模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;x5-page-mode&quot;</span> <span class="attr">content</span>=<span class="string">&quot;app&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- windows phone 点击无高光 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;msapplication-tap-highlight&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="一个常用的移动端页面-meta-设置"><a href="#一个常用的移动端页面-meta-设置" class="headerlink" title="一个常用的移动端页面 meta 设置"></a>一个常用的移动端页面 meta 设置</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">  <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0,minimun-scale=1.0,maximum-scale=1.0,user-scalable=no&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">meta 标签提供关于 HTML 文档的元数据。元数据不会显示在页面上，但是对于机器是可读的。它可用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 web 服务。</summary>
    
    
    
    <category term="html学习笔记" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/categories/html%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>一个完美主义者的自我救赎</title>
    <link href="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/62c3ba71999b/"/>
    <id>https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/62c3ba71999b/</id>
    <published>2020-01-16T07:15:27.000Z</published>
    <updated>2023-08-11T01:47:47.443Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一个完美主义者的自我救赎"><a href="#一个完美主义者的自我救赎" class="headerlink" title="一个完美主义者的自我救赎"></a>一个完美主义者的自我救赎</h1><p>最近，看到一个心理测试题是测试你是否有完美主义：</p><blockquote><p>（1）你是不是经常为自己设定目标，而且最终往往达不到那些目标？</p><p>（2）当一件事件做得不够好时，你是否有再试一次的想法？</p><p>（3）你是否休息时仍想着学习、工作、或者其他还没有解决的事？</p><p>（4）如果遇到别人说话或打岔，破坏了你的注意力，你是否觉得不太高兴？</p><p>（5）你是否常常会在事后想，如果当时能换成另一种方式来解决，也许会更加理想？</p></blockquote><p>如果上面的问题，你的回答大部分是肯定的，那么你就有完美主义倾向。</p><p>对照自身，我就是那个完美主义者，时常会因为某件事做得不够好而感到痛苦，给我带来的后果就是：为了一件事想要达到“完美”的标准，付出了更多的成本，从而忽略真正需要优先处理的其他事情。最后，即使付出了成本，得到的结果也不一定是想要的”完美”。</p><p>看过一篇文章，里面说到：</p><blockquote><p>完美主义是一种压力，它让你为自己创造不切实际的期望。你明明做到了正常水平，但是因为设定的目标太高，所以看上去距离目的地仍然很遥远。你的心态变成了：这一切还不够好，依然可以改进。</p><p>完美主义消耗了我们最宝贵的资源和时间，让你将注意力从真正的优先事项上移开。</p></blockquote><p>完美主义就是追求一个较高水平的目标，不接受一个较低水平的，但可用的结果。我一直告诫自己，改掉追求完美的毛病。</p><p>完美主义已经对我造成了一些压力，还会妨碍我开始进入某些事情，总想着万事俱备之后才开始，结果是没有万事俱备，也没有东风，这事就搁置了。</p><p>某个军事文章里说，他们特种部队的射击理念是：绝对快，相对准！</p><blockquote><p>玩吃鸡游戏似乎也是这样，需要你有快速的反应能力，不管打不打到人，先开枪再说，即使打不到也可以吓到敌人啊，哈哈哈</p></blockquote><p>这个理念似乎也适用于我这样的完美主义者，“做得快”比“做得好”要好，不要太执着于“完美”，就好像我开始写博客，我知道自己的写作水平并不好，但这并不妨碍我开始写博客，相信我会越写越好的~</p><p>最后，心理医生也说过追求完美并不利于身心健康，不要追求完美，随心所欲地生活吧！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一个完美主义者的自我救赎&quot;&gt;&lt;a href=&quot;#一个完美主义者的自我救赎&quot; class=&quot;headerlink&quot; title=&quot;一个完美主义者的自我救赎&quot;&gt;&lt;/a&gt;一个完美主义者的自我救赎&lt;/h1&gt;&lt;p&gt;最近，看到一个心理测试题是测试你是否有完美主义：&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="心情杂货" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/categories/%E5%BF%83%E6%83%85%E6%9D%82%E8%B4%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>提高记忆的方法</title>
    <link href="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/b636f327ae47/"/>
    <id>https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/b636f327ae47/</id>
    <published>2020-01-03T06:34:48.000Z</published>
    <updated>2023-08-11T01:47:47.443Z</updated>
    
    <content type="html"><![CDATA[<h1 id="提高记忆的方法"><a href="#提高记忆的方法" class="headerlink" title="提高记忆的方法"></a>提高记忆的方法</h1><ol><li><p><strong>多个感官并用</strong><br>记忆时调用一切感官。没人的话可以大声阅读，有人的话可以默念，轻微摇晃手指等，有助于保持专注。</p></li><li><p><strong>重复记忆</strong><br>每天留出半个到一个小时，梳理总结今天所学的内容。每一章复习完成后做系统的知识整理。</p></li></ol><ol start="3"><li><strong>建立关联</strong><br>把你所学的新知识与已有的认知建立联系，对于记忆事半功倍。</li></ol><ol start="4"><li><strong>场景记忆</strong><br>把知识具象化为一个场景，想象自己在何时何地能用这些知识，与自身发生联系。</li></ol><ol start="5"><li><strong>提出问题</strong><br>每学习一个知识点，试着提问，然后给出答案。用了就记住了。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;提高记忆的方法&quot;&gt;&lt;a href=&quot;#提高记忆的方法&quot; class=&quot;headerlink&quot; title=&quot;提高记忆的方法&quot;&gt;&lt;/a&gt;提高记忆的方法&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;多个感官并用&lt;/strong&gt;&lt;br&gt;记忆时调用一切感官。没人的话</summary>
      
    
    
    
    <category term="杂货摊" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/categories/%E6%9D%82%E8%B4%A7%E6%91%8A/"/>
    
    
  </entry>
  
  <entry>
    <title>Git使用手册</title>
    <link href="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/f43666154ade/"/>
    <id>https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/f43666154ade/</id>
    <published>2019-12-25T06:27:01.000Z</published>
    <updated>2023-08-11T01:47:47.439Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>官网下载：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a> 下载完成后使用默认进行安装。</p><p>安装完成后，在开始菜单里找到 <code>Git</code> -&gt; <code>Git Bash</code>，蹦出一个类似命令行窗口的东西，就说明 Git 安装成功！<br>还需要最后一步设置，在命令行输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;email@example.com&quot;</span></span><br></pre></td></tr></table></figure><p>因为 Git 是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和 Email 地址。</p><h2 id="创建版本库（仓库）"><a href="#创建版本库（仓库）" class="headerlink" title="创建版本库（仓库）"></a>创建版本库（仓库）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建仓库</span></span><br><span class="line"><span class="built_in">mkdir</span> &lt;仓库name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入仓库</span></span><br><span class="line"><span class="built_in">cd</span> &lt;仓库name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此命令用于显示当前目录</span></span><br><span class="line"><span class="built_in">pwd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把当前目录初始化成Git仓库</span></span><br><span class="line">git init</span><br></pre></td></tr></table></figure><blockquote><p>也不一定必须在空目录下创建 Git 仓库，选择一个已经有东西的目录直接<code>git init</code>也是可以的。</p></blockquote><h2 id="添加文件到仓库"><a href="#添加文件到仓库" class="headerlink" title="添加文件到仓库"></a>添加文件到仓库</h2><p>在仓库目录下放入文件，如新建一个<code>test.txt</code>文件，然后使用<code>git add test.txt</code>命令告诉 Git，把文件添加到缓存区，然后使用<code>git commit -m &quot;提交描述&quot;</code>告诉 Git，把文件提交到仓库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加指定文件或文件夹到缓存区，文件需添加后缀</span></span><br><span class="line">git add &lt;文件或文件夹name&gt;                   <span class="comment"># 单个文件</span></span><br><span class="line">git add &lt;文件或文件夹name&gt; &lt;文件或文件夹name&gt;  <span class="comment"># 多个文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或 全部文件同时添加到缓存区</span></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把文件从缓存区提交至仓库</span></span><br><span class="line">git commit -m <span class="string">&quot;提交描述&quot;</span></span><br></pre></td></tr></table></figure><h4 id="提交描述规范"><a href="#提交描述规范" class="headerlink" title="提交描述规范"></a>提交描述规范</h4><p>在提交代码时输入清晰的说明有利于版本管理，建议搭配如下关键字编写提交描述</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建(add)</span></span><br><span class="line"><span class="comment"># 删除(rm)</span></span><br><span class="line"><span class="comment"># 更新(update)</span></span><br><span class="line"><span class="comment"># 改动(change)</span></span><br><span class="line"><span class="comment"># 实现</span></span><br><span class="line"><span class="comment"># 发布</span></span><br><span class="line"><span class="comment"># 修复</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h2><h4 id="提交修改"><a href="#提交修改" class="headerlink" title="提交修改"></a>提交修改</h4><p>如修改<code>test.txt</code>的内容后，运行<code>git status</code>命令看看被修改的文件，然后再使用<code>git add test.txt</code>、<br><code>git commit -m &quot;修改描述&quot;</code>把修改后的文件提交到仓库，提交后可再次使用<code>git status</code>查看当前状态。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示 新增/删除/被改动等 的文件</span></span><br><span class="line">git status</span><br></pre></td></tr></table></figure><h4 id="查看版本记录"><a href="#查看版本记录" class="headerlink" title="查看版本记录"></a>查看版本记录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看版本记录</span></span><br><span class="line">git <span class="built_in">log</span>   <span class="comment"># 显示版本号、提交时间等信息</span></span><br></pre></td></tr></table></figure><blockquote><p>也可使用可视化工具查看 Git 版本历史：<br>在仓库目录右键 &gt; <code>Git BUI Here</code></p></blockquote><h4 id="回退版本"><a href="#回退版本" class="headerlink" title="回退版本"></a>回退版本</h4><p>首先，Git 必须知道当前版本是哪个版本，在 Git 中，用<code>HEAD</code>表示当前版本，也就是最新的提交 1094adb…（注意我的提交 ID 和你的肯定不一样），上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上 100 个版本写 100 个^比较容易数不过来，所以写成<code>HEAD~100</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 回退到上一个版本</span></span><br><span class="line">$ git reset --hard HEAD^</span><br></pre></td></tr></table></figure><p>此时查看<code>git log</code>记录发现，原来最新的版本已经没有了，想回到原来最新的版本怎么办？这就需要知道最新的版本的版本号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 跳转到指定版本</span></span><br><span class="line">git reset --hard &lt;版本号前几位&gt;</span><br></pre></td></tr></table></figure><p>但是不知道版本号怎么办？Git 提供了一个命令<code>git reflog</code>用来记录你的每一次命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure><h4 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h4><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600/897889638509536">https://www.liaoxuefeng.com/wiki/896043488029600/897889638509536</a></p><h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600/900002180232448">https://www.liaoxuefeng.com/wiki/896043488029600/900002180232448</a></p><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><h4 id="SSH-验证"><a href="#SSH-验证" class="headerlink" title="SSH 验证"></a>SSH 验证</h4><p>使本机能关联远程仓库，首次需要 SSH 验证</p><ul><li>第 1 步：创建<code>SSH Key</code>。在用户主（C:\Users\dell）目录下，看看有没有.ssh 目录，<br>如果有，再看看这个目录下有没有<code>id_rsa</code>和<code>id_rsa.pub</code>这两个文件，如果已经有了，可直接跳到下一步。<br>如果没有，打开 Shell（Windows 下打开 Git Bash），创建<code>SSH Key</code>：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建SSH Key</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;邮件地址&quot;</span></span><br></pre></td></tr></table></figure><ul><li>第 2 步：登陆 GitHub，右上角头像 &gt; settings &gt; SSH and GPG keys &gt;Add SSH Key，在 key 的文本框里粘贴<code>id_rsa.pub</code>文件的内容</li></ul><h4 id="关联远程仓库"><a href="#关联远程仓库" class="headerlink" title="关联远程仓库"></a>关联远程仓库</h4><p>SSH 验证完成后，在 github 创建仓库，创建仓库时记得取消 <code>Initialize this repository with a README</code>的勾选，然后在本地命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关联远程仓库，仓库名一般使用origin</span></span><br><span class="line">git remote add &lt;仓库名&gt; &lt;远程仓库地址&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">git remote add origin git@github.com:xugaoyi/test.git</span><br></pre></td></tr></table></figure><p>下一步，就可以把本地库的所有内容推送到远程库上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把文件推送到远程仓库</span></span><br><span class="line">git push -u &lt;仓库名&gt; &lt;分支名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git 不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p><blockquote><p>前提是目录已经<code>git init</code>初始化成仓库，并且<code>git status</code>状态是没有改动的，如果有改动则先<code>git add .</code>添加至缓存区，<code>git commit -m &#39;提交描述&#39;</code>提交至仓库，然后执行上面命令。</p><p>如创建仓库时勾选了 <code>Initialize this repository with a README</code> 则需先拉取<code>README.md</code>文件到本地仓库<code>git pull</code></p><p>可关联多个远程仓库，注意给不同的远程仓库取不一样的名称，提交是分别按名称提交到不一样的远程仓库。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 简化的推送命令</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><h4 id="查看远程仓库"><a href="#查看远程仓库" class="headerlink" title="查看远程仓库"></a>查看远程仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看远程仓库</span></span><br><span class="line">git remote -v</span><br></pre></td></tr></table></figure><h4 id="删除远程仓库"><a href="#删除远程仓库" class="headerlink" title="删除远程仓库"></a>删除远程仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除远程仓库</span></span><br><span class="line">git remote <span class="built_in">rm</span> &lt;仓库名&gt;</span><br></pre></td></tr></table></figure><h4 id="从远程库克隆项目"><a href="#从远程库克隆项目" class="headerlink" title="从远程库克隆项目"></a>从远程库克隆项目</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从远程库克隆项目</span></span><br><span class="line">git <span class="built_in">clone</span> &lt;仓库地址&gt;</span><br></pre></td></tr></table></figure><h5 id="克隆指定分支"><a href="#克隆指定分支" class="headerlink" title="克隆指定分支"></a>克隆指定分支</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 克隆指定分支</span></span><br><span class="line">git <span class="built_in">clone</span> -b &lt;分支名&gt; &lt;仓库地址&gt;</span><br></pre></td></tr></table></figure><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建分支</span></span><br><span class="line">git checkout -b &lt;分支名&gt;</span><br></pre></td></tr></table></figure><h4 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看分支</span></span><br><span class="line">git branch</span><br></pre></td></tr></table></figure><p>查看分支时，在分支前带 * 号的表示当前的分支</p><h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换分支</span></span><br><span class="line">git checkout &lt;分支名&gt;</span><br></pre></td></tr></table></figure><h4 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 合并本地的分支</span></span><br><span class="line">git merge &lt;分支名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并远程的分支</span></span><br><span class="line">git merge &lt;远程仓库名&gt;/&lt;分支名&gt;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>，是将指定分支合并到当前分支，并非当前分支合并到指定分支。</p><p>一般情况下是把当前分支切换到<strong>主分支</strong>，然后把<strong>子分支</strong>合并到<strong>主分支</strong>。</p><h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">git branch -d &lt;分支名&gt;</span><br></pre></td></tr></table></figure><h4 id="修改分支名"><a href="#修改分支名" class="headerlink" title="修改分支名"></a>修改分支名</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改分支名</span></span><br><span class="line">git branch -m &lt;原分支名&gt; &lt;新分支名&gt;</span><br></pre></td></tr></table></figure><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><p>如对命令不清楚时，可使用<code>git help</code>命令显示出 git 命令介绍。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 帮助命令</span></span><br><span class="line">git <span class="built_in">help</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">help</span></span><br><span class="line">usage: git [--version] [--<span class="built_in">help</span>] [-C &lt;path&gt;] [-c &lt;name&gt;=&lt;value&gt;]</span><br><span class="line">           [--exec-path[=&lt;path&gt;]] [--html-path] [--man-path] [--info-path]</span><br><span class="line">           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]</span><br><span class="line">           [--git-dir=&lt;path&gt;] [--work-tree=&lt;path&gt;] [--namespace=&lt;name&gt;]</span><br><span class="line">           &lt;<span class="built_in">command</span>&gt; [&lt;args&gt;]</span><br><span class="line"></span><br><span class="line">These are common Git commands used <span class="keyword">in</span> various situations:</span><br><span class="line"></span><br><span class="line">start a working area (see also: git <span class="built_in">help</span> tutorial)</span><br><span class="line">   <span class="built_in">clone</span>      Clone a repository into a new directory</span><br><span class="line">   init       Create an empty Git repository or reinitialize an existing one</span><br><span class="line"></span><br><span class="line">work on the current change (see also: git <span class="built_in">help</span> everyday)</span><br><span class="line">   add        Add file contents to the index</span><br><span class="line">   <span class="built_in">mv</span>         Move or rename a file, a directory, or a symlink</span><br><span class="line">   reset      Reset current HEAD to the specified state</span><br><span class="line">   <span class="built_in">rm</span>         Remove files from the working tree and from the index</span><br><span class="line"></span><br><span class="line">examine the <span class="built_in">history</span> and state (see also: git <span class="built_in">help</span> revisions)</span><br><span class="line">   bisect     Use binary search to find the commit that introduced a bug</span><br><span class="line">   grep       Print lines matching a pattern</span><br><span class="line">   <span class="built_in">log</span>        Show commit logs</span><br><span class="line">   show       Show various types of objects</span><br><span class="line">   status     Show the working tree status</span><br><span class="line"></span><br><span class="line">grow, mark and tweak your common <span class="built_in">history</span></span><br><span class="line">   branch     List, create, or delete branches</span><br><span class="line">   checkout   Switch branches or restore working tree files</span><br><span class="line">   commit     Record changes to the repository</span><br><span class="line">   diff       Show changes between commits, commit and working tree, etc</span><br><span class="line">   merge      Join two or more development histories together</span><br><span class="line">   rebase     Reapply commits on top of another base tip</span><br><span class="line">   tag        Create, list, delete or verify a tag object signed with GPG</span><br><span class="line"></span><br><span class="line">collaborate (see also: git <span class="built_in">help</span> workflows)</span><br><span class="line">   fetch      Download objects and refs from another repository</span><br><span class="line">   pull       Fetch from and integrate with another repository or a <span class="built_in">local</span> branch</span><br><span class="line">   push       Update remote refs along with associated objects</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;git help -a&#x27;</span> and <span class="string">&#x27;git help -g&#x27;</span> list available subcommands and some</span><br><span class="line">concept guides. See <span class="string">&#x27;git help &lt;command&gt;&#x27;</span> or <span class="string">&#x27;git help &lt;concept&gt;&#x27;</span></span><br><span class="line">to <span class="built_in">read</span> about a specific subcommand or concept.</span><br></pre></td></tr></table></figure><p>翻译工具翻译中文</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">help</span></span><br><span class="line">使用：git [--version] [--<span class="built_in">help</span>] [-C &lt;path&gt;] [-c &lt;name&gt;=&lt;value&gt;]</span><br><span class="line">           [--exec-path[=&lt;path&gt;]] [--html-path] [--man-path] [--info-path]</span><br><span class="line">           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]</span><br><span class="line">           [--git-dir=&lt;path&gt;] [--work-tree=&lt;path&gt;] [--namespace=&lt;name&gt;]</span><br><span class="line">           &lt;<span class="built_in">command</span>&gt; [&lt;args&gt;]</span><br><span class="line"></span><br><span class="line">这些是在各种情况下使用的通用Git命令：</span><br><span class="line"></span><br><span class="line">start a working area (参见命令: git <span class="built_in">help</span> tutorial)</span><br><span class="line">   <span class="built_in">clone</span>      将存储库克隆到新目录中</span><br><span class="line">   init       创建一个空的Git存储库或重新初始化一个现有的存储库</span><br><span class="line"></span><br><span class="line">work on the current change (参见命令: git <span class="built_in">help</span> everyday)</span><br><span class="line">   add        将文件内容添加到索引中</span><br><span class="line">   <span class="built_in">mv</span>         移动或重命名文件、目录或符号链接</span><br><span class="line">   reset      将当前磁头重置为指定状态</span><br><span class="line">   <span class="built_in">rm</span>         从工作树和索引中删除文件</span><br><span class="line"></span><br><span class="line">examine the <span class="built_in">history</span> and state (参见命令: git <span class="built_in">help</span> revisions)</span><br><span class="line">   bisect     使用二分查找查找引入错误的提交</span><br><span class="line">   grep       打印与模式匹配的行</span><br><span class="line">   <span class="built_in">log</span>        显示提交日志</span><br><span class="line">   show       显示各种类型的对象</span><br><span class="line">   status     显示工作树状态</span><br><span class="line"></span><br><span class="line">grow, mark and tweak your common <span class="built_in">history</span></span><br><span class="line">   branch     列出、创建或删除分支</span><br><span class="line">   checkout   切换分支或还原工作树文件</span><br><span class="line">   commit     记录对存储库的更改</span><br><span class="line">   diff       显示提交、提交和工作树等之间的更改</span><br><span class="line">   merge      将两个或多个开发历史连接在一起</span><br><span class="line">   rebase     在另一个基本提示之上重新应用提交</span><br><span class="line">   tag        创建、列表、删除或验证用GPG签名的标记对象</span><br><span class="line"></span><br><span class="line">collaborate (参见命令: git <span class="built_in">help</span> workflows)</span><br><span class="line">   fetch      从另一个存储库下载对象和引用</span><br><span class="line">   pull       从另一个存储库或本地分支获取并与之集成</span><br><span class="line">   push       更新远程引用和相关对象</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;git help -a&#x27;</span> 和 <span class="string">&#x27;git help -g&#x27;</span> 列出可用的子命令和一些概念指导。</span><br><span class="line">命令<span class="string">&#x27;git help &lt;command&gt;&#x27;</span> 或 <span class="string">&#x27;git help &lt;concept&gt;&#x27;</span> 查看特定子命令或概念.</span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;官网下载：&lt;a href=&quot;https://git-scm.com/downloads&quot;&gt;https://git-scm.com/downl</summary>
      
    
    
    
    <category term="git学习笔记" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/categories/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>new命令原理</title>
    <link href="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/de2374e52c2c/"/>
    <id>https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/de2374e52c2c/</id>
    <published>2019-12-25T06:27:01.000Z</published>
    <updated>2023-08-11T01:47:47.439Z</updated>
    
    <content type="html"><![CDATA[<p>使用 new 命令时，它后面的函数依次执行下面的步骤：</p><ol><li>创建一个空对象，作为将要返回的实例对象。</li><li>将这个空对象的原型，指向构造函数的 prototype 属性。</li><li>将这个空对象赋值给函数内部的 this 关键字。</li><li>开始执行构造函数内部的代码。</li><li>如果构造函数内有返回值且为对象类型，则返回该对象，否则返回上面创建的实例对象。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义_new</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_new</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 将 arguments 对象转为数组</span></span><br><span class="line">  <span class="keyword">var</span> args = [].<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">  <span class="comment">// 取出构造函数</span></span><br><span class="line">  <span class="keyword">var</span> constructor = args.<span class="title function_">shift</span>();</span><br><span class="line">  <span class="comment">// 创建一个空对象，继承构造函数的 prototype 属性</span></span><br><span class="line">  <span class="keyword">var</span> context = <span class="title class_">Object</span>.<span class="title function_">create</span>(constructor.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">  <span class="comment">// 执行构造函数，并将context对象赋值给函数内部的this</span></span><br><span class="line">  <span class="keyword">var</span> result = constructor.<span class="title function_">apply</span>(context, args);</span><br><span class="line">  <span class="comment">// 如果返回结果是对象，就直接返回，否则返回 context 对象</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> result === <span class="string">&#x27;object&#x27;</span> &amp;&amp; result != <span class="literal">null</span> ? result : context;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义_new2</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_new2</span>(<span class="params"><span class="comment">/* 构造函数 */</span> constructor, <span class="comment">/* 构造函数参数 */</span> params</span>) &#123;</span><br><span class="line">  <span class="comment">// 创建一个空对象，并继承构造函数的 prototype 属性</span></span><br><span class="line">  <span class="keyword">var</span> context = <span class="title class_">Object</span>.<span class="title function_">create</span>(constructor.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">  <span class="comment">// 执行构造函数，并将context对象赋值给函数内部的this</span></span><br><span class="line">  <span class="keyword">var</span> result = constructor.<span class="title function_">apply</span>(context, params);</span><br><span class="line">  <span class="comment">// 如果返回结果是对象，就直接返回，否则返回 context 对象</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> result === <span class="string">&#x27;object&#x27;</span> &amp;&amp; result != <span class="literal">null</span> ? result : context;</span><br><span class="line">  <span class="comment">// （当用户在构造函数内部自定义返回对象的话则使用该对象，否则返回context）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过自定义_new 返回实例</span></span><br><span class="line"><span class="keyword">var</span> actor = <span class="title function_">_new</span>(<span class="title class_">Person</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="number">28</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(actor.<span class="property">name</span>); <span class="comment">// 张三</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过自定义_new2 返回实例</span></span><br><span class="line"><span class="keyword">var</span> actor2 = <span class="title function_">_new2</span>(<span class="title class_">Person</span>, [<span class="string">&#x27;李四&#x27;</span>, <span class="number">29</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(actor2.<span class="property">name</span>); <span class="comment">// 李四</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过new命令 返回实例</span></span><br><span class="line"><span class="keyword">var</span> actor3 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;王五&#x27;</span>, <span class="number">30</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(actor3.<span class="property">name</span>); <span class="comment">// 王五</span></span><br></pre></td></tr></table></figure><blockquote><p>本文转自<a href="https://xugaoyi.com/pages/8143cc480faf9a11">https://xugaoyi.com/pages/8143cc480faf9a11</a>，作者：xugaoyi</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用 new 命令时，它后面的函数依次执行下面的步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个空对象，作为将要返回的实例对象。&lt;/li&gt;
&lt;li&gt;将这个空对象的原型，指向构造函数的 prototype 属性。&lt;/li&gt;
&lt;li&gt;将这个空对象赋值给函数内部的 this 关键字。&lt;</summary>
      
    
    
    
    <category term="javascript学习笔记" scheme="https://blog-0gleoc95ae6da80d-1255445432.tcloudbaseapp.com/categories/javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
</feed>
